/*
        This code implements the integral computation on IPU.
        It is based on https://github.com/sunqm/libcint
*/
#include <poplar/Vertex.hpp>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <poplar/HalfFloat.hpp>
#include <poplar/Vertex.hpp>

#include "poplar/TileConstants.hpp"

using namespace poplar;

#ifdef __IPU__
// Use the IPU intrinsics
#include <ipu_memory_intrinsics>
#include <ipu_vector_math>
#define NAMESPACE ipu
#else
// Use the std functions
#include <cmath>
#define NAMESPACE std
#endif

#define dtype float
#define input_type float

#define M_PI (float)3.1415926535897932384626433832795028841971693993751058209749445923078164062
#define PIE4 (float)0.78539816339744827900
#define SQRTPI (float)1.7724538509055160272981674833411451

#define PTR_EXPCUTOFF           0

#define EXPCUTOFF       60
#define MIN_EXPCUTOFF   40

// slots of atm
#define CHARGE_OF       0
#define PTR_COORD       1
#define NUC_MOD_OF      2
#define PTR_ZETA        3
#define PTR_FRAC_CHARGE 3
#define RESERVE_ATMLOT1 4
#define RESERVE_ATMLOT2 5
#define ATM_SLOTS       6

// slots of bas
#define ATOM_OF         0
#define ANG_OF          1
#define NPRIM_OF        2
#define NCTR_OF         3
#define KAPPA_OF        4
#define PTR_EXP         5
#define PTR_COEFF       6
#define RESERVE_BASLOT  7
#define BAS_SLOTS       8

// ng[*]
#define IINC            0
#define JINC            1
#define KINC            2
#define LINC            3
#define GSHIFT          4
#define POS_E1          5
#define POS_E2          6
#define SLOT_RYS_ROOTS  6
#define TENSOR          7


#define MXRYSROOTS      32 // > ANG_MAX*2+1 for 4c2e
#define THRESHOLD_ZERO  1e-15; //(DBL_EPSILON * 8)
static float ROOTS_FOR_X0[]   = {0.5, 0.13069360623708471, 2.86930639376291528, 0.06037692468327989, 0.77682335593104605, 6.66279971938567405, 0.03481989730614715, 0.38156718508004405, 1.73730726945889761, 11.8463056481549111, 0.02266592663169863, 0.23127169214090556, 0.85734602411883608, 2.97353038120346067, 18.4151859759050990, 0.01593329495070804, 0.15647046776795464, 0.52658326320347937, 1.45549493835274166, 4.47729154890422456, 26.3682264868208917, 0.01181380845479022, 0.11337832545962978, 0.36143546199827142, 0.89527303800610058, 2.16718307449970339, 6.24592174688399731, 35.7049945446975072, 0.00910961293617975, 0.08613077878623435, 0.26546936423055723, 0.61752374342048372, 1.32902521206520555, 2.98910779776210757, 8.27832916501631658, 46.4253043257829152, 0.00723882685761766, 0.06774485628070622, 0.20415049332589748, 0.45633199434791132, 0.91729173690437343, 1.82439329925667723, 3.91978688925578357, 10.5739967231070128, 58.5290651806640202, 0.00589080681846613, 0.05472592487956225, 0.16232609261161096, 0.35315267858751927, 0.67944242243948439, 1.25739399889647980, 2.37971761888901092, 4.95846895018311600, 13.1326529261214167, 72.0162285805733335, 0.00488733612616512, 0.04515700876101939, 0.13240037096506916, 0.28253618374640330, 0.52746670115882438, 0.93166748944873070, 1.63612501282132771, 2.99411139750931175, 6.10473806652073600, 15.9541438022849492, 86.8867666306574631, 0.00412019184676903, 0.03791118129199890, 0.11018828563899001, 0.23179530831466224, 0.42345630230694602, 0.72421338523125791, 1.21133175221592430, 2.05253340080824551, 3.66706307331851234, 7.35834812348164737, 19.0383766276142184, 103.140662367930827, 0.00352055479193454, 0.03228901170211435, 0.09321497102456649, 0.19395959218782608, 0.34863942062035819, 0.58246762196717317, 0.94178878042410221, 1.51746580977363927, 2.50605126083401295, 4.39825956545004263, 8.71914561205178579, 22.3852928048674447, 120.777904994304999, 0.00304295968666365, 0.02783695831749468, 0.07993405012307971, 0.16491083995350634, 0.29275174955113165, 0.48056334796006992, 0.75805833071173866, 1.17923494295630961, 1.84947385268844303, 2.99632115699014032, 5.18750002435611477, 10.1870306098823701, 25.9948538065162700, 139.798487370306667, 0.00265638827985884, 0.02425009434267790, 0.06933568767249568, 0.14207481953281493, 0.24974878660205013, 0.40442628385592421, 0.62615572291363973, 0.94929992942214438, 1.43594787867543021, 2.20697174226710000, 3.52310832077201304, 6.03465054304835658, 11.7619357346468950, 29.8670334459449984, 160.202404622023600, 0.00233908913409399, 0.02131708094525320, 0.06073609594433991, 0.12376819871441240, 0.21586001541338807, 0.34579995866737608, 0.52767337072352206, 0.78452789304120705, 1.15559356754606689, 1.71152984668713470, 2.58970199118034718, 4.08625304208831011, 6.93961893285161705, 13.4438141722724307, 34.0018134148735740, 181.989653329916926, 0.00207544243412830, 0.01888759245981660, 0.05365801454821308, 0.10884885454501932, 0.18862266668962116, 0.29954903459405208, 0.45185308380311652, 0.66164964801649237, 0.95509492609113843, 1.37653737678676812, 2.00570942133046260, 2.99748634648857582, 4.68564342324177155, 7.90233997515582592, 15.2326325584007700, 38.3991805980226502, 205.160231037391577, 0.00185399634140437, 0.01685227694737889, 0.04775964111887165, 0.09651766287745709, 0.16636649640437164, 0.26232651719296074, 0.39202397022416273, 0.56711232331318464, 0.80578967544389658, 1.13745755013995372, 1.61185267810200554, 2.31829577442596160, 3.43019800066852473, 5.32119907232479614, 8.92276643934207724, 17.1283665833224015, 43.0591253990511252, 229.714135942759465, 0.00166619989363752, 0.01513001468643313, 0.04279069596099729, 0.08620073088953205, 0.14792271329238423, 0.23186595750538546, 0.34384897279841593, 0.49253668994919912, 0.69103506867637833, 0.95970145594169632, 1.33133483223894759, 1.86134080625452944, 2.64915130552243632, 3.88774461606522921, 5.99286096755062982, 10.0008634188521752, 19.1309981891349364, 47.9816406644461125, 255.651366700340943, 0.00150556367367504, 0.01365958130906878, 0.03856434256729382, 0.07747659492872706, 0.13245147741657513, 0.20658296700885233, 0.30439699080823514, 0.43248851020324227, 0.60056920785975062, 0.82323977038557735, 1.12310548759579202, 1.53652396047001289, 2.12485675695580264, 2.99817461264803354, 4.37005758291887887, 6.70058494970383102, 11.1366046506980951, 21.2405137312359731, 53.1667209729696379, 282.971922288642945, 0.00136709078673688, 0.01239405404707358, 0.03493871773870477, 0.07002966572314153, 0.11933546517548119, 0.18533975034810136, 0.27162214849373176, 0.38330281537433028, 0.52775249147995862, 0.71575249251405546, 0.96345103210237266, 1.29579764817254834, 1.75287525624785395, 2.40229251391121406, 3.36528954189828976, 4.87708501247866496, 7.44433742491554934, 12.3299700602726365, 23.4569027421418205, 58.6143621552275024, 311.675801920950231, 0.00124688302665660, 0.01129697407726093, 0.03180447295147243, 0.06361957443688833, 0.10811189954427899, 0.16730017611467516, 0.24405695487560790, 0.34242592106441611, 0.46811614228539369, 0.62928567081422644, 0.83781715700385526, 1.11146557613833762, 1.47762575313696917, 1.98027611998840014, 2.69356616940901053, 3.75043794230933692, 5.40878704411054963, 8.22409245628665792, 13.5809440852342069, 25.7801570818660513, 64.3245609619059461, 341.763004983419801, 0.00114186318288679, 0.01033966091165380, 0.02907618179809798, 0.05806046666674924, 0.09842783531629418, 0.15183741234468401, 0.22062391084280355, 0.30802869139363406, 0.41855186217289764, 0.55849619707813161, 0.73682598952358320, 0.96656238513293488, 1.26713041676110630, 1.66847427806544253, 2.21864041305843299, 2.99861463221418360, 4.15357475132079933, 5.96513262837141260, 9.03982975219044508, 14.8895145075069853, 28.2102703424311360, 70.2973148302989147, 373.233530991416790, 0.00104957592619883, 0.00949929923543853, 0.02668629558658319, 0.05320669795533743, 0.09000997038838153, 0.13847326383472790, 0.20051570393946336, 0.27876963531845218, 0.37683660713108600, 0.49967393580009959, 0.65418912561449615, 0.85017628790014737, 1.10183571758815312, 1.43032844490104510, 1.86825412687067283, 2.46790125519403442, 3.31738862344814170, 4.57466458707221787, 6.54609727598963397, 9.89153324757326290, 16.2556716242639336, 30.7472374230897965, 76.5326217171815745, 406.087379558197121, 0.00096804284738431, 0.00875755393432549, 0.02458081554776140, 0.04894275245515047, 0.08264379373760023, 0.12683727043286127, 0.18311667069998602, 0.25364456253704884, 0.34134207545566180, 0.45016937343104197, 0.58554703532077252, 0.75500228999917480, 0.96918565647872618, 1.24351953460867463, 1.60096866013230147, 2.07689561357071379, 2.72800602860234117, 3.64984917026813323, 5.01367933893000072, 7.15166145352438127, 10.7791900859152688, 17.6794076496927620, 33.3910542224617041, 83.0304799773143226, 440.324550372101900, 0.00089565544579415, 0.00809955275425705, 0.02271614434738525, 0.04517600999821385, 0.07615888796107663, 0.11663848431984211, 0.16794992820605648, 0.23188820866452552, 0.31085069091583326, 0.40804436959930529, 0.52779092420711327, 0.67598365319794951, 0.86078710994700593, 1.09373681861456311, 1.39152179518748314, 1.77897940038687981, 2.29434354548434167, 2.99891284341138560, 3.99596510298124776, 5.47059643379416439, 7.78180942089030947, 11.7027898771576255, 19.1607162767816972, 36.1417174121595819, 89.7908882738678230, 475.945043179718538, 0.00083109512231001, 0.00751312899996396, 0.02105676222865796, 0.04183147280023096, 0.07041838084706412, 0.10764559262935149, 0.15464094439970513, 0.21290812273042229, 0.28443540318795412, 0.37185131035702608, 0.47864959901382474, 0.60951929142249152, 0.77083812244638825, 0.97142732494617946, 1.22373739624445730, 1.54576955516031082, 1.96430355433472874, 2.52055371318386642, 3.28058799237833822, 4.35571123841469463, 5.94539756886436108, 8.43652837638792094, 12.6623241490425755, 20.6995923519147301, 38.9992242681262559, 96.8138455115274017, 512.948857773288788, 0.00077327265934614, 0.00698825089467907, 0.01957348910108766, 0.03884786463796536, 0.06531125072015883, 0.09967265909133871, 0.14289191032726364, 0.19623917849107639, 0.26137903585278396, 0.34048907901994532, 0.43642861876513318, 0.55298158998816316, 0.69521214980263677, 0.86999572387224727, 1.08683078904460427, 1.35911373975000174, 1.70620434300699198, 2.15689511458497217, 2.75549034207772140, 3.57300408858532466, 4.72906704140683248, 6.43806777206929753, 9.11580781931480134, 13.6577859361646594, 22.2960316302049643, 41.9635725434427217, 104.099350785941111, 551.335993981182169, 0.00072128194564740, 0.00651658674903341, 0.01824216910818774, 0.03617470694407861, 0.06074663048551807, 0.09256872669629406, 0.13246337474487627, 0.18151161540602556, 0.24111887374480269, 0.31310655640913303, 0.39984041967064187, 0.50441237267625859, 0.63090166347065471, 0.78475672612933997, 0.97336500077332952, 1.20692362348545126, 1.49980648941909015, 1.87277880410838788, 2.35671665589883470, 2.99912421380963605, 3.87613868310780071, 5.11601562503908097, 6.94859469634611254, 9.81963906887027303, 14.6891694684952489, 23.9500305894168525, 45.0347603713383755, 111.647403345100417, 591.106451660610614, 0.00067436423858690, 0.00609117017527231, 0.01704266391472668, 0.03377010057973431, 0.05664953460995263, 0.08621012238293974, 0.12316086250453277, 0.16842816229032322, 0.22320778254362913, 0.28903640974860370, 0.36789065056317101, 0.46232515675023896, 0.57566774544675866, 0.71229929883268555, 0.87806261702092841, 1.08087223642108826, 1.33164597705686012, 1.64576733008456162, 2.04545422772977680, 2.56373746311251997, 3.25143126219864472, 4.18997322544660839, 5.51654299454181833, 7.47696808324745068, 10.5480148968875366, 15.7564699327142631, 25.6615862869478178, 48.2127861904691118, 119.458002559538456, 632.260230692001196, 0.00063188030795309, 0.00570613985091565, 0.01595807437771901, 0.03159902426299814, 0.05295761433571713, 0.08049468423212932, 0.11482497679044872, 0.15674738549368366, 0.20728641098615123, 0.26774869366161208, 0.33980028211802605, 0.42557300057117895, 0.52781244442212103, 0.65008669605940471, 0.79708543296513053, 0.97505658701547648, 1.19245741981514763, 1.46094890390658727, 1.79695658298597641, 2.22419869893463003, 2.77793212288121914, 3.51239151059291050, 4.51449227234244334, 5.93063746893961551, 8.02317935078966760, 11.3009292445204717, 16.8596832874818088, 27.4306962488283015, 51.4976486868003431, 127.531147899114781, 674.797330974597368, };
static float WEIGHTS_FOR_X0[] = {1.0, 0.65214515486254614, 0.34785484513745385, 0.46791393457269104, 0.36076157304813860, 0.17132449237917034, 0.36268378337836198, 0.31370664587788728, 0.22238103445337447, 0.10122853629037625, 0.29552422471475287, 0.26926671930999635, 0.21908636251598204, 0.14945134915058059, 0.06667134430868813, 0.24914704581340278, 0.23349253653835480, 0.20316742672306592, 0.16007832854334622, 0.10693932599531843, 0.04717533638651182, 0.21526385346315779, 0.20519846372129560, 0.18553839747793781, 0.15720316715819353, 0.12151857068790318, 0.08015808715976020, 0.03511946033175186, 0.18945061045506849, 0.18260341504492358, 0.16915651939500253, 0.14959598881657673, 0.12462897125553387, 0.09515851168249278, 0.06225352393864789, 0.02715245941175409, 0.16914238296314359, 0.16427648374583272, 0.15468467512626524, 0.14064291467065065, 0.12255520671147846, 0.10094204410628716, 0.07642573025488905, 0.04971454889496979, 0.02161601352648331, 0.15275338713072585, 0.14917298647260374, 0.14209610931838205, 0.13168863844917662, 0.11819453196151841, 0.10193011981724043, 0.08327674157670474, 0.06267204833410906, 0.04060142980038694, 0.01761400713915211, 0.13925187285563199, 0.13654149834601517, 0.13117350478706237, 0.12325237681051242, 0.11293229608053921, 0.10041414444288096, 0.08594160621706772, 0.06979646842452048, 0.05229333515268328, 0.03377490158481415, 0.01462799529827220, 0.12793819534675215, 0.12583745634682829, 0.12167047292780339, 0.11550566805372560, 0.10744427011596563, 0.09761865210411388, 0.08619016153195327, 0.07334648141108030, 0.05929858491543678, 0.04427743881741980, 0.02853138862893366, 0.01234122979998719, 0.11832141527926227, 0.11666044348529658, 0.11336181654631966, 0.10847184052857659, 0.10205916109442542, 0.09421380035591414, 0.08504589431348523, 0.07468414976565974, 0.06327404632957483, 0.05097582529714781, 0.03796238329436276, 0.02441785109263190, 0.01055137261734300, 0.11004701301647519, 0.10871119225829413, 0.10605576592284641, 0.10211296757806076, 0.09693065799792991, 0.09057174439303284, 0.08311341722890121, 0.07464621423456877, 0.06527292396699959, 0.05510734567571674, 0.04427293475900422, 0.03290142778230437, 0.02113211259277125, 0.00912428259309451, 0.10285265289355884, 0.10176238974840550, 0.09959342058679526, 0.09636873717464425, 0.09212252223778612, 0.08689978720108297, 0.08075589522942021, 0.07375597473770520, 0.06597422988218049, 0.05749315621761906, 0.04840267283059405, 0.03879919256962704, 0.02878470788332336, 0.01846646831109095, 0.00796819249616660, 0.09654008851472780, 0.09563872007927485, 0.09384439908080456, 0.09117387869576388, 0.08765209300440381, 0.08331192422694675, 0.07819389578707030, 0.07234579410884850, 0.06582222277636184, 0.05868409347853554, 0.05099805926237617, 0.04283589802222668, 0.03427386291302143, 0.02539206530926205, 0.01627439473090567, 0.00701861000947009, 0.09095674033025987, 0.09020304437064072, 0.08870189783569386, 0.08646573974703574, 0.08351309969984565, 0.07986844433977184, 0.07556197466003193, 0.07062937581425572, 0.06511152155407641, 0.05905413582752449, 0.05250741457267810, 0.04552561152335327, 0.03816659379638751, 0.03049138063844613, 0.02256372198549497, 0.01445016274859503, 0.00622914055590868, 0.08598327567039474, 0.08534668573933862, 0.08407821897966193, 0.08218726670433970, 0.07968782891207160, 0.07659841064587067, 0.07294188500565306, 0.06874532383573644, 0.06403979735501548, 0.05886014424532481, 0.05324471397775991, 0.04723508349026597, 0.04087575092364489, 0.03421381077030722, 0.02729862149856877, 0.02018151529773547, 0.01291594728406557, 0.00556571966424504, 0.08152502928038578, 0.08098249377059710, 0.07990103324352782, 0.07828784465821094, 0.07615366354844639, 0.07351269258474345, 0.07038250706689895, 0.06678393797914041, 0.06274093339213305, 0.05828039914699720, 0.05343201991033231, 0.04822806186075868, 0.04270315850467443, 0.03689408159402473, 0.03083950054517505, 0.02457973973823237, 0.01815657770961323, 0.01161344471646867, 0.00500288074963934, 0.07750594797842481, 0.07703981816424796, 0.07611036190062624, 0.07472316905796826, 0.07288658239580405, 0.07061164739128677, 0.06791204581523390, 0.06480401345660103, 0.06130624249292893, 0.05743976909939155, 0.05322784698393682, 0.04869580763507223, 0.04387090818567327, 0.03878216797447201, 0.03346019528254784, 0.02793700698002340, 0.02224584919416695, 0.01642105838190788, 0.01049828453115281, 0.00452127709853319, 0.07386423423217287, 0.07346081345346752, 0.07265617524380410, 0.07145471426517098, 0.06986299249259415, 0.06788970337652194, 0.06554562436490897, 0.06284355804500257, 0.05979826222758665, 0.05642636935801838, 0.05274629569917407, 0.04877814079280324, 0.04454357777196587, 0.04006573518069226, 0.03536907109759211, 0.03047924069960346, 0.02542295952611304, 0.02022786956905264, 0.01492244369735749, 0.00953622030174850, 0.00410599860464908, 0.07054915778935406, 0.07019768547355821, 0.06949649186157257, 0.06844907026936666, 0.06706063890629365, 0.06533811487918143, 0.06329007973320385, 0.06092673670156196, 0.05825985987759549, 0.05530273556372805, 0.05207009609170446, 0.04857804644835203, 0.04484398408197003, 0.04088651231034621, 0.03672534781380887, 0.03238122281206982, 0.02787578282128101, 0.02323148190201921, 0.01847148173681474, 0.01361958675557998, 0.00870048136752484, 0.00374540480311277, 0.06751868584903645, 0.06721061360067817, 0.06659587476845488, 0.06567727426778120, 0.06445900346713906, 0.06294662106439450, 0.06114702772465048, 0.05906843459554631, 0.05672032584399123, 0.05411341538585675, 0.05125959800714302, 0.04817189510171220, 0.04486439527731812, 0.04135219010967872, 0.03765130535738607, 0.03377862799910689, 0.02975182955220275, 0.02558928639713001, 0.02130999875413650, 0.01693351400783623, 0.01247988377098868, 0.00796989822972462, 0.00343030086810704, 0.06473769681268392, 0.06446616443595008, 0.06392423858464818, 0.06311419228625402, 0.06203942315989266, 0.06070443916589388, 0.05911483969839563, 0.05727729210040321, 0.05519950369998416, 0.05289018948519366, 0.05035903555385447, 0.04761665849249047, 0.04467456085669428, 0.04154508294346474, 0.03824135106583070, 0.03477722256477043, 0.03116722783279808, 0.02742650970835694, 0.02357076083932437, 0.01961616045735552, 0.01557931572294384, 0.01147723457923453, 0.00732755390127626, 0.00315334605230583, 0.06217661665534726, 0.06193606742068324, 0.06145589959031666, 0.06073797084177021, 0.05978505870426545, 0.05860084981322244, 0.05718992564772838, 0.05555774480621251, 0.05371062188899624, 0.05165570306958113, 0.04940093844946631, 0.04695505130394843, 0.04432750433880327, 0.04152846309014769, 0.03856875661258767, 0.03545983561514615, 0.03221372822357801, 0.02884299358053519, 0.02536067357001239, 0.02178024317012479, 0.01811556071348939, 0.01438082276148557, 0.01059054838365096, 0.00675979919574540, 0.00290862255315514, 0.05981036574529186, 0.05959626017124815, 0.05916881546604297, 0.05852956177181386, 0.05768078745252682, 0.05662553090236859, 0.05536756966930265, 0.05391140693275726, 0.05226225538390699, 0.05042601856634237, 0.04840926974407489, 0.04621922837278479, 0.04386373425900040, 0.04135121950056027, 0.03869067831042397, 0.03589163483509723, 0.03296410908971879, 0.02991858114714394, 0.02676595374650401, 0.02351751355398446, 0.02018489150798079, 0.01678002339630073, 0.01331511498234096, 0.00980263457946275, 0.00625552396297327, 0.00269131695004711, 0.05761753670714702, 0.05742613705411211, 0.05704397355879459, 0.05647231573062596, 0.05571306256058998, 0.05476873621305798, 0.05364247364755361, 0.05233801619829874, 0.05085969714618814, 0.04921242732452888, 0.04740167880644499, 0.04543346672827671, 0.04331432930959701, 0.04105130613664497, 0.03865191478210251, 0.03612412584038355, 0.03347633646437264, 0.03071734249787067, 0.02785630931059587, 0.02490274146720877, 0.02186645142285308, 0.01875752762146937, 0.01558630303592413, 0.01236332812884764, 0.00909936945550939, 0.00580561101523998, 0.00249748183576158, 0.05557974630651439, 0.05540795250324512, 0.05506489590176242, 0.05455163687088942, 0.05386976186571448, 0.05302137852401076, 0.05200910915174139, 0.05083608261779848, 0.04950592468304757, 0.04802274679360025, 0.04639113337300189, 0.04461612765269228, 0.04270321608466708, 0.04065831138474451, 0.03848773425924766, 0.03619819387231518, 0.03379676711561176, 0.03129087674731044, 0.02868826847382274, 0.02599698705839195, 0.02322535156256531, 0.02038192988240257, 0.01747551291140094, 0.01451508927802147, 0.01150982434038338, 0.00846906316330788, 0.00540252224601533, 0.00232385537577321, 0.05368111986333484, 0.05352634330405825, 0.05321723644657901, 0.05275469052637083, 0.05214003918366981, 0.05137505461828572, 0.05046194247995312, 0.04940333550896239, 0.04820228594541774, 0.04686225672902634, 0.04538711151481980, 0.04378110353364025, 0.04204886332958212, 0.04019538540986779, 0.03822601384585843, 0.03614642686708727, 0.03396262049341601, 0.03168089125380932, 0.02930781804416049, 0.02685024318198186, 0.02431525272496395, 0.02171015614014623, 0.01904246546189340, 0.01631987423497096, 0.01355023711298881, 0.01074155353287877, 0.00790197384999867, 0.00503998161265024, 0.00216772324962744, 0.05190787763122063, 0.05176794317491017, 0.05148845150098092, 0.05107015606985562, 0.05051418453250936, 0.04982203569055017, 0.04899557545575683, 0.04803703181997117, 0.04694898884891220, 0.04573437971611448, 0.04439647879578711, 0.04293889283593564, 0.04136555123558475, 0.03968069545238080, 0.03788886756924344, 0.03599489805108450, 0.03400389272494642, 0.03192121901929633, 0.02975249150078894, 0.02750355674992479, 0.02518047762152125, 0.02278951694399782, 0.02033712072945729, 0.01782990101420772, 0.01527461859678480, 0.01267816647681596, 0.01004755718228798, 0.00738993116334545, 0.00471272992695356, 0.00202681196887375, 0.05024800037525557, 0.05012106956904260, 0.04986752859495174, 0.04948801791969869, 0.04898349622051730, 0.04835523796347721, 0.04760483018410085, 0.04673416847841523, 0.04574545221456998, 0.04464117897712430, 0.04342413825804739, 0.04209740441038514, 0.04066432888241756, 0.03912853175196327, 0.03749389258228027, 0.03576454062276843, 0.03394484437941086, 0.03203940058162502, 0.03005302257399023, 0.02799072816331500, 0.02585772695402506, 0.02365940720868315, 0.02140132227767030, 0.01908917665857351, 0.01672881179017760, 0.01432619182380677, 0.01188739011701071, 0.00941857942842056, 0.00692604190183109, 0.00441633345693098, 0.00189920567951372, };


dtype CINTcommon_fac_sp(int l)
{
        switch (l) {
                case 0: return 0.282094791773878143;
                case 1: return 0.488602511902919921;
                default: return 1;
        }
}


//dtype _sqrt(dtype num) {return num;}
//dtype _sqrt(dtype num) {return sqrt(num);}
dtype _sqrt(dtype num) { return exp(log(num)*1/2);}
//dtype _sqrt(dtype num) { return num;}

//static void rys_root1(dtype X, dtype *roots,  Output<Vector<float>> weights, int g_size) {
static void rys_root1(dtype X, dtype *roots,  float* weights, int g_size) {
        dtype Y, F1;


        if (X > (float)33.) {
                weights[0+g_size*2] = _sqrt(PIE4/X);
                roots  [0         ] = (float)0.5E+00 / ( X - (float)0.5E+00 );
                return;
        }
        else if ( X < (float)3.e-7 ) {
                weights[0+g_size*2] = (float)1.0E+00 - X / (float)3.0E+00;
                roots  [0         ] = (float)0.5E+00 - X / (float)5.0E+00;
                return;
        }

        dtype E = exp(-X);


        if (X > (float)15.) {
                F1 = ((( ( (float)1.9623264149430E-01) / X - (float)4.9695241464490E-01) / X -
                           (float)6.0156581186481E-05)* E + _sqrt(PIE4/X) - E) / X * (float)0.5;
        }
        else if (X > (float)10.) {
                Y = (float)1./X;
                F1 = ((((-(float)1.8784686463512E-01*Y+(float)2.2991849164985E-01)*Y -
                          (float)4.9893752514047E-01)*Y-(float)2.1916512131607E-05)* E
                        + _sqrt(PIE4/X) - E)*Y*(float)0.5;
        }
        else if (X > (float)5.) {
                Y = (float)1./X;
                F1 = ((((((( (float)4.6897511375022E-01*Y-(float)6.9955602298985E-01)*Y +
                             (float)5.3689283271887E-01)*Y-(float)3.2883030418398E-01)*Y +
                             (float)2.4645596956002E-01)*Y-(float)4.9984072848436E-01)*Y -
                             (float)3.1501078774085E-06)* E + _sqrt(PIE4/X) - E)*Y*(float)0.5;
        }
        else if (X > (float)3.){
                Y = X-(float)4.0E+00;
                F1 = ((((((((((-(float)2.62453564772299E-11*Y+(float)3.24031041623823E-10 )*Y-
                              (float)3.614965656163E-09)*Y+(float)3.760256799971E-08)*Y-
                            (float)3.553558319675E-07)*Y+(float)3.022556449731E-06)*Y-
                          (float)2.290098979647E-05)*Y+(float)1.526537461148E-04)*Y-
                        (float)8.81947375894379E-04 )*Y+(float)4.33207949514611E-03 )*Y-
                      (float)1.75257821619926E-02 )*Y+(float)5.28406320615584E-02;
        }
        else if (X > (float)1.) {
                Y = X-(float)2.0E+00;
                F1 = ((((((((((-(float)1.61702782425558E-10 *Y+(float)1.96215250865776E-09 )*Y-
                                (float)2.14234468198419E-08)*Y+(float)2.17216556336318E-07 )*Y-
                                (float)1.98850171329371E-06)*Y+(float)1.62429321438911E-05 )*Y-
                                (float)1.16740298039895E-04)*Y+(float)7.24888732052332E-04 )*Y-
                                (float)3.79490003707156E-03)*Y+(float)1.61723488664661E-02 )*Y-
                                (float)5.29428148329736E-02)*Y+(float)1.15702180856167E-01;
        }
        else {
                F1 = ((((((((-(float)8.36313918003957E-08 *X + (float)1.21222603512827E-06)*X-
                              (float)1.15662609053481E-05)*X + (float)9.25197374512647E-05)*X-
                              (float)6.40994113129432E-04)*X + (float)3.78787044215009E-03)*X-
                              (float)1.85185172458485E-02)*X + (float)7.14285713298222E-02)*X-
                              (float)1.99999999997023E-01)*X + (float)3.33333333333318E-01;
        }

        dtype WW1 = (float)2. * X * F1 + E;
        weights[0+g_size*2] = WW1;
        roots[0] = F1 / (WW1 - F1);
}

static void rys_root2(dtype X, dtype *roots, float* weights, int g_size) {
        // added (float) to all 2.12312E-01 numbers;
        dtype R12, R22, W22;

        dtype RT1, RT2, WW1, WW2;
        dtype F1, E, Y;

        R12 = (float)2.75255128608411E-01;
        R22 = (float)2.72474487139158E+00;
        W22 = (float)9.17517095361369E-02;

        if (X < (float)3.e-7){
                RT1 = (float)1.30693606237085E-01 -(float)2.90430236082028E-02 *X;
                RT2 = (float)2.86930639376291E+00 -(float)6.37623643058102E-01 *X;
                WW1 = (float)6.52145154862545E-01 -(float)1.22713621927067E-01 *X;
                WW2 = (float)3.47854845137453E-01 -(float)2.10619711404725E-01 *X;
        }
        else if (X < (float)1.) {
                F1 = ((((((((-(float)8.36313918003957E-08*X+(float)1.21222603512827E-06 )*X-
                            (float)1.15662609053481E-05 )*X+(float)9.25197374512647E-05 )*X-
                          (float)6.40994113129432E-04 )*X+(float)3.78787044215009E-03 )*X-
                        (float)1.85185172458485E-02 )*X+(float)7.14285713298222E-02 )*X-
                      (float)1.99999999997023E-01 )*X+(float)3.33333333333318E-01;

                WW1 = (X+X)*F1+exp(-X);

                RT1 = (((((((-(float)2.35234358048491E-09*X+(float)2.49173650389842E-08)*X-
                            (float)4.558315364581E-08)*X-(float)2.447252174587E-06)*X+
                          (float)4.743292959463E-05)*X-(float)5.33184749432408E-04 )*X+
                        (float)4.44654947116579E-03 )*X-(float)2.90430236084697E-02 )*X+
                        (float)1.30693606237085E-01;

                RT2 = (((((((-(float)2.47404902329170E-08*X+(float)2.36809910635906E-07)*X+
                            (float)1.835367736310E-06)*X-(float)2.066168802076E-05)*X-
                          (float)1.345693393936E-04)*X-(float)5.88154362858038E-05 )*X+
                        (float)5.32735082098139E-02 )*X-(float)6.37623643056745E-01 )*X+
                        (float)2.86930639376289E+00;

                WW2 = ((F1-WW1)*RT1+F1)*((float)1.0E+00+RT2)/(RT2-RT1);

                WW1 = WW1-WW2;

        }
        else if (X < (float)3.) {

                Y = X-(float)2.0E+00;
                F1 = ((((((((((-(float)1.61702782425558E-10*Y+(float)1.96215250865776E-09 )*Y-
                              (float)2.14234468198419E-08 )*Y+(float)2.17216556336318E-07 )*Y-
                            (float)1.98850171329371E-06 )*Y+(float)1.62429321438911E-05 )*Y-
                          (float)1.16740298039895E-04 )*Y+(float)7.24888732052332E-04 )*Y-
                        (float)3.79490003707156E-03 )*Y+(float)1.61723488664661E-02 )*Y-
                      (float)5.29428148329736E-02 )*Y+(float)1.15702180856167E-01; // 800k cycles
                WW1 = (X+X)*F1+exp(-X);
                RT1 = (((((((((-(float)6.36859636616415E-12*Y+(float)8.47417064776270E-11)*Y-
                              (float)5.152207846962E-10)*Y-(float)3.846389873308E-10)*Y+
                            (float)8.472253388380E-08)*Y-(float)1.85306035634293E-06 )*Y+
                          (float)2.47191693238413E-05 )*Y-(float)2.49018321709815E-04 )*Y+
                        (float)2.19173220020161E-03 )*Y-(float)1.63329339286794E-02 )*Y+
                        (float)8.68085688285261E-02; // 800k cycles
                RT2 = ((((((((( (float)1.45331350488343E-10*Y+(float)2.07111465297976E-09)*Y-
                              (float)1.878920917404E-08)*Y-(float)1.725838516261E-07)*Y+
                            (float)2.247389642339E-06)*Y+(float)9.76783813082564E-06 )*Y-
                          (float)1.93160765581969E-04 )*Y-(float)1.58064140671893E-03 )*Y+
                        (float)4.85928174507904E-02 )*Y-(float)4.30761584997596E-01 )*Y+
                        (float)1.80400974537950E+00; // 800k cycles
                WW2 = ((F1-WW1)*RT1+F1)*((float)1.0E+00+RT2)/(RT2-RT1);
                WW1 = WW1-WW2;
        }

        else if (X < (float)5.){

                Y = X-(float)4.0E+00;
                F1 = ((((((((((-(float)2.62453564772299E-11*Y+(float)3.24031041623823E-10 )*Y-
                              (float)3.614965656163E-09)*Y+(float)3.760256799971E-08)*Y-
                            (float)3.553558319675E-07)*Y+(float)3.022556449731E-06)*Y-
                          (float)2.290098979647E-05)*Y+(float)1.526537461148E-04)*Y-
                        (float)8.81947375894379E-04 )*Y+(float)4.33207949514611E-03 )*Y-
                      (float)1.75257821619926E-02 )*Y+(float)5.28406320615584E-02;
                WW1 = (X+X)*F1+exp(-X);
                RT1 = ((((((((-(float)4.11560117487296E-12*Y+(float)7.10910223886747E-11)*Y-
                             (float)1.73508862390291E-09 )*Y+(float)5.93066856324744E-08 )*Y-
                           (float)9.76085576741771E-07 )*Y+(float)1.08484384385679E-05 )*Y-
                         (float)1.12608004981982E-04 )*Y+(float)1.16210907653515E-03 )*Y-
                       (float)9.89572595720351E-03 )*Y+(float)6.12589701086408E-02;
                RT2 = (((((((((-(float)1.80555625241001E-10*Y+(float)5.44072475994123E-10)*Y+
                              (float)1.603498045240E-08)*Y-(float)1.497986283037E-07)*Y-
                            (float)7.017002532106E-07)*Y+(float)1.85882653064034E-05 )*Y-
                          (float)2.04685420150802E-05 )*Y-(float)2.49327728643089E-03 )*Y+
                        (float)3.56550690684281E-02 )*Y-(float)2.60417417692375E-01 )*Y+
                        (float)1.12155283108289E+00;
                WW2 = ((F1-WW1)*RT1+F1)*((float)1.0E+00+RT2)/(RT2-RT1);
                WW1 = WW1-WW2;
        } else if (X < (float)10) {
                E = exp(-X);
                WW1 = (((((( (float)4.6897511375022E-01/X-(float)6.9955602298985E-01)/X +
                           (float)5.3689283271887E-01)/X-(float)3.2883030418398E-01)/X +
                         (float)2.4645596956002E-01)/X-(float)4.9984072848436E-01)/X -
                       (float)3.1501078774085E-06)*E + _sqrt(PIE4/X);
                F1 = (WW1-E)/(X+X);
                Y = X-(float)7.5E+00;
                RT1 = (((((((((((((-(float)1.43632730148572E-16*Y+(float)2.38198922570405E-16)*
                                  Y+(float)1.358319618800E-14)*Y-(float)7.064522786879E-14)*Y-
                                (float)7.719300212748E-13)*Y+(float)7.802544789997E-12)*Y+
                              (float)6.628721099436E-11)*Y-(float)1.775564159743E-09)*Y+
                            (float)1.713828823990E-08)*Y-(float)1.497500187053E-07)*Y+
                          (float)2.283485114279E-06)*Y-(float)3.76953869614706E-05 )*Y+
                        (float)4.74791204651451E-04 )*Y-(float)4.60448960876139E-03 )*Y+
                        (float)3.72458587837249E-02;
                RT2 = (((((((((((( (float)2.48791622798900E-14*Y-(float)1.36113510175724E-13)*Y-
                                 (float)2.224334349799E-12)*Y+(float)4.190559455515E-11)*Y-
                               (float)2.222722579924E-10)*Y-(float)2.624183464275E-09)*Y+
                             (float)6.128153450169E-08)*Y-(float)4.383376014528E-07)*Y-
                           (float)2.49952200232910E-06 )*Y+(float)1.03236647888320E-04 )*Y-
                         (float)1.44614664924989E-03 )*Y+(float)1.35094294917224E-02 )*Y-
                       (float)9.53478510453887E-02 )*Y+(float)5.44765245686790E-01;
                WW2 = ((F1-WW1)*RT1+F1)*((float)1.0E+00+RT2)/(RT2-RT1);
                WW1 = WW1-WW2;
        } else if (X < (float)15) {
                E = exp(-X);
                WW1 = (((-(float)1.8784686463512E-01/X+(float)2.2991849164985E-01)/X -
                        (float)4.9893752514047E-01)/X-(float)2.1916512131607E-05)*E
                        + _sqrt(PIE4/X);
                F1 = (WW1-E)/(X+X);
                RT1 = ((((-(float)1.01041157064226E-05*X+(float)1.19483054115173E-03)*X -
                         (float)6.73760231824074E-02)*X+(float)1.25705571069895E+00)*X +
                       (((-(float)8.57609422987199E+03/X+(float)5.91005939591842E+03)/X -
                         (float)1.70807677109425E+03)/X+(float)2.64536689959503E+02)/X -
                       (float)2.38570496490846E+01)*E + R12/(X-R12);
                RT2 = ((( (float)3.39024225137123E-04*X-(float)9.34976436343509E-02)*X -
                        (float)4.22216483306320E+00)*X +
                       (((-(float)2.08457050986847E+03/X -
                          (float)1.04999071905664E+03)/X+(float)3.39891508992661E+02)/X -
                        (float)1.56184800325063E+02)/X+(float)8.00839033297501E+00)*E + R22/(X-R22);
                WW2 = ((F1-WW1)*RT1+F1)*((float)1.0E+00+RT2)/(RT2-RT1);
                WW1 = WW1-WW2;
        } else if (X < (float)33) {
                E = exp(-X);
                WW1 = (( (float)1.9623264149430E-01/X-(float)4.9695241464490E-01)/X -
                       (float)6.0156581186481E-05)*E + _sqrt(PIE4/X);
                F1 = (WW1-E)/(X+X);
                RT1 = ((((-(float)1.14906395546354E-06*X+(float)1.76003409708332E-04)*X -
                         (float)1.71984023644904E-02)*X-(float)1.37292644149838E-01)*X +
                       (-(float)4.75742064274859E+01/X+(float)9.21005186542857E+00)/X -
                       (float)2.31080873898939E-02)*E + R12/(X-R12);
                RT2 = ((( (float)3.64921633404158E-04*X-(float)9.71850973831558E-02)*X -
                        (float)4.02886174850252E+00)*X +
                       (-(float)1.35831002139173E+02/X -
                        (float)8.66891724287962E+01)/X+(float)2.98011277766958E+00)*E + R22/(X-R22);
                WW2 = ((F1-WW1)*RT1+F1)*((float)1.0E+00+RT2)/(RT2-RT1);
                WW1 = WW1-WW2;
        } else if (X < (float)40) {
                WW1 = _sqrt(PIE4/X);
                E = exp(-X);
                RT1 = (-(float)8.78947307498880E-01*X+(float)1.09243702330261E+01)*E + R12/(X-R12);
                RT2 = (-(float)9.28903924275977E+00*X+(float)8.10642367843811E+01)*E + R22/(X-R22);
                WW2 = ( (float)4.46857389308400E+00*X-(float)7.79250653461045E+01)*E + W22*WW1;
                WW1 = WW1-WW2;
        } else {
                WW1 = _sqrt(PIE4/X);
                RT1 = R12/(X-R12);
                RT2 = R22/(X-R22);
                WW2 = W22*WW1;
                WW1 = WW1-WW2;
        }
        roots[0] = RT1;
        roots[1] = RT2;
        weights[0+g_size*2] = WW1;
        weights[1+g_size*2] = WW2;
}



static void rys_root3(dtype X, dtype *roots, float* weights, int g_size) {

        dtype R13, R23, W23, R33, W33;
        dtype RT1, RT2, RT3, WW1, WW2, WW3;
        dtype F1, F2, E, T1, T2, T3, A1, A2, Y;

        R13 = (float)1.90163509193487E-01;
        R23 = (float)1.78449274854325E+00;
        W23 = (float)1.77231492083829E-01;
        R33 = (float)5.52534374226326E+00;
        W33 = (float)5.11156880411248E-03;

        if (X < (float)3.e-7){
                RT1 = (float)6.03769246832797E-02 -(float)9.28875764357368E-03 *X;
                RT2 = (float)7.76823355931043E-01 -(float)1.19511285527878E-01 *X;
                RT3 = (float)6.66279971938567E+00 -(float)1.02504611068957E+00 *X;
                WW1 = (float)4.67913934572691E-01 -(float)5.64876917232519E-02 *X;
                WW2 = (float)3.60761573048137E-01 -(float)1.49077186455208E-01 *X;
                WW3 = (float)1.71324492379169E-01 -(float)1.27768455150979E-01 *X;
        } else if (X < (float)1.) {
                RT1 = ((((((-(float)5.10186691538870E-10*X+(float)2.40134415703450E-08)*X-
                             (float)5.01081057744427E-07 )*X+(float)7.58291285499256E-06 )*X-
                         (float)9.55085533670919E-05 )*X+(float)1.02893039315878E-03 )*X-
                       (float)9.28875764374337E-03 )*X+(float)6.03769246832810E-02;
                RT2 = ((((((-(float)1.29646524960555E-08*X+(float)7.74602292865683E-08)*X+
                           (float)1.56022811158727E-06 )*X-(float)1.58051990661661E-05 )*X-
                         (float)3.30447806384059E-04 )*X+(float)9.74266885190267E-03 )*X-
                       (float)1.19511285526388E-01 )*X+(float)7.76823355931033E-01;
                RT3 = ((((((-(float)9.28536484109606E-09*X-(float)3.02786290067014E-07)*X-
                           (float)2.50734477064200E-06 )*X-(float)7.32728109752881E-06 )*X+
                         (float)2.44217481700129E-04 )*X+(float)4.94758452357327E-02 )*X-
                       (float)1.02504611065774E+00 )*X+(float)6.66279971938553E+00;
                F2 = ((((((((-(float)7.60911486098850E-08*X+(float)1.09552870123182E-06 )*X-
                            (float)1.03463270693454E-05 )*X+(float)8.16324851790106E-05 )*X-
                          (float)5.55526624875562E-04 )*X+(float)3.20512054753924E-03 )*X-
                        (float)1.51515139838540E-02 )*X+(float)5.55555554649585E-02 )*X-
                      (float)1.42857142854412E-01 )*X+(float)1.99999999999986E-01;
                E = exp(-X);
                F1 = ((X+X)*F2+E)/(float)3.0E+00;
                WW1 = (X+X)*F1+E;
                T1 = RT1/(RT1+(float)1.0E+00);
                T2 = RT2/(RT2+(float)1.0E+00);
                T3 = RT3/(RT3+(float)1.0E+00);
                A2 = F2-T1*F1;
                A1 = F1-T1*WW1;
                WW3 = (A2-T2*A1)/((T3-T2)*(T3-T1));
                WW2 = (T3*A1-A2)/((T3-T2)*(T2-T1));
                WW1 = WW1-WW2-WW3;
        } else if (X < (float)3.) {
                Y = X-(float)2.0E+00;
                RT1 = (((((((( (float)1.44687969563318E-12*Y+(float)4.85300143926755E-12)*Y-
                             (float)6.55098264095516E-10 )*Y+(float)1.56592951656828E-08 )*Y-
                           (float)2.60122498274734E-07 )*Y+(float)3.86118485517386E-06 )*Y-
                         (float)5.13430986707889E-05 )*Y+(float)6.03194524398109E-04 )*Y-
                       (float)6.11219349825090E-03 )*Y+(float)4.52578254679079E-02;
                RT2 = ((((((( (float)6.95964248788138E-10*Y-(float)5.35281831445517E-09)*Y-
                            (float)6.745205954533E-08)*Y+(float)1.502366784525E-06)*Y+
                          (float)9.923326947376E-07)*Y-(float)3.89147469249594E-04 )*Y+
                        (float)7.51549330892401E-03 )*Y-(float)8.48778120363400E-02 )*Y+
                        (float)5.73928229597613E-01;
                RT3 = ((((((((-(float)2.81496588401439E-10*Y+(float)3.61058041895031E-09)*Y+
                             (float)4.53631789436255E-08 )*Y-(float)1.40971837780847E-07 )*Y-
                           (float)6.05865557561067E-06 )*Y-(float)5.15964042227127E-05 )*Y+
                         (float)3.34761560498171E-05 )*Y+(float)5.04871005319119E-02 )*Y-
                       (float)8.24708946991557E-01 )*Y+(float)4.81234667357205E+00;
                F2 = ((((((((((-(float)1.48044231072140E-10*Y+(float)1.78157031325097E-09 )*Y-
                              (float)1.92514145088973E-08 )*Y+(float)1.92804632038796E-07 )*Y-
                            (float)1.73806555021045E-06 )*Y+(float)1.39195169625425E-05 )*Y-
                          (float)9.74574633246452E-05 )*Y+(float)5.83701488646511E-04 )*Y-
                        (float)2.89955494844975E-03 )*Y+(float)1.13847001113810E-02 )*Y-
                      (float)3.23446977320647E-02 )*Y+(float)5.29428148329709E-02;
                E = exp(-X);
                F1 = ((X+X)*F2+E)/(float)3.0E+00;
                WW1 = (X+X)*F1+E;
                T1 = RT1/(RT1+(float)1.0E+00);
                T2 = RT2/(RT2+(float)1.0E+00);
                T3 = RT3/(RT3+(float)1.0E+00);
                A2 = F2-T1*F1;
                A1 = F1-T1*WW1;
                WW3 = (A2-T2*A1)/((T3-T2)*(T3-T1));
                WW2 = (T3*A1-A2)/((T3-T2)*(T2-T1));
                WW1 = WW1-WW2-WW3;
        } else if (X < (float)5.){
                Y = X-(float)4.0E+00;
                RT1 = ((((((( (float)1.44265709189601E-11*Y-(float)4.66622033006074E-10)*Y+
                            (float)7.649155832025E-09)*Y-(float)1.229940017368E-07)*Y+
                          (float)2.026002142457E-06)*Y-(float)2.87048671521677E-05 )*Y+
                        (float)3.70326938096287E-04 )*Y-(float)4.21006346373634E-03 )*Y+
                        (float)3.50898470729044E-02;
                RT2 = ((((((((-(float)2.65526039155651E-11*Y+(float)1.97549041402552E-10)*Y+
                             (float)2.15971131403034E-09 )*Y-(float)7.95045680685193E-08 )*Y+
                           (float)5.15021914287057E-07 )*Y+(float)1.11788717230514E-05 )*Y-
                         (float)3.33739312603632E-04 )*Y+(float)5.30601428208358E-03 )*Y-
                       (float)5.93483267268959E-02 )*Y+(float)4.31180523260239E-01;
                RT3 = ((((((((-(float)3.92833750584041E-10*Y-(float)4.16423229782280E-09)*Y+
                             (float)4.42413039572867E-08 )*Y+(float)6.40574545989551E-07 )*Y-
                           (float)3.05512456576552E-06 )*Y-(float)1.05296443527943E-04 )*Y-
                         (float)6.14120969315617E-04 )*Y+(float)4.89665802767005E-02 )*Y-
                       (float)6.24498381002855E-01 )*Y+(float)3.36412312243724E+00;
                F2 = ((((((((((-(float)2.36788772599074E-11*Y+(float)2.89147476459092E-10 )*Y-
                              (float)3.18111322308846E-09 )*Y+(float)3.25336816562485E-08 )*Y-
                            (float)3.00873821471489E-07 )*Y+(float)2.48749160874431E-06 )*Y-
                          (float)1.81353179793672E-05 )*Y+(float)1.14504948737066E-04 )*Y-
                        (float)6.10614987696677E-04 )*Y+(float)2.64584212770942E-03 )*Y-
                      (float)8.66415899015349E-03 )*Y+(float)1.75257821619922E-02;
                E = exp(-X);
                F1 = ((X+X)*F2+E)/(float)3.0E+00;
                WW1 = (X+X)*F1+E;
                T1 = RT1/(RT1+(float)1.0E+00);
                T2 = RT2/(RT2+(float)1.0E+00);
                T3 = RT3/(RT3+(float)1.0E+00);
                A2 = F2-T1*F1;
                A1 = F1-T1*WW1;
                WW3 = (A2-T2*A1)/((T3-T2)*(T3-T1));
                WW2 = (T3*A1-A2)/((T3-T2)*(T2-T1));
                WW1 = WW1-WW2-WW3;
        } else if (X < (float)10) {
                E = exp(-X);
                WW1 = (((((( (float)4.6897511375022E-01/X-(float)6.9955602298985E-01)/X +
                           (float)5.3689283271887E-01)/(float)X-3.2883030418398E-01)/X +
                         (float)2.4645596956002E-01)/X-(float)4.9984072848436E-01)/X -
                       (float)3.1501078774085E-06)*E + _sqrt(PIE4/X);
                F1 = (WW1-E)/(X+X);
                F2 = (F1+F1+F1-E)/(X+X);
                Y = X-(float)7.5E+00;
                RT1 = ((((((((((( (float)5.74429401360115E-16*Y+(float)7.11884203790984E-16)*Y-
                                (float)6.736701449826E-14)*Y-(float)6.264613873998E-13)*Y+
                              (float)1.315418927040E-11)*Y-(float)4.23879635610964E-11 )*Y+
                            (float)1.39032379769474E-09 )*Y-(float)4.65449552856856E-08 )*Y+
                          (float)7.34609900170759E-07 )*Y-(float)1.08656008854077E-05 )*Y+
                        (float)1.77930381549953E-04 )*Y-(float)2.39864911618015E-03 )*Y+
                        (float)2.39112249488821E-02;
                RT2 = ((((((((((( (float)1.13464096209120E-14*Y+(float)6.99375313934242E-15)*Y-
                                (float)8.595618132088E-13)*Y-(float)5.293620408757E-12)*Y-
                              (float)2.492175211635E-11)*Y+(float)2.73681574882729E-09 )*Y-
                            (float)1.06656985608482E-08 )*Y-(float)4.40252529648056E-07 )*Y+
                          (float)9.68100917793911E-06 )*Y-(float)1.68211091755327E-04 )*Y+
                        (float)2.69443611274173E-03 )*Y-(float)3.23845035189063E-02 )*Y+
                        (float)2.75969447451882E-01;
                RT3 = (((((((((((( (float)6.66339416996191E-15*Y+(float)1.84955640200794E-13)*Y-
                                 (float)1.985141104444E-12)*Y-(float)2.309293727603E-11)*Y+
                               (float)3.917984522103E-10)*Y+(float)1.663165279876E-09)*Y-
                             (float)6.205591993923E-08)*Y+(float)8.769581622041E-09)*Y+
                           (float)8.97224398620038E-06 )*Y-(float)3.14232666170796E-05 )*Y-
                         (float)1.83917335649633E-03 )*Y+(float)3.51246831672571E-02 )*Y-
                       (float)3.22335051270860E-01 )*Y+(float)1.73582831755430E+00;
                T1 = RT1/(RT1+(float)1.0E+00);
                T2 = RT2/(RT2+(float)1.0E+00);
                T3 = RT3/(RT3+(float)1.0E+00);
                A2 = F2-T1*F1;
                A1 = F1-T1*WW1;
                WW3 = (A2-T2*A1)/((T3-T2)*(T3-T1));
                WW2 = (T3*A1-A2)/((T3-T2)*(T2-T1));
                WW1 = WW1-WW2-WW3;
        } else if (X < (float)15) {
                E = exp(-X);
                WW1 = (((-(float)1.8784686463512E-01/X+(float)2.2991849164985E-01)/X -
                        (float)4.9893752514047E-01)/X-(float)2.1916512131607E-05)*E
                        + _sqrt(PIE4/X);
                F1 = (WW1-E)/(X+X);
                F2 = (F1+F1+F1-E)/(X+X);
                Y = X-(float)12.5E+00;
                RT1 = ((((((((((( (float)4.42133001283090E-16*Y-(float)2.77189767070441E-15)*Y-
                                (float)4.084026087887E-14)*Y+(float)5.379885121517E-13)*Y+
                              (float)1.882093066702E-12)*Y-(float)8.67286219861085E-11 )*Y+
                            (float)7.11372337079797E-10 )*Y-(float)3.55578027040563E-09 )*Y+
                          (float)1.29454702851936E-07 )*Y-(float)4.14222202791434E-06 )*Y+
                        (float)8.04427643593792E-05 )*Y-(float)1.18587782909876E-03 )*Y+
                        (float)1.53435577063174E-02;
                RT2 = ((((((((((( (float)6.85146742119357E-15*Y-(float)1.08257654410279E-14)*Y-
                                (float)8.579165965128E-13)*Y+(float)6.642452485783E-12)*Y+
                              (float)4.798806828724E-11)*Y-(float)1.13413908163831E-09 )*Y+
                            (float)7.08558457182751E-09 )*Y-(float)5.59678576054633E-08 )*Y+
                          (float)2.51020389884249E-06 )*Y-(float)6.63678914608681E-05 )*Y+
                        (float)1.11888323089714E-03 )*Y-(float)1.45361636398178E-02 )*Y+
                        (float)1.65077877454402E-01;
                RT3 = (((((((((((( (float)3.20622388697743E-15*Y-(float)2.73458804864628E-14)*Y-
                                 (float)3.157134329361E-13)*Y+(float)8.654129268056E-12)*Y-
                               (float)5.625235879301E-11)*Y-(float)7.718080513708E-10)*Y+
                             (float)2.064664199164E-08)*Y-(float)1.567725007761E-07)*Y-
                           (float)1.57938204115055E-06 )*Y+(float)6.27436306915967E-05 )*Y-
                         (float)1.01308723606946E-03 )*Y+(float)1.13901881430697E-02 )*Y-
                       (float)1.01449652899450E-01 )*Y+(float)7.77203937334739E-01;
                T1 = RT1/(RT1+(float)1.0E+00);
                T2 = RT2/(RT2+(float)1.0E+00);
                T3 = RT3/(RT3+(float)1.0E+00);
                A2 = F2-T1*F1;
                A1 = F1-T1*WW1;
                WW3 = (A2-T2*A1)/((T3-T2)*(T3-T1));
                WW2 = (T3*A1-A2)/((T3-T2)*(T2-T1));
                WW1 = WW1-WW2-WW3;
        }
        else if (X < (float)33) {
                E = exp(-X);
                WW1 = (( (float)1.9623264149430E-01/X-(float)4.9695241464490E-01)/X -
                       (float)6.0156581186481E-05)*E + _sqrt(PIE4/X);
                F1 = (WW1-E)/(X+X);
                F2 = (F1+F1+F1-E)/(X+X);
                if (X < (float)20) {
                        RT1 = ((((((-(float)2.43270989903742E-06*X+(float)3.57901398988359E-04)*X -
                                   (float)2.34112415981143E-02)*X+(float)7.81425144913975E-01)*X -
                                 (float)1.73209218219175E+01)*X+(float)2.43517435690398E+02)*X +
                               (-(float)1.97611541576986E+04/X+(float)9.82441363463929E+03)/X -
                               (float)2.07970687843258E+03)*E + R13/(X-R13);
                        RT2 = (((((-(float)2.62627010965435E-04*X+(float)3.49187925428138E-02)*X -
                                  (float)3.09337618731880E+00)*X+(float)1.07037141010778E+02)*X -
                                (float)2.36659637247087E+03)*X +
                               ((-(float)2.91669113681020E+06/X +
                                 (float)1.41129505262758E+06)/X-(float)2.91532335433779E+05)/X +
                               (float)3.35202872835409E+04)*E + R23/(X-R23);
                        RT3 = ((((( (float)9.31856404738601E-05*X-(float)2.87029400759565E-02)*X -
                                  (float)7.83503697918455E-01)*X-(float)1.84338896480695E+01)*X +
                                (float)4.04996712650414E+02)*X +
                               (-(float)1.89829509315154E+05/X +
                                (float)5.11498390849158E+04)/X-(float)6.88145821789955E+03)*E
                                + R33/(X-R33);
                } else {
                        RT1 = ((((-(float)4.97561537069643E-04*X-(float)5.00929599665316E-02)*X +
                                 (float)1.31099142238996E+00)*X-(float)1.88336409225481E+01)*X -
                               (float)6.60344754467191E+02 /X+(float)1.64931462413877E+02)*E
                                + R13/(X-R13);
                        RT2 = ((((-(float)4.48218898474906E-03*X-(float)5.17373211334924E-01)*X +
                                 (float)1.13691058739678E+01)*X-(float)1.65426392885291E+02)*X -
                               (float)6.30909125686731E+03 /X+(float)1.52231757709236E+03)*E
                                + R23/(X-R23);
                        RT3 = ((((-(float)1.38368602394293E-02*X-(float)1.77293428863008E+00)*X +
                                 (float)1.73639054044562E+01)*X-(float)3.57615122086961E+02)*X -
                               (float)1.45734701095912E+04 /X+(float)2.69831813951849E+03)*E
                                + R33/(X-R33);
                }
                T1 = RT1/(RT1+(float)1.0E+00);
                T2 = RT2/(RT2+(float)1.0E+00);
                T3 = RT3/(RT3+(float)1.0E+00);
                A2 = F2-T1*F1;
                A1 = F1-T1*WW1;
                WW3 = (A2-T2*A1)/((T3-T2)*(T3-T1));
                WW2 = (T3*A1-A2)/((T3-T2)*(T2-T1));
                WW1 = WW1-WW2-WW3;
        } else if (X < (float)47) {
                WW1 = _sqrt(PIE4/X);
                E = exp(-X);
                RT1 = ((-(float)7.39058467995275E+00*X+(float)3.21318352526305E+02)*X -
                       (float)3.99433696473658E+03)*E + R13/(X-R13);
                RT2 = ((-(float)7.38726243906513E+01*X+(float)3.13569966333873E+03)*X -
                       (float)3.86862867311321E+04)*E + R23/(X-R23);
                RT3 = ((-(float)2.63750565461336E+02*X+(float)1.04412168692352E+04)*X -
                       (float)1.28094577915394E+05)*E + R33/(X-R33);
                WW3 = ((( (float)1.52258947224714E-01*X-(float)8.30661900042651E+00)*X +
                        (float)1.92977367967984E+02)*X-(float)1.67787926005344E+03)*E
                        + W33*WW1;
                WW2 = (( (float)6.15072615497811E+01*X-(float)2.91980647450269E+03)*X +
                       (float)3.80794303087338E+04)*E + W23*WW1;
                WW1 = WW1-WW2-WW3;
        } else {
                WW1 = _sqrt(PIE4/X);
                RT1 = R13/(X-R13);
                RT2 = R23/(X-R23);
                RT3 = R33/(X-R33);
                WW2 = W23*WW1;
                WW3 = W33*WW1;
                WW1 = WW1-WW2-WW3;
        }
        roots[0] = RT1;
        roots[1] = RT2;
        roots[2] = RT3;
        weights[0+g_size*2] = WW1;
        weights[1+g_size*2] = WW2;
        weights[2+g_size*2] = WW3;
}

static void rys_root4(dtype X, dtype *roots,
//Output<Vector<float>> weights, int g_size)
float* weights, int g_size)
{
        dtype R14, R24, W24, R34, W34, R44, W44;
        dtype RT1, RT2, RT3, RT4, WW1, WW2, WW3, WW4;
        dtype Y, E;

        R14 = (float)1.45303521503316E-01;
        R24 = (float)1.33909728812636E+00;
        W24 = (float)2.34479815323517E-01;
        R34 = (float)3.92696350135829E+00;
        W34 = (float)1.92704402415764E-02;
        R44 = (float)8.58863568901199E+00;
        W44 = (float)2.25229076750736E-04;

        if (X <= (float)3.0E-7) {
                RT1 = (float)3.48198973061471E-02 -(float)4.09645850660395E-03 *X;
                RT2 = (float)3.81567185080042E-01 -(float)4.48902570656719E-02 *X;
                RT3 = (float)1.73730726945891E+00 -(float)2.04389090547327E-01 *X;
                RT4 = (float)1.18463056481549E+01 -(float)1.39368301742312E+00 *X;
                WW1 = (float)3.62683783378362E-01 -(float)3.13844305713928E-02 *X;
                WW2 = (float)3.13706645877886E-01 -(float)8.98046242557724E-02 *X;
                WW3 = (float)2.22381034453372E-01 -(float)1.29314370958973E-01 *X;
                WW4 = (float)1.01228536290376E-01 -(float)8.28299075414321E-02 *X;
        } else if (X <= (float)1.0) {
                RT1 = ((((((-(float)1.95309614628539E-10*X+(float)5.19765728707592E-09)*X-
                           (float)1.01756452250573E-07 )*X+(float)1.72365935872131E-06 )*X-
                         (float)2.61203523522184E-05 )*X+(float)3.52921308769880E-04 )*X-
                       (float)4.09645850658433E-03 )*X+(float)3.48198973061469E-02;
                RT2 = (((((-(float)1.89554881382342E-08*X+(float)3.07583114342365E-07)*X+
                          (float)1.270981734393E-06)*X-(float)1.417298563884E-04)*X+
                        (float)3.226979163176E-03)*X-(float)4.48902570678178E-02 )*X+
                        (float)3.81567185080039E-01;
                RT3 = (((((( (float)1.77280535300416E-09*X+(float)3.36524958870615E-08)*X-
                           (float)2.58341529013893E-07 )*X-(float)1.13644895662320E-05 )*X-
                         (float)7.91549618884063E-05 )*X+(float)1.03825827346828E-02 )*X-
                       (float)2.04389090525137E-01 )*X+(float)1.73730726945889E+00;
                RT4 = (((((-(float)5.61188882415248E-08*X-(float)2.49480733072460E-07)*X+
                          (float)3.428685057114E-06)*X+(float)1.679007454539E-04)*X+
                        (float)4.722855585715E-02)*X-(float)1.39368301737828E+00 )*X+
                        (float)1.18463056481543E+01;
                WW1 = ((((((-(float)1.14649303201279E-08*X+(float)1.88015570196787E-07)*X-
                           (float)2.33305875372323E-06 )*X+(float)2.68880044371597E-05 )*X-
                         (float)2.94268428977387E-04 )*X+(float)3.06548909776613E-03 )*X-
                       (float)3.13844305680096E-02 )*X+(float)3.62683783378335E-01;
                WW2 = ((((((((-(float)4.11720483772634E-09*X+(float)6.54963481852134E-08)*X-
                             (float)7.20045285129626E-07 )*X+(float)6.93779646721723E-06 )*X-
                           (float)6.05367572016373E-05 )*X+(float)4.74241566251899E-04 )*X-
                         (float)3.26956188125316E-03 )*X+(float)1.91883866626681E-02 )*X-
                       (float)8.98046242565811E-02 )*X+(float)3.13706645877886E-01;
                WW3 = ((((((((-(float)3.41688436990215E-08*X+(float)5.07238960340773E-07)*X-
                             (float)5.01675628408220E-06 )*X+(float)4.20363420922845E-05 )*X-
                           (float)3.08040221166823E-04 )*X+(float)1.94431864731239E-03 )*X-
                         (float)1.02477820460278E-02 )*X+(float)4.28670143840073E-02 )*X-
                       (float)1.29314370962569E-01 )*X+(float)2.22381034453369E-01;
                WW4 = ((((((((( (float)4.99660550769508E-09*X-(float)7.94585963310120E-08)*X+
                              (float)8.359072409485E-07)*X-(float)7.422369210610E-06)*X+
                            (float)5.763374308160E-05)*X-(float)3.86645606718233E-04 )*X+
                          (float)2.18417516259781E-03 )*X-(float)9.99791027771119E-03 )*X+
                        (float)3.48791097377370E-02 )*X-(float)8.28299075413889E-02 )*X+
                        (float)1.01228536290376E-01;
        } else if (X <= (float)5) {
                Y = X-(float)3.0E+00;
                RT1 = (((((((((-(float)1.48570633747284E-15*Y-(float)1.33273068108777E-13)*Y+
                              (float)4.068543696670E-12)*Y-(float)9.163164161821E-11)*Y+
                            (float)2.046819017845E-09)*Y-(float)4.03076426299031E-08 )*Y+
                          (float)7.29407420660149E-07 )*Y-(float)1.23118059980833E-05 )*Y+
                        (float)1.88796581246938E-04 )*Y-(float)2.53262912046853E-03 )*Y+
                        (float)2.51198234505021E-02;
                RT2 = ((((((((( (float)1.35830583483312E-13*Y-(float)2.29772605964836E-12)*Y-
                              (float)3.821500128045E-12)*Y+(float)6.844424214735E-10)*Y-
                            (float)1.048063352259E-08)*Y+(float)1.50083186233363E-08 )*Y+
                          (float)3.48848942324454E-06 )*Y-(float)1.08694174399193E-04 )*Y+
                        (float)2.08048885251999E-03 )*Y-(float)2.91205805373793E-02 )*Y+
                        (float)2.72276489515713E-01;
                RT3 = ((((((((( (float)5.02799392850289E-13*Y+(float)1.07461812944084E-11)*Y-
                              (float)1.482277886411E-10)*Y-(float)2.153585661215E-09)*Y+
                            (float)3.654087802817E-08)*Y+(float)5.15929575830120E-07 )*Y-
                          (float)9.52388379435709E-06 )*Y-(float)2.16552440036426E-04 )*Y+
                        (float)9.03551469568320E-03 )*Y-(float)1.45505469175613E-01 )*Y+
                        (float)1.21449092319186E+00;
                RT4 = (((((((((-(float)1.08510370291979E-12*Y+(float)6.41492397277798E-11)*Y+
                              (float)7.542387436125E-10)*Y-(float)2.213111836647E-09)*Y-
                            (float)1.448228963549E-07)*Y-(float)1.95670833237101E-06 )*Y-
                          (float)1.07481314670844E-05 )*Y+(float)1.49335941252765E-04 )*Y+
                        (float)4.87791531990593E-02 )*Y-(float)1.10559909038653E+00 )*Y+
                        (float)8.09502028611780E+00;
                WW1 = ((((((((((-(float)4.65801912689961E-14*Y+(float)7.58669507106800E-13)*Y-
                               (float)1.186387548048E-11)*Y+(float)1.862334710665E-10)*Y-
                             (float)2.799399389539E-09)*Y+(float)4.148972684255E-08)*Y-
                           (float)5.933568079600E-07)*Y+(float)8.168349266115E-06)*Y-
                         (float)1.08989176177409E-04 )*Y+(float)1.41357961729531E-03 )*Y-
                       (float)1.87588361833659E-02 )*Y+(float)2.89898651436026E-01;
                WW2 = ((((((((((((-(float)1.46345073267549E-14*Y+(float)2.25644205432182E-13)*Y-
                                 (float)3.116258693847E-12)*Y+(float)4.321908756610E-11)*Y-
                               (float)5.673270062669E-10)*Y+(float)7.006295962960E-09)*Y-
                             (float)8.120186517000E-08)*Y+(float)8.775294645770E-07)*Y-
                           (float)8.77829235749024E-06 )*Y+(float)8.04372147732379E-05 )*Y-
                         (float)6.64149238804153E-04 )*Y+(float)4.81181506827225E-03 )*Y-
                       (float)2.88982669486183E-02 )*Y+(float)1.56247249979288E-01;
                WW3 = ((((((((((((( (float)9.06812118895365E-15*Y-(float)1.40541322766087E-13)*
                                  Y+(float)1.919270015269E-12)*Y-(float)2.605135739010E-11)*Y+
                                (float)3.299685839012E-10)*Y-(float)3.86354139348735E-09 )*Y+
                              (float)4.16265847927498E-08 )*Y-(float)4.09462835471470E-07 )*Y+
                            (float)3.64018881086111E-06 )*Y-(float)2.88665153269386E-05 )*Y+
                          (float)2.00515819789028E-04 )*Y-(float)1.18791896897934E-03 )*Y+
                        (float)5.75223633388589E-03 )*Y-(float)2.09400418772687E-02 )*Y+
                        (float)4.85368861938873E-02;
                WW4 = ((((((((((((((-(float)9.74835552342257E-16*Y+(float)1.57857099317175E-14)*
                                   Y-(float)2.249993780112E-13)*Y+(float)3.173422008953E-12)*Y-
                                 (float)4.161159459680E-11)*Y+(float)5.021343560166E-10)*Y-
                               (float)5.545047534808E-09)*Y+(float)5.554146993491E-08)*Y-
                             (float)4.99048696190133E-07 )*Y+(float)3.96650392371311E-06 )*Y-
                           (float)2.73816413291214E-05 )*Y+(float)1.60106988333186E-04 )*Y-
                         (float)7.64560567879592E-04 )*Y+(float)2.81330044426892E-03 )*Y-
                       (float)7.16227030134947E-03 )*Y+(float)9.66077262223353E-03;
        } else if (X <= (float)10.0) {
                Y = X-(float)7.5E+00;
                RT1 = ((((((((( (float)4.64217329776215E-15*Y-(float)6.27892383644164E-15)*Y+
                              (float)3.462236347446E-13)*Y-(float)2.927229355350E-11)*Y+
                            (float)5.090355371676E-10)*Y-(float)9.97272656345253E-09 )*Y+
                          (float)2.37835295639281E-07 )*Y-(float)4.60301761310921E-06 )*Y+
                        (float)8.42824204233222E-05 )*Y-(float)1.37983082233081E-03 )*Y+
                        (float)1.66630865869375E-02;
                RT2 = ((((((((( (float)2.93981127919047E-14*Y+(float)8.47635639065744E-13)*Y-
                              (float)1.446314544774E-11)*Y-(float)6.149155555753E-12)*Y+
                            (float)8.484275604612E-10)*Y-(float)6.10898827887652E-08 )*Y+
                          (float)2.39156093611106E-06 )*Y-(float)5.35837089462592E-05 )*Y+
                        (float)1.00967602595557E-03 )*Y-(float)1.57769317127372E-02 )*Y+
                        (float)1.74853819464285E-01;
                RT3 = (((((((((( (float)2.93523563363000E-14*Y-(float)6.40041776667020E-14)*Y-
                               (float)2.695740446312E-12)*Y+(float)1.027082960169E-10)*Y-
                             (float)5.822038656780E-10)*Y-(float)3.159991002539E-08)*Y+
                           (float)4.327249251331E-07)*Y+(float)4.856768455119E-06)*Y-
                         (float)2.54617989427762E-04 )*Y+(float)5.54843378106589E-03 )*Y-
                       (float)7.95013029486684E-02 )*Y+(float)7.20206142703162E-01;
                RT4 = (((((((((((-(float)1.62212382394553E-14*Y+(float)7.68943641360593E-13)*Y+
                                (float)5.764015756615E-12)*Y-(float)1.380635298784E-10)*Y-
                              (float)1.476849808675E-09)*Y+(float)1.84347052385605E-08 )*Y+
                            (float)3.34382940759405E-07 )*Y-(float)1.39428366421645E-06 )*Y-
                          (float)7.50249313713996E-05 )*Y-(float)6.26495899187507E-04 )*Y+
                        (float)4.69716410901162E-02 )*Y-(float)6.66871297428209E-01 )*Y+
                        (float)4.11207530217806E+00;
                WW1 = ((((((((((-(float)1.65995045235997E-15*Y+(float)6.91838935879598E-14)*Y-
                               (float)9.131223418888E-13)*Y+(float)1.403341829454E-11)*Y-
                             (float)3.672235069444E-10)*Y+(float)6.366962546990E-09)*Y-
                           (float)1.039220021671E-07)*Y+(float)1.959098751715E-06)*Y-
                         (float)3.33474893152939E-05 )*Y+(float)5.72164211151013E-04 )*Y-
                       (float)1.05583210553392E-02 )*Y+(float)2.26696066029591E-01;
                WW2 = ((((((((((((-(float)3.57248951192047E-16*Y+(float)6.25708409149331E-15)*Y-
                                 (float)9.657033089714E-14)*Y+(float)1.507864898748E-12)*Y-
                               (float)2.332522256110E-11)*Y+(float)3.428545616603E-10)*Y-
                             (float)4.698730937661E-09)*Y+(float)6.219977635130E-08)*Y-
                           (float)7.83008889613661E-07 )*Y+(float)9.08621687041567E-06 )*Y-
                         (float)9.86368311253873E-05 )*Y+(float)9.69632496710088E-04 )*Y-
                       (float)8.14594214284187E-03 )*Y+(float)8.50218447733457E-02;
                WW3 = ((((((((((((( (float)1.64742458534277E-16*Y-(float)2.68512265928410E-15)*
                                  Y+(float)3.788890667676E-14)*Y-(float)5.508918529823E-13)*Y+
                                (float)7.555896810069E-12)*Y-(float)9.69039768312637E-11 )*Y+
                              (float)1.16034263529672E-09 )*Y-(float)1.28771698573873E-08 )*Y+
                            (float)1.31949431805798E-07 )*Y-(float)1.23673915616005E-06 )*Y+
                          (float)1.04189803544936E-05 )*Y-(float)7.79566003744742E-05 )*Y+
                        (float)5.03162624754434E-04 )*Y-(float)2.55138844587555E-03 )*Y+
                        (float)1.13250730954014E-02;
                WW4 = ((((((((((((((-(float)1.55714130075679E-17*Y+(float)2.57193722698891E-16)*
                                   Y-(float)3.626606654097E-15)*Y+(float)5.234734676175E-14)*Y-
                                 (float)7.067105402134E-13)*Y+(float)8.793512664890E-12)*Y-
                               (float)1.006088923498E-10)*Y+(float)1.050565098393E-09)*Y-
                             (float)9.91517881772662E-09 )*Y+(float)8.35835975882941E-08 )*Y-
                           (float)6.19785782240693E-07 )*Y+(float)3.95841149373135E-06 )*Y-
                         (float)2.11366761402403E-05 )*Y+(float)9.00474771229507E-05 )*Y-
                       (float)2.78777909813289E-04 )*Y+(float)5.26543779837487E-04;
        } else if (X <= (float)15) {
                Y = X-(float)12.5E+00;
                RT1 = ((((((((((( (float)4.94869622744119E-17*Y+(float)8.03568805739160E-16)*Y-
                                (float)5.599125915431E-15)*Y-(float)1.378685560217E-13)*Y+
                              (float)7.006511663249E-13)*Y+(float)1.30391406991118E-11 )*Y+
                            (float)8.06987313467541E-11 )*Y-(float)5.20644072732933E-09 )*Y+
                          (float)7.72794187755457E-08 )*Y-(float)1.61512612564194E-06 )*Y+
                        (float)4.15083811185831E-05 )*Y-(float)7.87855975560199E-04 )*Y+
                        (float)1.14189319050009E-02;
                RT2 = ((((((((((( (float)4.89224285522336E-16*Y+(float)1.06390248099712E-14)*Y-
                                (float)5.446260182933E-14)*Y-(float)1.613630106295E-12)*Y+
                              (float)3.910179118937E-12)*Y+(float)1.90712434258806E-10 )*Y+
                            (float)8.78470199094761E-10 )*Y-(float)5.97332993206797E-08 )*Y+
                          (float)9.25750831481589E-07 )*Y-(float)2.02362185197088E-05 )*Y+
                        (float)4.92341968336776E-04 )*Y-(float)8.68438439874703E-03 )*Y+
                        (float)1.15825965127958E-01;
                RT3 = (((((((((( (float)6.12419396208408E-14*Y+(float)1.12328861406073E-13)*Y-
                               (float)9.051094103059E-12)*Y-(float)4.781797525341E-11)*Y+
                             (float)1.660828868694E-09)*Y+(float)4.499058798868E-10)*Y-
                           (float)2.519549641933E-07)*Y+(float)4.977444040180E-06)*Y-
                         (float)1.25858350034589E-04 )*Y+(float)2.70279176970044E-03 )*Y-
                       (float)3.99327850801083E-02 )*Y+(float)4.33467200855434E-01;
                RT4 = ((((((((((( (float)4.63414725924048E-14*Y-(float)4.72757262693062E-14)*Y-
                                (float)1.001926833832E-11)*Y+(float)6.074107718414E-11)*Y+
                              (float)1.576976911942E-09)*Y-(float)2.01186401974027E-08 )*Y-
                            (float)1.84530195217118E-07 )*Y+(float)5.02333087806827E-06 )*Y+
                          (float)9.66961790843006E-06 )*Y-(float)1.58522208889528E-03 )*Y+
                        (float)2.80539673938339E-02 )*Y-(float)2.78953904330072E-01 )*Y+
                        (float)1.82835655238235E+00;
                WW4 = ((((((((((((( (float)2.90401781000996E-18*Y-(float)4.63389683098251E-17)*
                                  Y+(float)6.274018198326E-16)*Y-(float)8.936002188168E-15)*Y+
                                (float)1.194719074934E-13)*Y-(float)1.45501321259466E-12 )*Y+
                              (float)1.64090830181013E-11 )*Y-(float)1.71987745310181E-10 )*Y+
                            (float)1.63738403295718E-09 )*Y-(float)1.39237504892842E-08 )*Y+
                          (float)1.06527318142151E-07 )*Y-(float)7.27634957230524E-07 )*Y+
                        (float)4.12159381310339E-06 )*Y-(float)1.74648169719173E-05 )*Y+
                        (float)8.50290130067818E-05;
                WW3 = ((((((((((((-(float)4.19569145459480E-17*Y+(float)5.94344180261644E-16)*Y-
                                 (float)1.148797566469E-14)*Y+(float)1.881303962576E-13)*Y-
                               (float)2.413554618391E-12)*Y+(float)3.372127423047E-11)*Y-
                             (float)4.933988617784E-10)*Y+(float)6.116545396281E-09)*Y-
                           (float)6.69965691739299E-08 )*Y+(float)7.52380085447161E-07 )*Y-
                         (float)8.08708393262321E-06 )*Y+(float)6.88603417296672E-05 )*Y-
                       (float)4.67067112993427E-04 )*Y+(float)5.42313365864597E-03;
                WW2 = ((((((((((-(float)6.22272689880615E-15*Y+(float)1.04126809657554E-13)*Y-
                               (float)6.842418230913E-13)*Y+(float)1.576841731919E-11)*Y-
                             (float)4.203948834175E-10)*Y+(float)6.287255934781E-09)*Y-
                           (float)8.307159819228E-08)*Y+(float)1.356478091922E-06)*Y-
                         (float)2.08065576105639E-05 )*Y+(float)2.52396730332340E-04 )*Y-
                       (float)2.94484050194539E-03 )*Y+(float)6.01396183129168E-02;
                WW1 = (((-(float)1.8784686463512E-01/X+(float)2.2991849164985E-01)/X -
                        (float)4.9893752514047E-01)/X-(float)2.1916512131607E-05)*exp(-X) +
                        _sqrt(PIE4/X)-WW4-WW3-WW2;
        } else if (X <= (float)20) {
                WW1 = _sqrt(PIE4/X);
                Y = X-(float)17.5E+00;
                RT1 = ((((((((((( (float)4.36701759531398E-17*Y-(float)1.12860600219889E-16)*Y-
                                (float)6.149849164164E-15)*Y+(float)5.820231579541E-14)*Y+
                              (float)4.396602872143E-13)*Y-(float)1.24330365320172E-11 )*Y+
                            (float)6.71083474044549E-11 )*Y+(float)2.43865205376067E-10 )*Y+
                          (float)1.67559587099969E-08 )*Y-(float)9.32738632357572E-07 )*Y+
                        (float)2.39030487004977E-05 )*Y-(float)4.68648206591515E-04 )*Y+
                        (float)8.34977776583956E-03;
                RT2 = ((((((((((( (float)4.98913142288158E-16*Y-(float)2.60732537093612E-16)*Y-
                                (float)7.775156445127E-14)*Y+(float)5.766105220086E-13)*Y+
                              (float)6.432696729600E-12)*Y-(float)1.39571683725792E-10 )*Y+
                            (float)5.95451479522191E-10 )*Y+(float)2.42471442836205E-09 )*Y+
                          (float)2.47485710143120E-07 )*Y-(float)1.14710398652091E-05 )*Y+
                        (float)2.71252453754519E-04 )*Y-(float)4.96812745851408E-03 )*Y+
                        (float)8.26020602026780E-02;
                RT3 = ((((((((((( (float)1.91498302509009E-15*Y+(float)1.48840394311115E-14)*Y-
                                (float)4.316925145767E-13)*Y+(float)1.186495793471E-12)*Y+
                              (float)4.615806713055E-11)*Y-(float)5.54336148667141E-10 )*Y+
                            (float)3.48789978951367E-10 )*Y-(float)2.79188977451042E-09 )*Y+
                          (float)2.09563208958551E-06 )*Y-(float)6.76512715080324E-05 )*Y+
                        (float)1.32129867629062E-03 )*Y-(float)2.05062147771513E-02 )*Y+
                        (float)2.88068671894324E-01;
                RT4 = (((((((((((-(float)5.43697691672942E-15*Y-(float)1.12483395714468E-13)*Y+
                                (float)2.826607936174E-12)*Y-(float)1.266734493280E-11)*Y-
                              (float)4.258722866437E-10)*Y+(float)9.45486578503261E-09 )*Y-
                            (float)5.86635622821309E-08 )*Y-(float)1.28835028104639E-06 )*Y+
                          (float)4.41413815691885E-05 )*Y-(float)7.61738385590776E-04 )*Y+
                        (float)9.66090902985550E-03 )*Y-(float)1.01410568057649E-01 )*Y+
                        (float)9.54714798156712E-01;
                WW4 = ((((((((((((-(float)7.56882223582704E-19*Y+(float)7.53541779268175E-18)*Y-
                                 (float)1.157318032236E-16)*Y+(float)2.411195002314E-15)*Y-
                               (float)3.601794386996E-14)*Y+(float)4.082150659615E-13)*Y-
                             (float)4.289542980767E-12)*Y+(float)5.086829642731E-11)*Y-
                           (float)6.35435561050807E-10 )*Y+(float)6.82309323251123E-09 )*Y-
                         (float)5.63374555753167E-08 )*Y+(float)3.57005361100431E-07 )*Y-
                       (float)2.40050045173721E-06 )*Y+(float)4.94171300536397E-05;
                WW3 = (((((((((((-(float)5.54451040921657E-17*Y+(float)2.68748367250999E-16)*Y+
                                (float)1.349020069254E-14)*Y-(float)2.507452792892E-13)*Y+
                              (float)1.944339743818E-12)*Y-(float)1.29816917658823E-11 )*Y+
                            (float)3.49977768819641E-10 )*Y-(float)8.67270669346398E-09 )*Y+
                          (float)1.31381116840118E-07 )*Y-(float)1.36790720600822E-06 )*Y+
                        (float)1.19210697673160E-05 )*Y-(float)1.42181943986587E-04 )*Y+
                        (float)4.12615396191829E-03;
                WW2 = (((((((((((-(float)1.86506057729700E-16*Y+(float)1.16661114435809E-15)*Y+
                                (float)2.563712856363E-14)*Y-(float)4.498350984631E-13)*Y+
                              (float)1.765194089338E-12)*Y+(float)9.04483676345625E-12 )*Y+
                            (float)4.98930345609785E-10 )*Y-(float)2.11964170928181E-08 )*Y+
                          (float)3.98295476005614E-07 )*Y-(float)5.49390160829409E-06 )*Y+
                        (float)7.74065155353262E-05 )*Y-(float)1.48201933009105E-03 )*Y+
                        (float)4.97836392625268E-02;
                WW1 = (( (float)1.9623264149430E-01/X-(float)4.9695241464490E-01)/X -
                       (float)6.0156581186481E-05)*exp(-X)+WW1-WW2-WW3-WW4;
        } else if (X <= (float)35) {
                WW1 = _sqrt(PIE4/X);
                E = exp(-X);
                RT1 = ((((((-(float)4.45711399441838E-05*X+(float)1.27267770241379E-03)*X -
                           (float)2.36954961381262E-01)*X+(float)1.54330657903756E+01)*X -
                         (float)5.22799159267808E+02)*X+(float)1.05951216669313E+04)*X +
                       (-(float)2.51177235556236E+06/X+(float)8.72975373557709E+05)/X -
                       (float)1.29194382386499E+05)*E + R14/(X-R14);
                RT2 = (((((-(float)7.85617372254488E-02*X+(float)6.35653573484868E+00)*X -
                          (float)3.38296938763990E+02)*X+(float)1.25120495802096E+04)*X -
                        (float)3.16847570511637E+05)*X +
                       ((-(float)1.02427466127427E+09/X +
                         (float)3.70104713293016E+08)/X-(float)5.87119005093822E+07)/X +
                       (float)5.38614211391604E+06)*E + R24/(X-R24);
                RT3 = (((((-(float)2.37900485051067E-01*X+(float)1.84122184400896E+01)*X -
                          (float)1.00200731304146E+03)*X+(float)3.75151841595736E+04)*X -
                        (float)9.50626663390130E+05)*X +
                       ((-(float)2.88139014651985E+09/X +
                         (float)1.06625915044526E+09)/X-(float)1.72465289687396E+08)/X +
                       (float)1.60419390230055E+07)*E + R34/(X-R34);
                RT4 = ((((((-(float)6.00691586407385E-04*X-(float)3.64479545338439E-01)*X +
                           (float)1.57496131755179E+01)*X-(float)6.54944248734901E+02)*X +
                         (float)1.70830039597097E+04)*X-(float)2.90517939780207E+05)*X +
                       ((float)3.49059698304732E+07/X-(float)1.64944522586065E+07)/X +
                       (float)2.96817940164703E+06)*E + R44/(X-R44);
                if (X <= (float)25)
                        WW4 = ((((((( (float)2.33766206773151E-07*X-
                                      (float)3.81542906607063E-05)*X +(float)3.51416601267000E-03)*X-
                                   (float)1.66538571864728E-01)*X +(float)4.80006136831847E+00)*X-
                                 (float)8.73165934223603E+01)*X +(float)9.77683627474638E+02)*X +
                               (float)1.66000945117640E+04/X -(float)6.14479071209961E+03)*E + W44*WW1;
                else
                        WW4 = (((((( (float)5.74245945342286E-06*X-
                                     (float)7.58735928102351E-05)*X +(float)2.35072857922892E-04)*X-
                                  (float)3.78812134013125E-03)*X +(float)3.09871652785805E-01)*X-
                                (float)7.11108633061306E+00)*X +(float)5.55297573149528E+01)*E + W44*WW1;
                WW3 = (((((( (float)2.36392855180768E-04*X-(float)9.16785337967013E-03)*X +
                           (float)4.62186525041313E-01)*X-(float)1.96943786006540E+01)*X +
                         (float)4.99169195295559E+02)*X-(float)6.21419845845090E+03)*X +
                       ((+(float)5.21445053212414E+07/X-(float)1.34113464389309E+07)/X +
                        (float)1.13673298305631E+06)/X-(float)2.81501182042707E+03)*E + W34*WW1;
                WW2 = (((((( (float)7.29841848989391E-04*X-(float)3.53899555749875E-02)*X +
                           (float)2.07797425718513E+00)*X-(float)1.00464709786287E+02)*X +
                         (float)3.15206108877819E+03)*X-(float)6.27054715090012E+04)*X +
                       (+(float)1.54721246264919E+07/X-(float)5.26074391316381E+06)/X +
                       (float)7.67135400969617E+05)*E + W24*WW1;
                WW1 = (( (float)1.9623264149430E-01/X-(float)4.9695241464490E-01)/X -
                       (float)6.0156581186481E-05)*E + WW1-WW2-WW3-WW4;
        } else if (X <= (float)53) {
                WW1 = _sqrt(PIE4/X);
                E = exp(-X)*pow(X,4);
                RT4 = ((-(float)2.19135070169653E-03*X-(float)1.19108256987623E-01)*X -
                       (float)7.50238795695573E-01)*E + R44/(X-R44);
                RT3 = ((-(float)9.65842534508637E-04*X-(float)4.49822013469279E-02)*X +
                       (float)6.08784033347757E-01)*E + R34/(X-R34);
                RT2 = ((-(float)3.62569791162153E-04*X-(float)9.09231717268466E-03)*X +
                       (float)1.84336760556262E-01)*E + R24/(X-R24);
                RT1 = ((-(float)4.07557525914600E-05*X-(float)6.88846864931685E-04)*X +
                       (float)1.74725309199384E-02)*E + R14/(X-R14);
                WW4 = (( (float)5.76631982000990E-06*X-(float)7.89187283804890E-05)*X +
                       (float)3.28297971853126E-04)*E + W44*WW1;
                WW3 = (( (float)2.08294969857230E-04*X-(float)3.77489954837361E-03)*X +
                       (float)2.09857151617436E-02)*E + W34*WW1;
                WW2 = (( (float)6.16374517326469E-04*X-(float)1.26711744680092E-02)*X +
                       (float)8.14504890732155E-02)*E + W24*WW1;
                WW1 = WW1-WW2-WW3-WW4;
        } else {
                WW1 = _sqrt(PIE4/X);
                RT1 = R14/(X-R14);
                RT2 = R24/(X-R24);
                RT3 = R34/(X-R34);
                RT4 = R44/(X-R44);
                WW4 = W44*WW1;
                WW3 = W34*WW1;
                WW2 = W24*WW1;
                WW1 = WW1-WW2-WW3-WW4;
        }
        roots[0] = RT1;
        roots[1] = RT2;
        roots[2] = RT3;
        roots[3] = RT4;
        weights[0+g_size*2] = WW1;
        weights[1+g_size*2] = WW2;
        weights[2+g_size*2] = WW3;
        weights[3+g_size*2] = WW4;
}

// this is called for 6-31G*
static void rys_root5(dtype X, dtype *roots,
//Output<Vector<float>> weights, int g_size)
float* weights, int g_size)
{
        dtype R15,R25,W25,R35,W35,R45,W45,R55,W55;
        dtype RT1, RT2, RT3, RT4, RT5, WW1, WW2, WW3, WW4, WW5;
        dtype Y, E, XXX;

        R15 = (float)1.17581320211778E-01;
        R25 = (float)1.07456201243690E+00;
        W25 = (float)2.70967405960535E-01;
        R35 = (float)3.08593744371754E+00;
        W35 = (float)3.82231610015404E-02;
        R45 = (float)6.41472973366203E+00;
        W45 = (float)1.51614186862443E-03;
        R55 = (float)1.18071894899717E+01;
        W55 = (float)8.62130526143657E-06;

        if (X < (float)3.e-7){
                RT1 = (float)2.26659266316985E-02 -(float)2.15865967920897E-03 *X;
                RT2 = (float)2.31271692140903E-01 -(float)2.20258754389745E-02 *X;
                RT3 = (float)8.57346024118836E-01 -(float)8.16520023025515E-02 *X;
                RT4 = (float)2.97353038120346E+00 -(float)2.83193369647137E-01 *X;
                RT5 = (float)1.84151859759051E+01 -(float)1.75382723579439E+00 *X;
                WW1 = (float)2.95524224714752E-01 -(float)1.96867576909777E-02 *X;
                WW2 = (float)2.69266719309995E-01 -(float)5.61737590184721E-02 *X;
                WW3 = (float)2.19086362515981E-01 -(float)9.71152726793658E-02 *X;
                WW4 = (float)1.49451349150580E-01 -(float)1.02979262193565E-01 *X;
                WW5 = (float)6.66713443086877E-02 -(float)5.73782817488315E-02 *X;
        } else if (X < (float)1.0){
                RT1 = ((((((-(float)4.46679165328413E-11*X+(float)1.21879111988031E-09)*X-
                           (float)2.62975022612104E-08 )*X+(float)5.15106194905897E-07 )*X-
                         (float)9.27933625824749E-06 )*X+(float)1.51794097682482E-04 )*X-
                       (float)2.15865967920301E-03 )*X+(float)2.26659266316985E-02;
                RT2 = (((((( (float)1.93117331714174E-10*X-(float)4.57267589660699E-09)*X+
                           (float)2.48339908218932E-08 )*X+(float)1.50716729438474E-06 )*X-
                         (float)6.07268757707381E-05 )*X+(float)1.37506939145643E-03 )*X-
                       (float)2.20258754419939E-02 )*X+(float)2.31271692140905E-01;
                RT3 = ((((( (float)4.84989776180094E-09*X+(float)1.31538893944284E-07)*X-
                          (float)2.766753852879E-06)*X-(float)7.651163510626E-05)*X+
                        (float)4.033058545972E-03)*X-(float)8.16520022916145E-02 )*X+
                        (float)8.57346024118779E-01;
                RT4 = ((((-(float)2.48581772214623E-07*X-(float)4.34482635782585E-06)*X-
                         (float)7.46018257987630E-07 )*X+(float)1.01210776517279E-02 )*X-
                       (float)2.83193369640005E-01 )*X+(float)2.97353038120345E+00;
                RT5 = (((((-(float)8.92432153868554E-09*X+(float)1.77288899268988E-08)*X+
                          (float)3.040754680666E-06)*X+(float)1.058229325071E-04)*X+
                        (float)4.596379534985E-02)*X-(float)1.75382723579114E+00 )*X+
                        (float)1.84151859759049E+01;
                WW1 = ((((((-(float)2.03822632771791E-09*X+(float)3.89110229133810E-08)*X-
                           (float)5.84914787904823E-07 )*X+(float)8.30316168666696E-06 )*X-
                         (float)1.13218402310546E-04 )*X+(float)1.49128888586790E-03 )*X-
                       (float)1.96867576904816E-02 )*X+(float)2.95524224714749E-01;
                WW2 = ((((((( (float)8.62848118397570E-09*X-(float)1.38975551148989E-07)*X+
                            (float)1.602894068228E-06)*X-(float)1.646364300836E-05)*X+
                          (float)1.538445806778E-04)*X-(float)1.28848868034502E-03 )*X+
                        (float)9.38866933338584E-03 )*X-(float)5.61737590178812E-02 )*X+
                        (float)2.69266719309991E-01;
                WW3 = ((((((((-(float)9.41953204205665E-09*X+(float)1.47452251067755E-07)*X-
                             (float)1.57456991199322E-06 )*X+(float)1.45098401798393E-05 )*X-
                           (float)1.18858834181513E-04 )*X+(float)8.53697675984210E-04 )*X-
                         (float)5.22877807397165E-03 )*X+(float)2.60854524809786E-02 )*X-
                       (float)9.71152726809059E-02 )*X+(float)2.19086362515979E-01;
                WW4 = ((((((((-(float)3.84961617022042E-08*X+(float)5.66595396544470E-07)*X-
                             (float)5.52351805403748E-06 )*X+(float)4.53160377546073E-05 )*X-
                           (float)3.22542784865557E-04 )*X+(float)1.95682017370967E-03 )*X-
                         (float)9.77232537679229E-03 )*X+(float)3.79455945268632E-02 )*X-
                       (float)1.02979262192227E-01 )*X+(float)1.49451349150573E-01;
                WW5 = ((((((((( (float)4.09594812521430E-09*X-(float)6.47097874264417E-08)*X+
                              (float)6.743541482689E-07)*X-(float)5.917993920224E-06)*X+
                            (float)4.531969237381E-05)*X-(float)2.99102856679638E-04 )*X+
                          (float)1.65695765202643E-03 )*X-(float)7.40671222520653E-03 )*X+
                        (float)2.50889946832192E-02 )*X-(float)5.73782817487958E-02 )*X+
                        (float)6.66713443086877E-02;
        } else if (X < (float)5.0) {
                Y = X-(float)3.0E+00;
                RT1 = ((((((((-(float)2.58163897135138E-14*Y+(float)8.14127461488273E-13)*Y-
                             (float)2.11414838976129E-11 )*Y+(float)5.09822003260014E-10 )*Y-
                           (float)1.16002134438663E-08 )*Y+(float)2.46810694414540E-07 )*Y-
                         (float)4.92556826124502E-06 )*Y+(float)9.02580687971053E-05 )*Y-
                       (float)1.45190025120726E-03 )*Y+(float)1.73416786387475E-02;
                RT2 = ((((((((( (float)1.04525287289788E-14*Y+(float)5.44611782010773E-14)*Y-
                              (float)4.831059411392E-12)*Y+(float)1.136643908832E-10)*Y-
                            (float)1.104373076913E-09)*Y-(float)2.35346740649916E-08 )*Y+
                          (float)1.43772622028764E-06 )*Y-(float)4.23405023015273E-05 )*Y+
                        (float)9.12034574793379E-04 )*Y-(float)1.52479441718739E-02 )*Y+
                        (float)1.76055265928744E-01;
                RT3 = (((((((((-(float)6.89693150857911E-14*Y+(float)5.92064260918861E-13)*Y+
                              (float)1.847170956043E-11)*Y-(float)3.390752744265E-10)*Y-
                            (float)2.995532064116E-09)*Y+(float)1.57456141058535E-07 )*Y-
                          (float)3.95859409711346E-07 )*Y-(float)9.58924580919747E-05 )*Y+
                        (float)3.23551502557785E-03 )*Y-(float)5.97587007636479E-02 )*Y+
                        (float)6.46432853383057E-01;
                RT4 = ((((((((-(float)3.61293809667763E-12*Y-(float)2.70803518291085E-11)*Y+
                             (float)8.83758848468769E-10 )*Y+(float)1.59166632851267E-08 )*Y-
                           (float)1.32581997983422E-07 )*Y-(float)7.60223407443995E-06 )*Y-
                         (float)7.41019244900952E-05 )*Y+(float)9.81432631743423E-03 )*Y-
                       (float)2.23055570487771E-01 )*Y+(float)2.21460798080643E+00;
                RT5 = ((((((((( (float)7.12332088345321E-13*Y+(float)3.16578501501894E-12)*Y-
                              (float)8.776668218053E-11)*Y-(float)2.342817613343E-09)*Y-
                            (float)3.496962018025E-08)*Y-(float)3.03172870136802E-07 )*Y+
                          (float)1.50511293969805E-06 )*Y+(float)1.37704919387696E-04 )*Y+
                        (float)4.70723869619745E-02 )*Y-(float)1.47486623003693E+00 )*Y+
                        (float)1.35704792175847E+01;
                WW1 = ((((((((( (float)1.04348658616398E-13*Y-(float)1.94147461891055E-12)*Y+
                              (float)3.485512360993E-11)*Y-(float)6.277497362235E-10)*Y+
                            (float)1.100758247388E-08)*Y-(float)1.88329804969573E-07 )*Y+
                          (float)3.12338120839468E-06 )*Y-(float)5.04404167403568E-05 )*Y+
                        (float)8.00338056610995E-04 )*Y-(float)1.30892406559521E-02 )*Y+
                        (float)2.47383140241103E-01;
                WW2 = ((((((((((( (float)3.23496149760478E-14*Y-(float)5.24314473469311E-13)*Y+
                                (float)7.743219385056E-12)*Y-(float)1.146022750992E-10)*Y+
                              (float)1.615238462197E-09)*Y-(float)2.15479017572233E-08 )*Y+
                            (float)2.70933462557631E-07 )*Y-(float)3.18750295288531E-06 )*Y+
                          (float)3.47425221210099E-05 )*Y-(float)3.45558237388223E-04 )*Y+
                        (float)3.05779768191621E-03 )*Y-(float)2.29118251223003E-02 )*Y+
                        (float)1.59834227924213E-01;
                WW3 = ((((((((((((-(float)3.42790561802876E-14*Y+(float)5.26475736681542E-13)*Y-
                                 (float)7.184330797139E-12)*Y+(float)9.763932908544E-11)*Y-
                               (float)1.244014559219E-09)*Y+(float)1.472744068942E-08)*Y-
                             (float)1.611749975234E-07)*Y+(float)1.616487851917E-06)*Y-
                           (float)1.46852359124154E-05 )*Y+(float)1.18900349101069E-04 )*Y-
                         (float)8.37562373221756E-04 )*Y+(float)4.93752683045845E-03 )*Y-
                       (float)2.25514728915673E-02 )*Y+(float)6.95211812453929E-02;
                WW4 = ((((((((((((( (float)1.04072340345039E-14*Y-(float)1.60808044529211E-13)*
                                  Y+(float)2.183534866798E-12)*Y-(float)2.939403008391E-11)*Y+
                                (float)3.679254029085E-10)*Y-(float)4.23775673047899E-09 )*Y+
                              (float)4.46559231067006E-08 )*Y-(float)4.26488836563267E-07 )*Y+
                            (float)3.64721335274973E-06 )*Y-(float)2.74868382777722E-05 )*Y+
                          (float)1.78586118867488E-04 )*Y-(float)9.68428981886534E-04 )*Y+
                        (float)4.16002324339929E-03 )*Y-(float)1.28290192663141E-02 )*Y+
                        (float)2.22353727685016E-02;
                WW5 = ((((((((((((((-(float)8.16770412525963E-16*Y+(float)1.31376515047977E-14)*
                                   Y-(float)1.856950818865E-13)*Y+(float)2.596836515749E-12)*Y-
                                 (float)3.372639523006E-11)*Y+(float)4.025371849467E-10)*Y-
                               (float)4.389453269417E-09)*Y+(float)4.332753856271E-08)*Y-
                             (float)3.82673275931962E-07 )*Y+(float)2.98006900751543E-06 )*Y-
                           (float)2.00718990300052E-05 )*Y+(float)1.13876001386361E-04 )*Y-
                         (float)5.23627942443563E-04 )*Y+(float)1.83524565118203E-03 )*Y-
                       (float)4.37785737450783E-03 )*Y+(float)5.36963805223095E-03;
        } else if (X < (float)10.0) {
                Y = X-(float)7.5E+00;
                RT1 = ((((((((-(float)1.13825201010775E-14*Y+(float)1.89737681670375E-13)*Y-
                             (float)4.81561201185876E-12 )*Y+(float)1.56666512163407E-10 )*Y-
                           (float)3.73782213255083E-09 )*Y+(float)9.15858355075147E-08 )*Y-
                         (float)2.13775073585629E-06 )*Y+(float)4.56547356365536E-05 )*Y-
                       (float)8.68003909323740E-04 )*Y+(float)1.22703754069176E-02;
                RT2 = (((((((((-(float)3.67160504428358E-15*Y+(float)1.27876280158297E-14)*Y-
                              (float)1.296476623788E-12)*Y+(float)1.477175434354E-11)*Y+
                            (float)5.464102147892E-10)*Y-(float)2.42538340602723E-08 )*Y+
                          (float)8.20460740637617E-07 )*Y-(float)2.20379304598661E-05 )*Y+
                        (float)4.90295372978785E-04 )*Y-(float)9.14294111576119E-03 )*Y+
                        (float)1.22590403403690E-01;
                RT3 = ((((((((( (float)1.39017367502123E-14*Y-(float)6.96391385426890E-13)*Y+
                              (float)1.176946020731E-12)*Y+(float)1.725627235645E-10)*Y-
                            (float)3.686383856300E-09)*Y+(float)2.87495324207095E-08 )*Y+
                          (float)1.71307311000282E-06 )*Y-(float)7.94273603184629E-05 )*Y+
                        (float)2.00938064965897E-03 )*Y-(float)3.63329491677178E-02 )*Y+
                        (float)4.34393683888443E-01;
                RT4 = ((((((((((-(float)1.27815158195209E-14*Y+(float)1.99910415869821E-14)*Y+
                               (float)3.753542914426E-12)*Y-(float)2.708018219579E-11)*Y-
                             (float)1.190574776587E-09)*Y+(float)1.106696436509E-08)*Y+
                           (float)3.954955671326E-07)*Y-(float)4.398596059588E-06)*Y-
                         (float)2.01087998907735E-04 )*Y+(float)7.89092425542937E-03 )*Y-
                       (float)1.42056749162695E-01 )*Y+(float)1.39964149420683E+00;
                RT5 = ((((((((((-(float)1.19442341030461E-13*Y-(float)2.34074833275956E-12)*Y+
                               (float)6.861649627426E-12)*Y+(float)6.082671496226E-10)*Y+
                             (float)5.381160105420E-09)*Y-(float)6.253297138700E-08)*Y-
                           (float)2.135966835050E-06)*Y-(float)2.373394341886E-05)*Y+
                         (float)2.88711171412814E-06 )*Y+(float)4.85221195290753E-02 )*Y-
                       (float)1.04346091985269E+00 )*Y+(float)7.89901551676692E+00;
                WW1 = ((((((((( (float)7.95526040108997E-15*Y-(float)2.48593096128045E-13)*Y+
                              (float)4.761246208720E-12)*Y-(float)9.535763686605E-11)*Y+
                            (float)2.225273630974E-09)*Y-(float)4.49796778054865E-08 )*Y+
                          (float)9.17812870287386E-07 )*Y-(float)1.86764236490502E-05 )*Y+
                        (float)3.76807779068053E-04 )*Y-(float)8.10456360143408E-03 )*Y+
                        (float)2.01097936411496E-01;
                WW2 = ((((((((((( (float)1.25678686624734E-15*Y-(float)2.34266248891173E-14)*Y+
                                (float)3.973252415832E-13)*Y-(float)6.830539401049E-12)*Y+
                              (float)1.140771033372E-10)*Y-(float)1.82546185762009E-09 )*Y+
                            (float)2.77209637550134E-08 )*Y-(float)4.01726946190383E-07 )*Y+
                          (float)5.48227244014763E-06 )*Y-(float)6.95676245982121E-05 )*Y+
                        (float)8.05193921815776E-04 )*Y-(float)8.15528438784469E-03 )*Y+
                        (float)9.71769901268114E-02;
                WW3 = ((((((((((((-(float)8.20929494859896E-16*Y+(float)1.37356038393016E-14)*Y-
                                 (float)2.022863065220E-13)*Y+(float)3.058055403795E-12)*Y-
                               (float)4.387890955243E-11)*Y+(float)5.923946274445E-10)*Y-
                             (float)7.503659964159E-09)*Y+(float)8.851599803902E-08)*Y-
                           (float)9.65561998415038E-07 )*Y+(float)9.60884622778092E-06 )*Y-
                         (float)8.56551787594404E-05 )*Y+(float)6.66057194311179E-04 )*Y-
                       (float)4.17753183902198E-03 )*Y+(float)2.25443826852447E-02;
                WW4 = ((((((((((((((-(float)1.08764612488790E-17*Y+(float)1.85299909689937E-16)*
                                   Y-(float)2.730195628655E-15)*Y+(float)4.127368817265E-14)*Y-
                                 (float)5.881379088074E-13)*Y+(float)7.805245193391E-12)*Y-
                               (float)9.632707991704E-11)*Y+(float)1.099047050624E-09)*Y-
                             (float)1.15042731790748E-08 )*Y+(float)1.09415155268932E-07 )*Y-
                           (float)9.33687124875935E-07 )*Y+(float)7.02338477986218E-06 )*Y-
                         (float)4.53759748787756E-05 )*Y+(float)2.41722511389146E-04 )*Y-
                       (float)9.75935943447037E-04 )*Y+(float)2.57520532789644E-03;
                WW5 = ((((((((((((((( (float)7.28996979748849E-19*Y-(float)1.26518146195173E-17)
                                    *Y+(float)1.886145834486E-16)*Y-(float)2.876728287383E-15)*Y+
                                  (float)4.114588668138E-14)*Y-(float)5.44436631413933E-13 )*Y+
                                (float)6.64976446790959E-12 )*Y-(float)7.44560069974940E-11 )*Y+
                              (float)7.57553198166848E-10 )*Y-(float)6.92956101109829E-09 )*Y+
                            (float)5.62222859033624E-08 )*Y-(float)3.97500114084351E-07 )*Y+
                          (float)2.39039126138140E-06 )*Y-(float)1.18023950002105E-05 )*Y+
                        (float)4.52254031046244E-05 )*Y-(float)1.21113782150370E-04 )*Y+
                        (float)1.75013126731224E-04;
        } else if (X < (float)15.0) {
                Y = X-(float)12.5E+00;
                RT1 = ((((((((((-(float)4.16387977337393E-17*Y+(float)7.20872997373860E-16)*Y+
                               (float)1.395993802064E-14)*Y+(float)3.660484641252E-14)*Y-
                             (float)4.154857548139E-12)*Y+(float)2.301379846544E-11)*Y-
                           (float)1.033307012866E-09)*Y+(float)3.997777641049E-08)*Y-
                         (float)9.35118186333939E-07 )*Y+(float)2.38589932752937E-05 )*Y-
                       (float)5.35185183652937E-04 )*Y+(float)8.85218988709735E-03;
                RT2 = ((((((((((-(float)4.56279214732217E-16*Y+(float)6.24941647247927E-15)*Y+
                               (float)1.737896339191E-13)*Y+(float)8.964205979517E-14)*Y-
                             (float)3.538906780633E-11)*Y+(float)9.561341254948E-11)*Y-
                           (float)9.772831891310E-09)*Y+(float)4.240340194620E-07)*Y-
                         (float)1.02384302866534E-05 )*Y+(float)2.57987709704822E-04 )*Y-
                       (float)5.54735977651677E-03 )*Y+(float)8.68245143991948E-02;
                RT3 = ((((((((((-(float)2.52879337929239E-15*Y+2.13925810087833E-14)*Y+
                               (float)7.884307667104E-13)*Y-9.023398159510E-13)*Y-
                             (float)5.814101544957E-11)*Y-1.333480437968E-09)*Y-
                           (float)2.217064940373E-08)*Y+1.643290788086E-06)*Y-
                         (float)4.39602147345028E-05 )*Y+1.08648982748911E-03 )*Y-
                       (float)2.13014521653498E-02 )*Y+2.94150684465425E-01;
                RT4 = ((((((((((-(float)6.42391438038888E-15*Y+(float)5.37848223438815E-15)*Y+
                               (float)8.960828117859E-13)*Y+(float)5.214153461337E-11)*Y-
                             (float)1.106601744067E-10)*Y-(float)2.007890743962E-08)*Y+
                           (float)1.543764346501E-07)*Y+(float)4.520749076914E-06)*Y-
                         (float)1.88893338587047E-04 )*Y+(float)4.73264487389288E-03 )*Y-
                       (float)7.91197893350253E-02 )*Y+(float)8.60057928514554E-01;
                RT5 = (((((((((((-(float)2.24366166957225E-14*Y+(float)4.87224967526081E-14)*Y+
                                (float)5.587369053655E-12)*Y-(float)3.045253104617E-12)*Y-
                              (float)1.223983883080E-09)*Y-(float)2.05603889396319E-09 )*Y+
                            (float)2.58604071603561E-07 )*Y+(float)1.34240904266268E-06 )*Y-
                          (float)5.72877569731162E-05 )*Y-(float)9.56275105032191E-04 )*Y+
                        (float)4.23367010370921E-02 )*Y-(float)5.76800927133412E-01 )*Y+
                        (float)3.87328263873381E+00;
                WW1 = ((((((((( (float)8.98007931950169E-15*Y+(float)7.25673623859497E-14)*Y+
                              (float)5.851494250405E-14)*Y-(float)4.234204823846E-11)*Y+
                            (float)3.911507312679E-10)*Y-(float)9.65094802088511E-09 )*Y+
                          (float)3.42197444235714E-07 )*Y-(float)7.51821178144509E-06 )*Y+
                        (float)1.94218051498662E-04 )*Y-(float)5.38533819142287E-03 )*Y+
                        (float)1.68122596736809E-01;
                WW2 = ((((((((((-(float)1.05490525395105E-15*Y+(float)1.96855386549388E-14)*Y-
                               (float)5.500330153548E-13)*Y+(float)1.003849567976E-11)*Y-
                             (float)1.720997242621E-10)*Y+(float)3.533277061402E-09)*Y-
                           (float)6.389171736029E-08)*Y+(float)1.046236652393E-06)*Y-
                         (float)1.73148206795827E-05 )*Y+(float)2.57820531617185E-04 )*Y-
                       (float)3.46188265338350E-03 )*Y+(float)7.03302497508176E-02;
                WW3 = ((((((((((( (float)3.60020423754545E-16*Y-(float)6.24245825017148E-15)*Y+
                                (float)9.945311467434E-14)*Y-(float)1.749051512721E-12)*Y+
                              (float)2.768503957853E-11)*Y-(float)4.08688551136506E-10 )*Y+
                            (float)6.04189063303610E-09 )*Y-(float)8.23540111024147E-08 )*Y+
                          (float)1.01503783870262E-06 )*Y-(float)1.20490761741576E-05 )*Y+
                        (float)1.26928442448148E-04 )*Y-(float)1.05539461930597E-03 )*Y+
                       (float) 1.15543698537013E-02;
                WW4 = ((((((((((((( (float)2.51163533058925E-18*Y-(float)4.31723745510697E-17)*
                                  Y+(float)6.557620865832E-16)*Y-(float)1.016528519495E-14)*Y+
                                (float)1.491302084832E-13)*Y-(float)2.06638666222265E-12 )*Y+
                              (float)2.67958697789258E-11 )*Y-(float)3.23322654638336E-10 )*Y+
                            (float)3.63722952167779E-09 )*Y-(float)3.75484943783021E-08 )*Y+
                          (float)3.49164261987184E-07 )*Y-(float)2.92658670674908E-06 )*Y+
                        (float)2.12937256719543E-05 )*Y-(float)1.19434130620929E-04 )*Y+
                        (float)6.45524336158384E-04;
                WW5 = ((((((((((((((-(float)1.29043630202811E-19*Y+(float)2.16234952241296E-18)*
                                   Y-(float)3.107631557965E-17)*Y+(float)4.570804313173E-16)*Y-
                                 (float)6.301348858104E-15)*Y+(float)8.031304476153E-14)*Y-
                               (float)9.446196472547E-13)*Y+(float)1.018245804339E-11)*Y-
                             (float)9.96995451348129E-11 )*Y+(float)8.77489010276305E-10 )*Y-
                           (float)6.84655877575364E-09 )*Y+(float)4.64460857084983E-08 )*Y-
                         (float)2.66924538268397E-07 )*Y+(float)1.24621276265907E-06 )*Y-
                       (float)4.30868944351523E-06 )*Y+(float)9.94307982432868E-06;
        } else if (X < (float)20.0){
                Y = X-(float)17.5E+00;
                RT1 = (((((((((( (float)1.91875764545740E-16*Y+(float)7.8357401095707E-16)*Y-
                               (float)3.260875931644E-14)*Y-(float)1.186752035569E-13)*Y+
                             (float)4.275180095653E-12)*Y+(float)3.357056136731E-11)*Y-
                           (float)1.123776903884E-09)*Y+(float)1.231203269887E-08)*Y-
                         (float)3.99851421361031E-07 )*Y+(float)1.45418822817771E-05 )*Y-
                       (float)3.49912254976317E-04 )*Y+(float)6.67768703938812E-03;
                RT2 = (((((((((( (float)2.02778478673555E-15*Y+(float)1.01640716785099E-14)*Y-
                               (float)3.385363492036E-13)*Y-(float)1.615655871159E-12)*Y+
                             (float)4.527419140333E-11)*Y+(float)3.853670706486E-10)*Y-
                           (float)1.184607130107E-08)*Y+(float)1.347873288827E-07)*Y-
                         (float)4.47788241748377E-06 )*Y+(float)1.54942754358273E-04 )*Y-
                       (float)3.55524254280266E-03 )*Y+(float)6.44912219301603E-02;
                RT3 = (((((((((( (float)7.79850771456444E-15*Y+(float)6.00464406395001E-14)*Y-
                               (float)1.249779730869E-12)*Y-(float)1.020720636353E-11)*Y+
                             (float)1.814709816693E-10)*Y+(float)1.766397336977E-09)*Y-
                           (float)4.603559449010E-08)*Y+(float)5.863956443581E-07)*Y-
                         (float)2.03797212506691E-05 )*Y+(float)6.31405161185185E-04 )*Y-
                       (float)1.30102750145071E-02 )*Y+(float)2.10244289044705E-01;
                RT4 = (((((((((((-(float)2.92397030777912E-15*Y+(float)1.94152129078465E-14)*Y+
                                (float)4.859447665850E-13)*Y-(float)3.217227223463E-12)*Y-
                              (float)7.484522135512E-11)*Y+(float)7.19101516047753E-10 )*Y+
                            (float)6.88409355245582E-09 )*Y-(float)1.44374545515769E-07 )*Y+
                          (float)2.74941013315834E-06 )*Y-(float)1.02790452049013E-04 )*Y+
                        (float)2.59924221372643E-03 )*Y-(float)4.35712368303551E-02 )*Y+
                        (float)5.62170709585029E-01;
                RT5 = ((((((((((( (float)1.17976126840060E-14*Y+(float)1.24156229350669E-13)*Y-
                                (float)3.892741622280E-12)*Y-(float)7.755793199043E-12)*Y+
                              (float)9.492190032313E-10)*Y-(float)4.98680128123353E-09 )*Y-
                            (float)1.81502268782664E-07 )*Y+(float)2.69463269394888E-06 )*Y+
                          (float)2.50032154421640E-05 )*Y-(float)1.33684303917681E-03 )*Y+
                        (float)2.29121951862538E-02 )*Y-(float)2.45653725061323E-01 )*Y+
                        (float)1.89999883453047E+00;
                WW1 = (((((((((( (float)1.74841995087592E-15*Y-(float)6.95671892641256E-16)*Y-
                               (float)3.000659497257E-13)*Y+(float)2.021279817961E-13)*Y+
                             (float)3.853596935400E-11)*Y+(float)1.461418533652E-10)*Y-
                           (float)1.014517563435E-08)*Y+(float)1.132736008979E-07)*Y-
                         (float)2.86605475073259E-06 )*Y+(float)1.21958354908768E-04 )*Y-
                       (float)3.86293751153466E-03 )*Y+(float)1.45298342081522E-01;
                WW2 = ((((((((((-(float)1.11199320525573E-15*Y+(float)1.85007587796671E-15)*Y+
                               (float)1.220613939709E-13)*Y+(float)1.275068098526E-12)*Y-
                             (float)5.341838883262E-11)*Y+(float)6.161037256669E-10)*Y-
                           (float)1.009147879750E-08)*Y+(float)2.907862965346E-07)*Y-
                         (float)6.12300038720919E-06 )*Y+(float)1.00104454489518E-04 )*Y-
                       (float)1.80677298502757E-03 )*Y+(float)5.78009914536630E-02;
                WW3 = ((((((((((-(float)9.49816486853687E-16*Y+(float)6.67922080354234E-15)*Y+
                               (float)2.606163540537E-15)*Y+(float)1.983799950150E-12)*Y-
                             (float)5.400548574357E-11)*Y+(float)6.638043374114E-10)*Y-
                           (float)8.799518866802E-09)*Y+(float)1.791418482685E-07)*Y-
                         (float)2.96075397351101E-06 )*Y+(float)3.38028206156144E-05 )*Y-
                       (float)3.58426847857878E-04 )*Y+(float)8.39213709428516E-03;
                WW4 = ((((((((((( (float)1.33829971060180E-17*Y-(float)3.44841877844140E-16)*Y+
                                (float)4.745009557656E-15)*Y-(float)6.033814209875E-14)*Y+
                              (float)1.049256040808E-12)*Y-(float)1.70859789556117E-11 )*Y+
                            (float)2.15219425727959E-10 )*Y-(float)2.52746574206884E-09 )*Y+
                          (float)3.27761714422960E-08 )*Y-(float)3.90387662925193E-07 )*Y+
                        (float)3.46340204593870E-06 )*Y-(float)2.43236345136782E-05 )*Y+
                        (float)3.54846978585226E-04;
                WW5 = ((((((((((((( (float)2.69412277020887E-20*Y-(float)4.24837886165685E-19)*
                                  Y+(float)6.030500065438E-18)*Y-(float)9.069722758289E-17)*Y+
                                (float)1.246599177672E-15)*Y-(float)1.56872999797549E-14 )*Y+
                              (float)1.87305099552692E-13 )*Y-(float)2.09498886675861E-12 )*Y+
                            (float)2.11630022068394E-11 )*Y-(float)1.92566242323525E-10 )*Y+
                          (float)1.62012436344069E-09 )*Y-(float)1.23621614171556E-08 )*Y+
                        (float)7.72165684563049E-08 )*Y-(float)3.59858901591047E-07 )*Y+
                        (float)2.43682618601000E-06;
        } else if (X < (float)25.0) {
                Y = X-(float)22.5E+00;
                RT1 = (((((((((-(float)1.13927848238726E-15*Y+(float)7.39404133595713E-15)*Y+
                              (float)1.445982921243E-13)*Y-(float)2.676703245252E-12)*Y+
                            (float)5.823521627177E-12)*Y+(float)2.17264723874381E-10 )*Y+
                          (float)3.56242145897468E-09 )*Y-(float)3.03763737404491E-07 )*Y+
                        (float)9.46859114120901E-06 )*Y-(float)2.30896753853196E-04 )*Y+
                        (float)5.24663913001114E-03;
                RT2 = (((((((((( (float)2.89872355524581E-16*Y-(float)1.22296292045864E-14)*Y+
                               (float)6.184065097200E-14)*Y+(float)1.649846591230E-12)*Y-
                             (float)2.729713905266E-11)*Y+(float)3.709913790650E-11)*Y+
                           (float)2.216486288382E-09)*Y+(float)4.616160236414E-08)*Y-
                         (float)3.32380270861364E-06 )*Y+(float)9.84635072633776E-05 )*Y-
                       (float)2.30092118015697E-03 )*Y+(float)5.00845183695073E-02;
                RT3 = (((((((((( (float)1.97068646590923E-15*Y-(float)4.89419270626800E-14)*Y+
                               (float)1.136466605916E-13)*Y+(float)7.546203883874E-12)*Y-
                             (float)9.635646767455E-11)*Y-(float)8.295965491209E-11)*Y+
                           (float)7.534109114453E-09)*Y+(float)2.699970652707E-07)*Y-
                         (float)1.42982334217081E-05 )*Y+(float)3.78290946669264E-04 )*Y-
                       (float)8.03133015084373E-03 )*Y+(float)1.58689469640791E-01;
                RT4 = (((((((((( (float)1.33642069941389E-14*Y-(float)1.55850612605745E-13)*Y-
                               (float)7.522712577474E-13)*Y+(float)3.209520801187E-11)*Y-
                             (float)2.075594313618E-10)*Y-(float)2.070575894402E-09)*Y+
                           (float)7.323046997451E-09)*Y+(float)1.851491550417E-06)*Y-
                         (float)6.37524802411383E-05 )*Y+(float)1.36795464918785E-03 )*Y-
                       (float)2.42051126993146E-02 )*Y+(float)3.97847167557815E-01;
                RT5 = ((((((((((-(float)6.07053986130526E-14*Y+(float)1.04447493138843E-12)*Y-
                               (float)4.286617818951E-13)*Y-(float)2.632066100073E-10)*Y+
                             (float)4.804518986559E-09)*Y-(float)1.835675889421E-08)*Y-
                           (float)1.068175391334E-06)*Y+(float)3.292234974141E-05)*Y-
                         (float)5.94805357558251E-04 )*Y+(float)8.29382168612791E-03 )*Y-
                       (float)9.93122509049447E-02 )*Y+(float)1.09857804755042E+00;
                WW1 = (((((((((-(float)9.10338640266542E-15*Y+(float)1.00438927627833E-13)*Y+
                              (float)7.817349237071E-13)*Y-(float)2.547619474232E-11)*Y+
                            (float)1.479321506529E-10)*Y+(float)1.52314028857627E-09 )*Y+
                          (float)9.20072040917242E-09 )*Y-(float)2.19427111221848E-06 )*Y+
                        (float)8.65797782880311E-05 )*Y-(float)2.82718629312875E-03 )*Y+
                        (float)1.28718310443295E-01;
                WW2 = ((((((((( (float)5.52380927618760E-15*Y-(float)6.43424400204124E-14)*Y-
                              (float)2.358734508092E-13)*Y+(float)8.261326648131E-12)*Y+
                            (float)9.229645304956E-11)*Y-(float)5.68108973828949E-09 )*Y+
                          (float)1.22477891136278E-07 )*Y-(float)2.11919643127927E-06 )*Y+
                        (float)4.23605032368922E-05 )*Y-(float)1.14423444576221E-03 )*Y+
                        (float)5.06607252890186E-02;
                WW3 = ((((((((( (float)3.99457454087556E-15*Y-(float)5.11826702824182E-14)*Y-
                              (float)4.157593182747E-14)*Y+(float)4.214670817758E-12)*Y+
                            (float)6.705582751532E-11)*Y-(float)3.36086411698418E-09 )*Y+
                          (float)6.07453633298986E-08 )*Y-(float)7.40736211041247E-07 )*Y+
                        (float)8.84176371665149E-06 )*Y-(float)1.72559275066834E-04 )*Y+
                        (float)7.16639814253567E-03;
                WW4 = (((((((((((-(float)2.14649508112234E-18*Y-(float)2.45525846412281E-18)*Y+
                                (float)6.126212599772E-16)*Y-(float)8.526651626939E-15)*Y+
                              (float)4.826636065733E-14)*Y-(float)3.39554163649740E-13 )*Y+
                            (float)1.67070784862985E-11 )*Y-(float)4.42671979311163E-10 )*Y+
                          (float)6.77368055908400E-09 )*Y-(float)7.03520999708859E-08 )*Y+
                        (float)6.04993294708874E-07 )*Y-(float)7.80555094280483E-06 )*Y+
                        (float)2.85954806605017E-04;
                WW5 = ((((((((((((-(float)5.63938733073804E-21*Y+(float)6.92182516324628E-20)*Y-
                                 (float)1.586937691507E-18)*Y+(float)3.357639744582E-17)*Y-
                               (float)4.810285046442E-16)*Y+(float)5.386312669975E-15)*Y-
                             (float)6.117895297439E-14)*Y+(float)8.441808227634E-13)*Y-
                           (float)1.18527596836592E-11 )*Y+(float)1.36296870441445E-10 )*Y-
                         (float)1.17842611094141E-09 )*Y+(float)7.80430641995926E-09 )*Y-
                       (float)5.97767417400540E-08 )*Y+(float)1.65186146094969E-06;
        } else if (X < (float)40) {
                WW1 = _sqrt(PIE4/X);
                E = exp(-X);
                RT1 = ((((((((-(float)1.73363958895356E-06*X+(float)1.19921331441483E-04)*X -
                             (float)1.59437614121125E-02)*X+(float)1.13467897349442E+00)*X -
                           (float)4.47216460864586E+01)*X+(float)1.06251216612604E+03)*X -
                         (float)1.52073917378512E+04)*X+(float)1.20662887111273E+05)*X -
                       (float)4.07186366852475E+05)*E + R15/(X-R15);
                RT2 = ((((((((-(float)1.60102542621710E-05*X+(float)1.10331262112395E-03)*X -
                             (float)1.50043662589017E-01)*X+(float)1.05563640866077E+01)*X -
                           (float)4.10468817024806E+02)*X+(float)9.62604416506819E+03)*X -
                         (float)1.35888069838270E+05)*X+(float)1.06107577038340E+06)*X -
                       (float)3.51190792816119E+06)*E + R25/(X-R25);
                RT3 = ((((((((-(float)4.48880032128422E-05*X+(float)2.69025112122177E-03)*X -
                             (float)4.01048115525954E-01)*X+(float)2.78360021977405E+01)*X -
                           (float)1.04891729356965E+03)*X+(float)2.36985942687423E+04)*X -
                         (float)3.19504627257548E+05)*X+(float)2.34879693563358E+06)*X -
                       (float)7.16341568174085E+06)*E + R35/(X-R35);
                RT4 = ((((((((-(float)6.38526371092582E-05*X-(float)2.29263585792626E-03)*X -
                             (float)7.65735935499627E-02)*X+(float)9.12692349152792E+00)*X -
                           (float)2.32077034386717E+02)*X+(float)2.81839578728845E+02)*X +
                         (float)9.59529683876419E+04)*X-(float)1.77638956809518E+06)*X +
                       (float)1.02489759645410E+07)*E + R45/(X-R45);
                RT5 = ((((((((-(float)3.59049364231569E-05*X-(float)2.25963977930044E-02)*X +
                             (float)1.12594870794668E+00)*X-(float)4.56752462103909E+01)*X +
                           (float)1.05804526830637E+03)*X-(float)1.16003199605875E+04)*X -
                         (float)4.07297627297272E+04)*X+(float)2.22215528319857E+06)*X -
                       (float)1.61196455032613E+07)*E + R55/(X-R55);
                WW5 = (((((((((-(float)4.61100906133970E-10*X+(float)1.43069932644286E-07)*X -
                              (float)1.63960915431080E-05)*X+(float)1.15791154612838E-03)*X -
                            (float)5.30573476742071E-02)*X+(float)1.61156533367153E+00)*X -
                          (float)3.23248143316007E+01)*X+(float)4.12007318109157E+02)*X -
                        (float)3.02260070158372E+03)*X+(float)9.71575094154768E+03)*E + W55*WW1;
                WW4 = (((((((((-(float)2.40799435809950E-08*X+(float)8.12621667601546E-06)*X -
                              (float)9.04491430884113E-04)*X+(float)6.37686375770059E-02)*X -
                            (float)2.96135703135647E+00)*X+(float)9.15142356996330E+01)*X -
                          (float)1.86971865249111E+03)*X+(float)2.42945528916947E+04)*X -
                        (float)1.81852473229081E+05)*X+(float)5.96854758661427E+05)*E + W45*WW1;
                WW3 = (((((((( (float)1.83574464457207E-05*X-(float)1.54837969489927E-03)*X +
                             (float)1.18520453711586E-01)*X-(float)6.69649981309161E+00)*X +
                           (float)2.44789386487321E+02)*X-(float)5.68832664556359E+03)*X +
                         (float)8.14507604229357E+04)*X-(float)6.55181056671474E+05)*X +
                       (float)2.26410896607237E+06)*E + W35*WW1;
                WW2 = (((((((( (float)2.77778345870650E-05*X-(float)2.22835017655890E-03)*X +
                             (float)1.61077633475573E-01)*X-(float)8.96743743396132E+00)*X +
                           (float)3.28062687293374E+02)*X-(float)7.65722701219557E+03)*X +
                         (float)1.10255055017664E+05)*X-(float)8.92528122219324E+05)*X +
                       (float)3.10638627744347E+06)*E + W25*WW1;
                WW1 = WW1-(float)0.01962E+00*E-WW2-WW3-WW4-WW5;
        } else if (X < (float)59.0) {
                WW1 = _sqrt(PIE4/X);
                XXX = X * X * X;
                E = XXX*exp(-X);
                RT1 = (((-(float)2.43758528330205E-02*X+(float)2.07301567989771E+00)*X -
                        (float)6.45964225381113E+01)*X+(float)7.14160088655470E+02)*E + R15/(X-R15);
                RT2 = (((-(float)2.28861955413636E-01*X+(float)1.93190784733691E+01)*X -
                        (float)5.99774730340912E+02)*X+(float)6.61844165304871E+03)*E + R25/(X-R25);
                RT3 = (((-(float)6.95053039285586E-01*X+(float)5.76874090316016E+01)*X -
                        (float)1.77704143225520E+03)*X+(float)1.95366082947811E+04)*E + R35/(X-R35);
                RT4 = (((-(float)1.58072809087018E+00*X+(float)1.27050801091948E+02)*X -
                        (float)3.86687350914280E+03)*X+(float)4.23024828121420E+04)*E + R45/(X-R45);
                RT5 = (((-(float)3.33963830405396E+00*X+(float)2.51830424600204E+02)*X -
                        (float)7.57728527654961E+03)*X+(float)8.21966816595690E+04)*E + R55/(X-R55);
                E = XXX*E;
                WW5 = (( (float)1.35482430510942E-08*X-(float)3.27722199212781E-07)*X +
                       (float)2.41522703684296E-06)*E + W55*WW1;
                WW4 = (( (float)1.23464092261605E-06*X-(float)3.55224564275590E-05)*X +
                       (float)3.03274662192286E-04)*E + W45*WW1;
                WW3 = (( (float)1.34547929260279E-05*X-(float)4.19389884772726E-04)*X +
                       (float)3.87706687610809E-03)*E + W35*WW1;
                WW2 = (( (float)2.09539509123135E-05*X-(float)6.87646614786982E-04)*X +
                       (float)6.68743788585688E-03)*E + W25*WW1;
                WW1 = WW1-WW2-WW3-WW4-WW5;
        } else {
                WW1 = _sqrt(PIE4/X);
                RT1 = R15/(X-R15);
                RT2 = R25/(X-R25);
                RT3 = R35/(X-R35);
                RT4 = R45/(X-R45);
                RT5 = R55/(X-R55);
                WW2 = W25*WW1;
                WW3 = W35*WW1;
                WW4 = W45*WW1;
                WW5 = W55*WW1;
                WW1 = WW1-WW2-WW3-WW4-WW5;
        }
        roots[0] = RT1;
        roots[1] = RT2;
        roots[2] = RT3;
        roots[3] = RT4;
        roots[4] = RT5;
        weights[0+g_size*2] = WW1;
        weights[1+g_size*2] = WW2;
        weights[2+g_size*2] = WW3;
        weights[3+g_size*2] = WW4;
        weights[4+g_size*2] = WW5;
}

void CINTg0_2e_2d(float* g, int g_len,
        int nroots, int nmax, int mmax, int dm, int dn, int g_size
        ,const dtype *__bcc00, const dtype *__bcc0p, int bcc0_len,
        const dtype *b01, const dtype *b00, const dtype *b10 , int b_len
        ) {



        //int i, j, m, n, off;
        unsigned short i, j, m, n, off;
        dtype *gx = g;
        dtype *gy = g + g_size;
        dtype *gz = g + g_size * 2;

        const float *c00;
        const float *c0p;

        dtype *p0x, *p0y, *p0z;
        const dtype *p1x, *p1y, *p1z, *p2x, *p2y, *p2z;

        for (i = 0; i < nroots; i++) {
                g[i       ] = 1;
                g[i+g_size] = 1;
                //gz[i] = w[i];
        }


        // 200k
        if (nmax > 0) {
                // gx(irys,0,1) = c00(irys) * gx(irys,0,0)
                //for (c00 = __bcc00, i = 0; i < nroots; i++, c00+=3) {
                c00 = __bcc00;
                for (i = 0; i < nroots; i++) {
                        g[i+dn         ] = c00[0] * g[i];
                        g[i+dn+g_size  ] = c00[1] * g[i+g_size];
                        g[i+dn+g_size*2] = c00[2] * g[i+g_size*2];
                        c00+=3;
                }
                // gx(irys,0,n+1) = c00(irys)*gx(irys,0,n)
                // + n*b10(irys)*gx(irys,0,n-1)
                for (n = 1; n < nmax; n++) {
                        off = n * dn;
                        c00 = __bcc00;
                        j = off;
                        //for (c00 = __bcc00, i = 0, j = off; i < nroots; i++, j++, c00+=3) {
                        for (i = 0; i < nroots; i++) {
                                g[j+dn         ] = c00[0] * g[j         ] + n * b10[i] * g[j-dn         ];
                                g[j+dn+g_size  ] = c00[1] * g[j+g_size  ] + n * b10[i] * g[j-dn+g_size  ];
                                g[j+dn+g_size*2] = c00[2] * g[j+g_size*2] + n * b10[i] * g[j-dn+g_size*2];
                                j++;
                                c00+=3;
                        }
                }
        }

        // 200k
        if (mmax > 0) {
                // gx(irys,1,0) = c0p(irys) * gx(irys,0,0)
                for (c0p = __bcc0p, i = 0; i < nroots; i++, c0p+=3) {
                        g[i+dm         ] = c0p[0] * g[i         ];
                        g[i+dm+g_size  ] = c0p[1] * g[i+g_size  ];
                        g[i+dm+g_size*2] = c0p[2] * g[i+g_size*2];
                }
                // gx(irys,m+1,0) = c0p(irys)*gx(irys,m,0)
                // + m*b01(irys)*gx(irys,m-1,0)
                for (m = 1; m < mmax; m++) {
                        off = m * dm;
                        for (c0p = __bcc0p, i = 0, j = off; i < nroots; i++, j++, c0p+=3) {
                                g[j+dm         ] = c0p[0] * g[j         ] + m * b01[i] * g[j-dm         ];
                                g[j+dm+g_size  ] = c0p[1] * g[j+g_size  ] + m * b01[i] * g[j-dm+g_size  ];
                                g[j+dm+g_size*2] = c0p[2] * g[j+g_size*2] + m * b01[i] * g[j-dm+g_size*2];
                        }
                }
        }

        // 400k
        if (nmax > 0 && mmax > 0) {
                // gx(irys,1,1) = c0p(irys)*gx(irys,0,1)
                // + b00(irys)*gx(irys,0,0)
                for (c0p = __bcc0p, i = 0; i < nroots; i++, c0p+=3) {
                        g[i+dm+dn         ] = c0p[0] * g[i+dn         ] + b00[i] * g[i         ];
                        g[i+dm+dn+g_size  ] = c0p[1] * g[i+dn+g_size  ] + b00[i] * g[i+g_size  ];
                        g[i+dm+dn+g_size*2] = c0p[2] * g[i+dn+g_size*2] + b00[i] * g[i+g_size*2];
                }

                // gx(irys,m+1,1) = c0p(irys)*gx(irys,m,1)
                // + m*b01(irys)*gx(irys,m-1,1)
                // + b00(irys)*gx(irys,m,0)
                for (m = 1; m < mmax; m++) {
                        off = m * dm + dn;
                        for (c0p = __bcc0p, i = 0, j = off; i < nroots; i++, j++, c0p+=3) {
                                g[j+dm         ] = c0p[0]*g[j         ] + m*b01[i]*g[j-dm         ] +b00[i]*g[j-dn         ];
                                g[j+dm+g_size  ] = c0p[1]*g[j+g_size  ] + m*b01[i]*g[j-dm+g_size  ] +b00[i]*g[j-dn+g_size  ];
                                g[j+dm+g_size*2] = c0p[2]*g[j+g_size*2] + m*b01[i]*g[j-dm+g_size*2] +b00[i]*g[j-dn+g_size*2];
                        }
                }

                // gx(irys,m,n+1) = c00(irys)*gx(irys,m,n)
                // + n*b10(irys)*gx(irys,m,n-1)
                // + m*b00(irys)*gx(irys,m-1,n)

                for (m = 1; m <= mmax; m++) {
                        for (n = 1; n < nmax; n++) {
                                off = m * dm + n * dn;
                                for (c00 = __bcc00, i = 0, j = off; i < nroots; i++, j++, c00+=3) {
                                        g[j+dn         ] = c00[0]*g[j         ] +n*b10[i]*g[j-dn         ] + m*b00[i]*g[j-dm         ];
                                        g[j+dn+g_size  ] = c00[1]*g[j+g_size  ] +n*b10[i]*g[j-dn+g_size  ] + m*b00[i]*g[j-dm+g_size  ];
                                        g[j+dn+g_size*2] = c00[2]*g[j+g_size*2] +n*b10[i]*g[j-dn+g_size*2] + m*b00[i]*g[j-dm+g_size*2];
                                }
                        }
                }
        }


}



/*
 * g0[i,k,l,j] = < ik | lj > = ( i j | k l )
 */
/* 2d is based on l,j */
void CINTg0_lj2d_4d(float* g, int g_len,
        int nmax, int mmax, int li, int lk, int lj, int nroots, int di,
        int dk, int dl, int dj, const dtype *rirj, const dtype *rkrl, int g_size) {

        dtype rx, ry, rz, _rx, _ry, _rz;

        //DEF_GXYZ(double, g, gx, gy, gz);
        //unsigned short i, j, k, l, ptr, n;
        unsigned short i, j, k, l, ptr, n;

        // g(i,...,j) = rirj * g(i-1,...,j) +  g(i-1,...,j+1)
        rx = rirj[0];
        ry = rirj[1];
        rz = rirj[2];

        _rx = rkrl[0];
        _ry = rkrl[1];
        _rz = rkrl[2];
        for (i = 1; i <= li; i++) {
                for (j = 0; j <= nmax-i; j++) {
                        for (l = 0; l <= mmax; l++) {
                                ptr = j*dj + l*dl + i*di;
                                for (n = ptr; n < ptr+nroots; n++) {
                                        g[n         ] = rx * g[n-di]            + g[n-di+dj         ];
                                        g[n+g_size  ] = ry * g[n-di+g_size]     + g[n-di+dj+g_size  ];
                                        g[n+g_size*2] = rz * g[n-di+g_size*2]   + g[n-di+dj+g_size*2];
                                }
                        }
                }
        }

        // g(...,k,l,..) = rkrl * g(...,k-1,l,..) + g(...,k-1,l+1,..)
        for (j = 0; j <= lj; j++) {
                for (k = 1; k <= lk; k++) {
                        for (l = 0; l <= mmax-k; l++) {
                                ptr = j*dj + l*dl + k*dk;
                                for (n = ptr; n < ptr+dk; n++) {
                                        g[n         ] = _rx * g[n-dk         ] + g[n-dk+dl];
                                        g[n+g_size  ] = _ry * g[n-dk+g_size  ] + g[n-dk+dl+g_size];
                                        g[n+g_size*2] = _rz * g[n-dk+g_size*2] + g[n-dk+dl+g_size*2];
                                }
                        }
                }
        }
}
/* 2d is based on k,j */
void CINTg0_kj2d_4d(float* g, int g_len, int nmax, int mmax, int li, int ll, int lj, int nroots, int di, int dk, int dl, int dj, const dtype *rirj, const dtype *rkrl, int g_size) {

        //unsigned short i, j, k, l, ptr, n;
        unsigned short i, j, k, l, ptr, n;

        dtype rx, ry, rz, _rx, _ry, _rz;

        // g(i,...,j) = rirj * g(i-1,...,j) +  g(i-1,...,j+1)
        rx = rirj[0];
        ry = rirj[1];
        rz = rirj[2];
        _rx = rkrl[0];
        _ry = rkrl[1];
        _rz = rkrl[2];

        for (i = 1; i <= li; i++) {
                for (j = 0; j <= nmax-i; j++) {
                        for (k = 0; k <= mmax; k++) {
                                ptr = j*dj + k*dk + i*di;
                                for (n = ptr; n < ptr+nroots; n++) {
                                        g[n]            = rx * g[n-di]          + g[n-di+dj];
                                        g[n+g_size]     = ry * g[n-di+g_size]   + g[n-di+dj+g_size];
                                        g[n+g_size*2]   = rz * g[n-di+g_size*2] + g[n-di+dj+g_size*2];
                                }
                        }
                }
        }

        // g(...,k,l,..) = rkrl * g(...,k,l-1,..) + g(...,k+1,l-1,..)
        for (j = 0; j <= lj; j++) {
                for (l = 1; l <= ll; l++) {
                        for (k = 0; k <= mmax-l; k++) {
                                ptr = j*dj + l*dl + k*dk;
                                for (n = ptr; n < ptr+dk; n++) {
                                        g[n         ] = _rx * g[n-dl]            + g[n-dl+dk];
                                        g[n+g_size  ] = _ry * g[n-dl+g_size]     + g[n-dl+dk+g_size];
                                        g[n+g_size*2] = _rz * g[n-dl+g_size*2]   + g[n-dl+dk+g_size*2];
                                }
                        }
                }
        }

}
/* 2d is based on i,l */
void CINTg0_il2d_4d(float* g, int g_len,
        int nmax, int mmax, int lk, int ll, int lj, int nroots,
        int di, int dk, int dl, int dj, const dtype *rirj, const dtype *rkrl, int g_size) {


        dtype rx, ry, rz, _rx, _ry, _rz;
        //unsigned short i, j, k, l, ptr, n;
        unsigned short i, j, k, l, ptr, n;

        // g(...,k,l,..) = rkrl * g(...,k-1,l,..) + g(...,k-1,l+1,..)
        rx = rkrl[0];
        ry = rkrl[1];
        rz = rkrl[2];

        _rx = rirj[0];
        _ry = rirj[1];
        _rz = rirj[2];

        for (k = 1; k <= lk; k++) {
                for (l = 0; l <= mmax-k; l++) {
                        for (i = 0; i <= nmax; i++) {
                                ptr = l*dl + k*dk + i*di;
                                for (n = ptr; n < ptr+nroots; n++) {
                                        g[n         ] = rx * g[n-dk         ] + g[n-dk+dl         ];
                                        g[n+g_size  ] = ry * g[n-dk+g_size  ] + g[n-dk+dl+g_size  ];
                                        g[n+g_size*2] = rz * g[n-dk+g_size*2] + g[n-dk+dl+g_size*2];
                                }
                        }
                }
        }

        // g(i,...,j) = rirj * g(i,...,j-1) +  g(i+1,...,j-1)
        for (j = 1; j <= lj; j++) {
                for (l = 0; l <= ll; l++) {
                        for (k = 0; k <= lk; k++) {
                                ptr = j*dj + l*dl + k*dk;
                                for (n = ptr; n < ptr+dk-di*j; n++) {
                                        g[n         ] = _rx * g[n-dj         ] + g[n-dj+di         ];
                                        g[n+g_size  ] = _ry * g[n-dj+g_size  ] + g[n-dj+di+g_size  ];
                                        g[n+g_size*2] = _rz * g[n-dj+g_size*2] + g[n-dj+di+g_size*2];
                                }
                        }
                }
        }


}
/* 2d is based on i,k */
void CINTg0_ik2d_4d(float* g, int g_len,
        int nmax, int mmax, int lk, int ll, int lj, int nroots, int di, int dk, int dl, int dj,
        const dtype *rirj, const dtype *rkrl,
        int g_size) {
        //unsigned short i, j, k, l, ptr, n;
        unsigned short i, j, k, l, ptr, n;

        const dtype *p1x, *p1y, *p1z, *p2x, *p2y, *p2z;
        dtype rx, ry, rz, _rx, _ry, _rz;

        // g(...,k,l,..) = rkrl * g(...,k,l-1,..) + g(...,k+1,l-1,..)
        rx  = rkrl[0];
        ry  = rkrl[1];
        rz  = rkrl[2];
        _rx = rirj[0];
        _ry = rirj[1];
        _rz = rirj[2];

        for (l = 1; l <= ll; l++) {
                // (:,i) is full, so loop:k and loop:n can be merged to
                // for(n = l*dl; n < ptr+dl-dk*l; n++)
                for (k = 0; k <= mmax-l; k++) {
                        for (i = 0; i <= nmax; i++) {
                                ptr = l*dl + k*dk + i*di;
                                for (n = ptr; n < ptr+nroots; n++) {
                                        g[n         ] = rx * g[n-dl]          + g[n-dl+dk];
                                        g[n+g_size  ] = ry * g[n+g_size-dl]   + g[n+g_size-dl+dk];
                                        g[n+g_size*2] = rz * g[n+g_size*2-dl] + g[n+g_size*2-dl+dk];
                                }
                        }
                }
        }

        // g(i,...,j) = rirj * g(i,...,j-1) +  g(i+1,...,j-1)
        for (j = 1; j <= lj; j++) {
                for (l = 0; l <= ll; l++) {
                        for (k = 0; k <= lk; k++) {
                                ptr = j*dj + l*dl + k*dk;
                                for (n = ptr; n < ptr+dk-di*j; n++) {
                                        g[n]            = _rx * g[n-dj]          + g[n-dj+di];
                                        g[n+g_size]     = _ry * g[n+g_size-dj]   + g[n-dj+di+g_size];
                                        g[n+g_size*2]   = _rz * g[n+g_size*2-dj] + g[n-dj+di+g_size*2];
                                }
                        }
                }
        }
}


// code size takes 50.2 kb
int CINTg0_2e( float* g, int g_len,
int kbase, int ibase, int di, int dk, int dl, int dj, int dm, int dn
,int nroots, dtype aij, dtype akl, int g_size, dtype fac0, int nmax, int mmax,
int li_ceil, int lj_ceil, int lk_ceil, int ll_ceil, dtype *rkrl, dtype *rirj ,
dtype rijrkl[], dtype rijrx[], dtype rklrx[]) {

        dtype u[MXRYSROOTS];

        dtype a1   = aij * akl;
        dtype a0   = a1 / (aij + akl);
        dtype fac1 = sqrt(a0 / (a1 * a1 * a1)) * fac0;

        dtype x    = a0 *(rijrkl[0] * rijrkl[0] + rijrkl[1] * rijrkl[1] + rijrkl[2] * rijrkl[2]);

        // rys roots compute some integral thingy: https://pubs.acs.org/doi/10.1021/acs.jpca.6b10004
        if (x < (float)1E-15) {
                int off = nroots * (nroots - 1) / 2;
                int i;
                for (i = 0; i < nroots; i++)  {
                        u[i]          = ROOTS_FOR_X0[off + i];
                        g[i+g_size*2] = WEIGHTS_FOR_X0[off + i];
                }
        }
        else{

                // Code:        1.9 KiB 49.3 KiB(47.4 KiB)
                // Cycles:

                // todo; We can remove all 1e-10 without changing numerics.
                // for rys_root5 this may be 30% of the code!

                if (nroots == 1) { rys_root1(x, u, g, g_size);}   // 22 KiB for theese
                if (nroots == 2) { rys_root2(x, u, g, g_size);}
                if (nroots == 3) { rys_root3(x, u, g, g_size);}
                if (nroots == 4) { rys_root4(x, u, g, g_size);}
                if (nroots == 5) { rys_root5(x, u, g, g_size);}  // adding float: -12.3 KiB (from 49.3 KiB to 37.0 KiB)

        }

        if (g_size == 1) {
                g[0] = 1;
                g[1] = 1;
                g[2] *= fac1;
                return 1;
        }

        dtype u2, tmp1, tmp2, tmp3, tmp4, tmp5;

        // this used to rely on a struct _BC
        dtype remove_struct_c00[MXRYSROOTS*3];
        dtype remove_struct_c0p[MXRYSROOTS*3];
        dtype remove_struct_b01[MXRYSROOTS];
        dtype remove_struct_b00[MXRYSROOTS];
        dtype remove_struct_b10[MXRYSROOTS];

        // @alex: some of the functions below need a constant version that doesn't change, others
        // need a version that does allow changing. we add "_" forthe constant versions.
        dtype *c00 = remove_struct_c00;
        dtype *c0p = remove_struct_c0p;
        dtype *b00 = remove_struct_b00;
        dtype *b10 = remove_struct_b10;
        dtype *b01 = remove_struct_b01;
        const dtype *_c00 = remove_struct_c00;
        const dtype *_c0p = remove_struct_c0p;
        const dtype *_b00 = remove_struct_b00;
        const dtype *_b10 = remove_struct_b10;
        const dtype *_b01 = remove_struct_b01;

        //for (unsigned short irys = 0; irys < nroots; irys++, c00+=3, c0p+=3) {
        for (int irys = 0; irys < nroots; irys++, c00+=3, c0p+=3) {
                u2 = a0 * u[irys];
                tmp4 = (float).5 / (u2 * (aij + akl) + a1);
                tmp5 = u2 * tmp4;
                tmp1 = (float)2. * tmp5;
                tmp2 = tmp1 * akl;
                tmp3 = tmp1 * aij;
                b00[irys] = tmp5;
                b10[irys] = tmp5 + tmp4 * akl;
                b01[irys] = tmp5 + tmp4 * aij;
                c00[0] = rijrx[0] - tmp2 * rijrkl[0];
                c00[1] = rijrx[1] - tmp2 * rijrkl[1];
                c00[2] = rijrx[2] - tmp2 * rijrkl[2];
                c0p[0] = rklrx[0] + tmp3 * rijrkl[0];
                c0p[1] = rklrx[1] + tmp3 * rijrkl[1];
                c0p[2] = rklrx[2] + tmp3 * rijrkl[2];
                g[irys+g_size*2] *= fac1;
        }




        // Code:    0.9 KiB (from 50.2kib to 49.3 KiB)
        // Cycles:  800k each (1.6M total)
        CINTg0_2e_2d(g, g_len, nroots, li_ceil + lj_ceil, lk_ceil + ll_ceil, dm, dn, g_size, _c00, _c0p, MXRYSROOTS*(float)3,  _b01, _b00, _b10, MXRYSROOTS);
        if (kbase) {
                if (ibase) {    CINTg0_ik2d_4d(g, g_len, li_ceil + lj_ceil, lk_ceil + ll_ceil, lk_ceil, ll_ceil, lj_ceil, nroots, di, dk, dl, dj, rirj, rkrl, g_size); }
                else {          CINTg0_kj2d_4d(g, g_len, li_ceil + lj_ceil, lk_ceil + ll_ceil, li_ceil, ll_ceil, lj_ceil, nroots, di, dk, dl, dj, rirj, rkrl, g_size); }
        }
        else {
                if (ibase) {    CINTg0_il2d_4d(g, g_len, li_ceil + lj_ceil, lk_ceil + ll_ceil, lk_ceil, ll_ceil, lj_ceil, nroots, di, dk, dl, dj, rirj, rkrl, g_size); }
                else {          CINTg0_lj2d_4d(g, g_len, li_ceil + lj_ceil, lk_ceil + ll_ceil, li_ceil, lk_ceil, lj_ceil, nroots, di, dk, dl, dj, rirj, rkrl, g_size);  }
        }


        return 1;


}


#define bas(SLOT,I)     bas[BAS_SLOTS * (I) + (SLOT)]


typedef struct {
    dtype rij[3];
    dtype eij;
    dtype cceij;
} PairData;


void CINTOpt_log_max_pgto_coeff(dtype *log_maxc, const dtype *coeff, int nprim, int nctr) {
        short i, ip; // max is 32k
        dtype maxc;
        for (ip = 0; ip < nprim; ip++) {
                maxc = 0;
                for (i = 0; i < nctr; i++) {
                        maxc = std::fmax(maxc, std::abs(coeff[i*nprim+ip]));
                }
                //log_maxc[ip] = approx_log(maxc);
                log_maxc[ip] = std::log(maxc);
        }
}





/*
 * GTO = x^{nx}y^{ny}z^{nz}e^{-ar^2}
 */
void CINTcart_comp(int *nx, int *ny, int *nz, const int lmax)
{
        int inc = 0;
        int lx, ly, lz;

        for (lx = lmax; lx >= 0; lx--) {
                for (ly = lmax - lx; ly >= 0; ly--) {
                        lz = lmax - lx - ly;
                        nx[inc] = lx;
                        ny[inc] = ly;
                        nz[inc] = lz;
                        inc++;
                }
        }
}


// other boundaries
#define CART_MAX        136 // > (ANG_MAX*(ANG_MAX+1)/2)
void CINTg2e_index_xyz(int *idx, int i_l, int j_l, int k_l, int l_l,
                                                           int nfi, int nfj, int nfk, int nfl,
                                                           int di,  int dk,  int dl,  int dj, int g_size) {
        int i, j, k, l, n;
        int ofx, ofkx, oflx;
        int ofy, ofky, ofly;
        int ofz, ofkz, oflz;
        int i_nx[136], i_ny[136], i_nz[136];
        int j_nx[136], j_ny[136], j_nz[136];
        int k_nx[136], k_ny[136], k_nz[136];
        int l_nx[136], l_ny[136], l_nz[136];

        CINTcart_comp(i_nx, i_ny, i_nz, i_l);
        CINTcart_comp(j_nx, j_ny, j_nz, j_l);
        CINTcart_comp(k_nx, k_ny, k_nz, k_l);
        CINTcart_comp(l_nx, l_ny, l_nz, l_l);

        ofx = 0;
        ofy = g_size;
        ofz = g_size* 2;
        n = 0;
        for (j = 0; j < nfj; j++) {
                for (l = 0; l < nfl; l++) {
                        oflx = ofx + dj * j_nx[j] + dl * l_nx[l];
                        ofly = ofy + dj * j_ny[j] + dl * l_ny[l];
                        oflz = ofz + dj * j_nz[j] + dl * l_nz[l];
                        for (k = 0; k < nfk; k++) {
                                ofkx = oflx + dk * k_nx[k];
                                ofky = ofly + dk * k_ny[k];
                                ofkz = oflz + dk * k_nz[k];
                                switch (i_l) {
                                        case 0:
                                                idx[n+0] = ofkx;
                                                idx[n+1] = ofky;
                                                idx[n+2] = ofkz;
                                                n += 3;
                                                break;
                                        case 1:
                                                idx[n+0] = ofkx + di;
                                                idx[n+1] = ofky;
                                                idx[n+2] = ofkz;
                                                idx[n+3] = ofkx;
                                                idx[n+4] = ofky + di;
                                                idx[n+5] = ofkz;
                                                idx[n+6] = ofkx;
                                                idx[n+7] = ofky;
                                                idx[n+8] = ofkz + di;
                                                n += 9;
                                                break;
                                        case 2:
                                                idx[n+0 ] = ofkx + di*2;
                                                idx[n+1 ] = ofky;
                                                idx[n+2 ] = ofkz;
                                                idx[n+3 ] = ofkx + di;
                                                idx[n+4 ] = ofky + di;
                                                idx[n+5 ] = ofkz;
                                                idx[n+6 ] = ofkx + di;
                                                idx[n+7 ] = ofky;
                                                idx[n+8 ] = ofkz + di;
                                                idx[n+9 ] = ofkx;
                                                idx[n+10] = ofky + di*2;
                                                idx[n+11] = ofkz;
                                                idx[n+12] = ofkx;
                                                idx[n+13] = ofky + di;
                                                idx[n+14] = ofkz + di;
                                                idx[n+15] = ofkx;
                                                idx[n+16] = ofky;
                                                idx[n+17] = ofkz + di*2;
                                                n += 18;
                                                break;
                                        default:
                                                for (i = 0; i < nfi; i++) {
                                                        idx[n+0] = ofkx + di * i_nx[i]; //(:,ix,kx,lx,jx,1)
                                                        idx[n+1] = ofky + di * i_ny[i]; //(:,iy,ky,ly,jy,2)
                                                        idx[n+2] = ofkz + di * i_nz[i]; //(:,iz,kz,lz,jz,3)
                                                        n += 3;
                                                } // i
                                }
                        } // k
                } // l
        } // j
}



void CINTOpt_non0coeff_byshell(int *sortedidx, int *non0ctr, const dtype *ci,
                               int iprim, int ictr)
{
        int ip, j, k, kp; // hard coding!
        //int zeroidx[ictr];
        int zeroidx[1];
        for (ip = 0; ip < iprim; ip++) {
                //for (j = 0, k = 0, kp = 0; j < ictr; j++) {
                for (j = 0, k = 0, kp = 0; j < 1; j++) {
                        if (ci[iprim*j+ip] != 0) {
                                sortedidx[k] = j;
                                k++;
                        } else {
                                zeroidx[kp] = j;
                                kp++;
                        }
                }
// Append the index of zero-coeff to sortedidx for function CINTprim_to_ctr_0
                for (j = 0; j < kp; j++) {
                        sortedidx[k+j] = zeroidx[j];
                }
                non0ctr[ip] = k;
                //sortedidx += ictr;
                sortedidx += 1;
        }
}


void CINTprim_to_ctr_0(dtype *gc, dtype *gp, const dtype *coeff, size_t nf,
                       int nprim, int nctr, int non0ctr, int *sortedidx)
{
        int i;
        size_t n;
        dtype c0;

        for (i = 0; i < nctr; i++) {
                c0 = coeff[nprim* i];
                for (n = 0; n < nf; n++) {
                        gc[nf*i+n] = c0 * gp[n];
                }
        }
}

void CINTprim_to_ctr_1(dtype *gc, dtype *gp, const dtype *coeff, size_t nf,
                       int nprim, int nctr, int non0ctr, int *sortedidx)
{
        int i, j;
        size_t n;
        dtype c0;

        for (i = 0; i < non0ctr; i++) {
                c0 = coeff[nprim*sortedidx[i]];
                j = sortedidx[i];
                for (n = 0; n < nf; n++) {
                        gc[nf*j+n] += c0 * gp[n];
                }
        }
}


/*
 * a[m,n] -> a_t[n,m]
 */
void CINTdmat_transpose(dtype *a_t, dtype *a, int m, int n)
{
        int i, j, k;

        for (j = 0; j < n-3; j+=4) {
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[(j+0)*m+i] = a[i*n+j+0];
                        a_t[(j+1)*m+i] = a[i*n+j+1];
                        a_t[(j+2)*m+i] = a[i*n+j+2];
                        a_t[(j+3)*m+i] = a[i*n+j+3];
                }
        }

        switch (n-j) {
        case 1:
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[j*m+i] = a[i*n+j];
                }
                break;
        case 2:
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[(j+0)*m+i] = a[i*n+j+0];
                        a_t[(j+1)*m+i] = a[i*n+j+1];
                }
                break;
        case 3:
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[(j+0)*m+i] = a[i*n+j+0];
                        a_t[(j+1)*m+i] = a[i*n+j+1];
                        a_t[(j+2)*m+i] = a[i*n+j+2];
                }
                break;
        }
}

/*
 * a_t[n,m] += a[m,n]
 */
void CINTdplus_transpose(dtype *a_t, dtype *a, int m, int n)
{
        int i, j, k;

        for (j = 0; j < n-3; j+=4) {
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[(j+0)*m+i] += a[i*n+j+0];
                        a_t[(j+1)*m+i] += a[i*n+j+1];
                        a_t[(j+2)*m+i] += a[i*n+j+2];
                        a_t[(j+3)*m+i] += a[i*n+j+3];
                }
        }

        switch (n-j) {
        case 1:
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[j*m+i] += a[i*n+j];
                }
                break;
        case 2:
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[(j+0)*m+i] += a[i*n+j+0];
                        a_t[(j+1)*m+i] += a[i*n+j+1];
                }
                break;
        case 3:
#pragma GCC ivdep
                for (i = 0; i < m; i++) {
                        a_t[(j+0)*m+i] += a[i*n+j+0];
                        a_t[(j+1)*m+i] += a[i*n+j+1];
                        a_t[(j+2)*m+i] += a[i*n+j+2];
                }
                break;
        }
}

void CINTgout2e(dtype *gout, dtype *g, int *idx,
                int gout_empty, int envs_nf, int envs_nrys_roots)
{
        int nf = envs_nf;
        int i, ix, iy, iz, n;
        dtype s;

        if (gout_empty) {
                switch (envs_nrys_roots) {
                        case 1:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix] * g[iy] * g[iz];
                                }
                                break;
                        case 2:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1];
                                }
                                break;
                        case 3:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2];
                                }
                                break;
                        case 4:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3];
                                }
                                break;
                        case 5:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4];
                                }
                                break;
                        case 6:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4]
                                                + g[ix+5] * g[iy+5] * g[iz+5];
                                }
                                break;
                        case 7:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4]
                                                + g[ix+5] * g[iy+5] * g[iz+5]
                                                + g[ix+6] * g[iy+6] * g[iz+6];
                                }
                                break;
                        case 8:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] = g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4]
                                                + g[ix+5] * g[iy+5] * g[iz+5]
                                                + g[ix+6] * g[iy+6] * g[iz+6]
                                                + g[ix+7] * g[iy+7] * g[iz+7];
                                }
                                break;
                        default:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        s = 0;
                                        for (i = 0; i < envs_nrys_roots; i++) {
                                                s += g[ix+i] * g[iy+i] * g[iz+i];
                                        }
                                        gout[n] = s;
                                }
                                break;
                } // end switch nroots
        } else { // not flag_acc
                switch (envs_nrys_roots) {
                        case 1:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] += g[ix] * g[iy] * g[iz];
                                }
                                break;
                        case 2:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1];
                                }
                                break;
                        case 3:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2];
                                }
                                break;
                        case 4:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3];
                                }
                                break;
                        case 5:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4];
                                }
                                break;
                        case 6:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4]
                                                + g[ix+5] * g[iy+5] * g[iz+5];
                                }
                                break;
                        case 7:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4]
                                                + g[ix+5] * g[iy+5] * g[iz+5]
                                                + g[ix+6] * g[iy+6] * g[iz+6];
                                }
                                break;
                        case 8:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        gout[n] +=g[ix  ] * g[iy  ] * g[iz  ]
                                                + g[ix+1] * g[iy+1] * g[iz+1]
                                                + g[ix+2] * g[iy+2] * g[iz+2]
                                                + g[ix+3] * g[iy+3] * g[iz+3]
                                                + g[ix+4] * g[iy+4] * g[iz+4]
                                                + g[ix+5] * g[iy+5] * g[iz+5]
                                                + g[ix+6] * g[iy+6] * g[iz+6]
                                                + g[ix+7] * g[iy+7] * g[iz+7];
                                }
                                break;
                        default:
                                for (n = 0; n < nf; n++, idx+=3) {
                                        ix = idx[0];
                                        iy = idx[1];
                                        iz = idx[2];
                                        s = 0;
                                        for (i = 0; i < envs_nrys_roots; i++) {
                                                s += g[ix+i] * g[iy+i] * g[iz+i];
                                        }
                                        gout[n] += s;
                                }
                                break;
                } // end switch nroots
        }
}



#define gctrg   gout
#define gctrm   gctr
#define mempty  empty
#define m_ctr   n_comp




int CINTset_pairdata(PairData *pairdata, const dtype *ai, const dtype *aj, const dtype *ri, const dtype *rj,
                     dtype *log_maxci, dtype *log_maxcj,
                     int li_ceil, int lj_ceil, int iprim, int jprim,
                     dtype rr_ij, dtype expcutoff, dtype*eri) {
        int ip, jp, n;
        dtype aij, eij, cceij;
        // the comment below was commented from libcint.
        // This estimation is based on the assumption that the two gaussian charge
        // distributions are separated in space. If two gaussians are too close (the
        // distance between gaussian product ij and gaussian product kl < 1), rr
        //dtype log_rr_ij = (li_ceil+lj_ceil+1) * approx_log(rr_ij+1) / 2;
        dtype log_rr_ij = (li_ceil+lj_ceil+1) * std::log(rr_ij+1) / 2;
        PairData *pdata;

        int empty = 1;
        n = 0;
        for (jp = 0; jp < jprim; jp++) {
                for (ip = 0; ip < iprim; ip++) {
                        //printf("%i %i %i\n", n, jp, ip);

                        aij = 1/(ai[ip] + aj[jp]);
                        eij = rr_ij * ai[ip] * aj[jp] * aij;
                        cceij = eij - log_rr_ij - log_maxci[ip] - log_maxcj[jp];
                        pdata = pairdata + n;
                        pdata->cceij = cceij;
                        if (cceij < expcutoff) {
                        //if (true) {
                                empty = 0;
                                pdata->rij[0] = (ai[ip]*ri[0] + aj[jp]*rj[0]) * aij;
                                pdata->rij[1] = (ai[ip]*ri[1] + aj[jp]*rj[1]) * aij;
                                pdata->rij[2] = (ai[ip]*ri[2] + aj[jp]*rj[2]) * aij;
                                pdata->eij = exp(-eij); //TODO
                        } else {
                                pdata->rij[0] = 0;
                                pdata->rij[1] = 0;
                                pdata->rij[2] = 0;
                                pdata->eij = 0;
                        }

                        n ++ ;
                }
        }
        return empty;
}

int CINT2e_loop_nopt(
        dtype *gctr,
        const dtype *env,
        const dtype *rk       , const dtype *ri       , const dtype *rj       , const dtype *rl       ,dtype expcutoff ,
        dtype *rkrl, dtype *rirj,
        dtype *envs_ai ,dtype *envs_aj ,dtype *envs_ak ,dtype *envs_al , dtype *envs_fac ,dtype *envs_rij ,dtype *envs_rkl ,
        const dtype *rx_in_rijrx ,const dtype *rx_in_rklrx , dtype common_factor ,dtype log_rr_kl ,
        int len_gctr, int *empty, const int *shls, const int *bas,
        int n_env,    int i_ctr     ,int j_ctr,int k_ctr,int l_ctr        ,
        int n_comp,
        int li_ceil ,int lj_ceil ,int lk_ceil ,int ll_ceil ,int i_l
        ,int j_l ,int k_l ,int l_l ,int nfi ,int nfj ,int nfk ,int nfl ,int nf ,int g_stride_i ,int g_stride_k
        ,int g_stride_l ,int g_stride_j ,int nrys_roots ,int ibase ,int kbase ,int g_size ,int g2d_klmax ,int g2d_ijmax ,
        size_t leng, dtype* eri, dtype * tile_g, int * tile_idx) {


  dtype rr_kl       = rkrl[0]*rkrl[0] + rkrl[1]*rkrl[1] + rkrl[2]*rkrl[2];
  dtype square_rirj = rirj[0]*rirj[0] + rirj[1]*rirj[1] + rirj[2]*rirj[2];
  dtype dist_kl     = rr_kl;

  int i_sh    = shls[0];
  int j_sh    = shls[1];
  int k_sh    = shls[2];
  int l_sh    = shls[3];

  int i_prim  = bas[BAS_SLOTS*i_sh + NPRIM_OF];
  int j_prim  = bas[BAS_SLOTS*j_sh + NPRIM_OF];
  int k_prim  = bas[BAS_SLOTS*k_sh + NPRIM_OF];
  int l_prim  = bas[BAS_SLOTS*l_sh + NPRIM_OF];

  const dtype *ai = env + bas[BAS_SLOTS*i_sh+PTR_EXP];
  const dtype *aj = env + bas[BAS_SLOTS*j_sh+PTR_EXP];
  const dtype *ak = env + bas[BAS_SLOTS*k_sh+PTR_EXP];
  const dtype *al = env + bas[BAS_SLOTS*l_sh+PTR_EXP];

  const dtype *ci = env + bas[BAS_SLOTS*i_sh+PTR_COEFF];
  const dtype *cj = env + bas[BAS_SLOTS*j_sh+PTR_COEFF];
  const dtype *ck = env + bas[BAS_SLOTS*k_sh+PTR_COEFF];
  const dtype *cl = env + bas[BAS_SLOTS*l_sh+PTR_COEFF];


  dtype log_maxci[32], *log_maxcj, *log_maxck, *log_maxcl;// 6-31G=25, 6-31G*=25


  // TODO:allocate
  PairData pdata_base[64]; // 6-31G=6-31G*=35
  PairData *pdata_ij;

  log_maxcj = log_maxci + i_prim;
  log_maxck = log_maxcj + j_prim;
  log_maxcl = log_maxck + k_prim;

  CINTOpt_log_max_pgto_coeff(log_maxci, ci, i_prim, i_ctr);
  CINTOpt_log_max_pgto_coeff(log_maxcj, cj, j_prim, j_ctr);

  if (CINTset_pairdata(pdata_base, ai, aj, ri, rj,
                             log_maxci, log_maxcj, li_ceil, lj_ceil,
                             i_prim, j_prim, square_rirj, expcutoff, eri)) {
                return 0;
  }

  CINTOpt_log_max_pgto_coeff(log_maxck, ck, k_prim, k_ctr);
  CINTOpt_log_max_pgto_coeff(log_maxcl, cl, l_prim, l_ctr);

  dtype fac1i, fac1j, fac1k, fac1l;
  int _empty[5] = {1, 1, 1, 1, 1};
  int *iempty = _empty + 0;
  int *jempty = _empty + 1;
  int *kempty = _empty + 2;
  int *lempty = _empty + 3;
  int *gempty = _empty + 4;

  dtype akl, ekl, expijkl, ccekl;
  dtype *rij; //
  // TODO:allocate
  //int idx[256];  // 6-31G = 240?
  int * idx = tile_idx;
  //int idx[3888];

  // This allocated ~ [3,4] kB but doesn't really spend many cycles.
  CINTg2e_index_xyz(idx, i_l, j_l, k_l, l_l, nfi, nfj, nfk, nfl, g_stride_i , g_stride_k , g_stride_l , g_stride_j, g_size);

  int non0ctri[64], *non0ctrj, *non0ctrk, *non0ctrl;
  int *non0idxi, *non0idxj, *non0idxk, *non0idxl;
  non0ctrj = non0ctri + i_prim;
  non0ctrk = non0ctrj + j_prim;
  non0ctrl = non0ctrk + k_prim;
  non0idxi = non0ctrl + l_prim;
  non0idxj = non0idxi + i_prim*i_ctr;
  non0idxk = non0idxj + j_prim*j_ctr;
  non0idxl = non0idxk + k_prim*k_ctr;

  CINTOpt_non0coeff_byshell(non0idxi, non0ctri, ci, i_prim, i_ctr);
  CINTOpt_non0coeff_byshell(non0idxj, non0ctrj, cj, j_prim, j_ctr);
  CINTOpt_non0coeff_byshell(non0idxk, non0ctrk, ck, k_prim, k_ctr);
  CINTOpt_non0coeff_byshell(non0idxl, non0ctrl, cl, l_prim, l_ctr);

  int nc = i_ctr * j_ctr * k_ctr * l_ctr;
  size_t lenl = nf * nc * n_comp; // gctrl
  size_t lenk = nf * i_ctr * j_ctr * k_ctr * n_comp; // gctrk
  size_t lenj = nf * i_ctr * j_ctr * n_comp; // gctrj
  size_t leni = nf * i_ctr * n_comp; // gctri
  size_t len0 = nf * n_comp; // gout
  size_t len = leng + lenl + lenk + lenj + leni + len0;

  //dtype g[16384]; // this becomes 1053 at some point?
  //dtype g[1053]; // this becomes 1053 at some point?
  dtype *g = tile_g;
  //dtype g[3500]; // for C20 it looks like it doesn't use all 13230 possible entries.
  dtype *g1 = g + leng;
  dtype *gout, *gctri, *gctrj, *gctrk, *gctrl;

  //ALIAS_ADDR_IF_EQUAL(l, m);
  if (m_ctr == 1) { gctrl = gctrm; lempty = mempty; }
  else {            gctrl = g1;   g1 += lenl; }
  //ALIAS_ADDR_IF_EQUAL(k, l);
  if (l_ctr == 1) { gctrk = gctrl; kempty = lempty; }
  else {            gctrk = g1;   g1 += lenk; }
  //ALIAS_ADDR_IF_EQUAL(j, k);
  if (k_ctr == 1) { gctrj = gctrk; jempty = kempty; }
  else {            gctrj = g1;    g1 += lenj; }
  //ALIAS_ADDR_IF_EQUAL(i, j);
  if (j_ctr == 1) { gctri = gctrj; iempty = jempty; }
  else {            gctri = g1;    g1 += leni; }
  //ALIAS_ADDR_IF_EQUAL(g, i);
  if (i_ctr == 1) { gctrg = gctri; gempty = iempty; }
  else {            gctrg = g1;    g1 += leng; }


  dtype rijrkl[3];
  dtype rijrx[3];
  dtype rklrx[3];


  int ip, jp, kp, lp;
  //short ip, jp, kp, lp;
  for (lp = 0; lp < l_prim; lp++) {

                if (l_ctr == 1) {
                        fac1l = common_factor * cl[lp];
                } else {
                        fac1l = common_factor;
                        *kempty = 1;
                }
                for (kp = 0; kp < k_prim; kp++) {
                        akl = ak[kp] + al[lp];
                        ekl = dist_kl * ak[kp] * al[lp] / akl;
                        //ccekl = ekl - log_rr_kl - log_maxck[kp] - log_maxcl[lp];
                        // ccekl is almost the overlap of |k> |l>. For typical
                        // chemistry systems, use overlap to prescreen eri
                        // almost 100% works.
                        // The largest error may appear for two Gaussians with
                        // dist_kl ~4^2 and ak=al ~2.5. If in the middle of |k>
                        // and |l> it happens to exist steep functions |i>, |j>.
                        // The error ~ 2*\sqrt{2*ak/pi} ~ 3. So in the worst case,
                        // an integral ~= 3*cutoff may be incorrectly dropped.
                        // Increasing expcutoff by ln(3) can guarantee to get
                        // the required accuracy in any circumstance.

                        envs_ak[0]  = ak[kp];
                        envs_rkl[0] = (ak[kp]*rk[0] + al[lp]*rl[0]) / akl;
                        envs_rkl[1] = (ak[kp]*rk[1] + al[lp]*rl[1]) / akl;
                        envs_rkl[2] = (ak[kp]*rk[2] + al[lp]*rl[2]) / akl;

                        ekl       = exp(-ekl);

                        if (k_ctr == 1) { fac1k = fac1l * ck[kp]; }
                        else { fac1k = fac1l; *jempty = 1; }

                        pdata_ij = pdata_base;
                        for (jp = 0; jp < j_prim; jp++) {

                                envs_aj[0] = aj[jp]; // todo

                                if (j_ctr == 1) { fac1j = fac1k * cj[jp]; }
                                else { fac1j = fac1k; *iempty = 1; }

                                for (ip = 0; ip < i_prim; ip++, pdata_ij++) {
                                        //printf("\t%i %i %i %i\n", lp, kp, jp, ip);

                                        envs_ai[0] = ai[ip];
                                        rij = pdata_ij->rij;
                                        envs_rij[0] = rij[0];
                                        envs_rij[1] = rij[1];
                                        envs_rij[2] = rij[2];
                                        expijkl = pdata_ij->eij * ekl;

                                        if (i_ctr == 1) { fac1i = fac1j*ci[ip]*expijkl; }
                                        else { fac1i = fac1j*expijkl; }

                                        envs_fac[0] = fac1i;

                                        rijrkl[0] = envs_rij[0] - envs_rkl[0];
                                        rijrkl[1] = envs_rij[1] - envs_rkl[1];
                                        rijrkl[2] = envs_rij[2] - envs_rkl[2] ;
                                        rijrx[0]  = envs_rij[0] - rx_in_rijrx[0];
                                        rijrx[1]  = envs_rij[1] - rx_in_rijrx[1];
                                        rijrx[2]  = envs_rij[2] - rx_in_rijrx[2];
                                        rklrx[0]  = envs_rkl[0] - rx_in_rklrx[0];
                                        rklrx[1]  = envs_rkl[1] - rx_in_rklrx[1];
                                        rklrx[2]  = envs_rkl[2] - rx_in_rklrx[2];


                                        // 3.08M to 700k ; so this is 2.2M
                                       int ret = CINTg0_2e(g, len,
                                                kbase, ibase,
                                                g_stride_i, g_stride_k, g_stride_l, g_stride_j,
                                                g2d_klmax, g2d_ijmax,
                                                nrys_roots,
                                                envs_ai[0] + envs_aj[0], envs_ak[0] + al[lp],
                                                g_size,
                                                envs_fac[0],
                                                li_ceil + lj_ceil, lk_ceil + ll_ceil, li_ceil, lj_ceil, lk_ceil, ll_ceil,
                                                rkrl, rirj, rijrkl, rijrx, rklrx);


                                        // this takes ~ 700k?
                                        if (ret) {
                                                CINTgout2e(gout, g, idx, *gempty, nf, nrys_roots);// this may be the one where default case is a bit slower

                                                //#define PRIM2CTR(ctrsymb, gp, ngp)
                                                if (i_ctr > 1) {
                                                        if (*iempty) { CINTprim_to_ctr_0(gctri, gout, ci+ip, len0, i_prim, i_ctr, non0ctri[ip], non0idxi+ip*i_ctr); }
                                                        else { CINTprim_to_ctr_1(gctri, gout, ci+ip, len0, i_prim, i_ctr, non0ctri[ip], non0idxi+ip*i_ctr); }
                                                }
                                                *iempty = 0;
                                        }

                                } // end loop i_prim
                                if (!*iempty) {
                                        //PRIM2CTR(j, gctri, leni);
                                        if (j_ctr > 1) {
                                                if (*jempty) { CINTprim_to_ctr_0(gctrj, gctri, cj+jp, leni, j_prim, j_ctr, non0ctrj[jp], non0idxj+jp*j_ctr); }
                                                else { CINTprim_to_ctr_1(gctrj, gctri, cj+jp, leni, j_prim, j_ctr, non0ctrj[jp], non0idxj+jp*j_ctr); }
                                        }

                                }
                        } // end loop j_prim
                        if (!*jempty) {
                                //PRIM2CTR(k, gctrj, lenj);
                                if (k_ctr > 1) {
                                        if (*kempty) { CINTprim_to_ctr_0(gctrk, gctrj, ck+kp, lenj, k_prim, k_ctr, non0ctrk[kp], non0idxk+kp*k_ctr); }
                                        else { CINTprim_to_ctr_1(gctrk, gctrj, ck+kp, lenj, k_prim, k_ctr, non0ctrk[kp], non0idxk+kp*k_ctr); }
                                }
                        }

                } // end loop k_prim
                if (!*kempty) {
                        //PRIM2CTR(l, gctrk, lenk);
                        if (l_ctr > 1) {
                                if (*lempty) { CINTprim_to_ctr_0(gctrl, gctrk, cl+lp, lenk, l_prim, l_ctr, non0ctrl[lp], non0idxl+lp*l_ctr); }
                                else { CINTprim_to_ctr_1(gctrl, gctrk, cl+lp, lenk, l_prim, l_ctr, non0ctrl[lp], non0idxl+lp*l_ctr); }
                        }
                }

        } // end loop l_prim



      if (n_comp > 1 && !*lempty) {
                //TRANSPOSE(gctrl);
                if (*empty) { CINTdmat_transpose(gctr, gctrl, nf*nc, n_comp); *empty = 0; }
                else { CINTdplus_transpose(gctr, gctrl, nf*nc, n_comp); }

        }

        return !*empty;


        }
static dtype g_trans_cart2sph[] = {
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1.092548430592079070,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1.092548430592079070,
        0,
        -0.315391565252520002,
        0,
        0,
        -0.315391565252520002,
        0,
        0.630783130505040012,
        0,
        0,
        1.092548430592079070,
        0,
        0,
        0,
        0.546274215296039535,
        0,
        0,
        -0.546274215296039535,
        0,
        0,
        0,
        1.770130769779930531,
        0,
        0,
        0,
        0,
        -0.590043589926643510,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2.890611442640554055,
        0,
        0,
        0,
        0,
        0,
        0,
        -0.457045799464465739,
        0,
        0,
        0,
        0,
        -0.457045799464465739,
        0,
        1.828183197857862944,
        0,
        0,
        0,
        -1.119528997770346170,
        0,
        0,
        0,
        0,
        -1.119528997770346170,
        0,
        0.746352665180230782,
        -0.457045799464465739,
        0,
        0,
        -0.457045799464465739,
        0,
        1.828183197857862944,
        0,
        0,
        0,
        0,
        0,
        0,
        1.445305721320277020,
        0,
        0,
        0,
        0,
        -1.445305721320277020,
        0,
        0,
        0.590043589926643510,
        0,
        0,
        -1.770130769779930530,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2.503342941796704538,
        0,
        0,
        0,
        0,
        -2.503342941796704530,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5.310392309339791593,
        0,
        0,
        0,
        0,
        0,
        0,
        -1.770130769779930530,
        0,
        0,
        0,
        0,
        -0.946174695757560014,
        0,
        0,
        0,
        0,
        -0.946174695757560014,
        0,
        5.677048174545360108,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -2.007139630671867500,
        0,
        0,
        0,
        0,
        0,
        0,
        -2.007139630671867500,
        0,
        2.676186174229156671,
        0,
        0.317356640745612911,
        0,
        0,
        0.634713281491225822,
        0,
        -2.538853125964903290,
        0,
        0,
        0,
        0,
        0.317356640745612911,
        0,
        -2.538853125964903290,
        0,
        0.846284375321634430,
        0,
        0,
        -2.007139630671867500,
        0,
        0,
        0,
        0,
        -2.007139630671867500,
        0,
        2.676186174229156671,
        0,
        0,
        0,
        0,
        0,
        -0.473087347878780002,
        0,
        0,
        0,
        0,
        2.838524087272680054,
        0,
        0,
        0,
        0,
        0.473087347878780009,
        0,
        -2.838524087272680050,
        0,
        0,
        0,
        0,
        1.770130769779930531,
        0,
        0,
        0,
        0,
        -5.310392309339791590,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.625835735449176134,
        0,
        0,
        -3.755014412695056800,
        0,
        0,
        0,
        0,
        0,
        0,
        0.625835735449176134,
        0,
        0,
        0,
        0,
        0,
        3.281910284200850514,
        0,
        0,
        0,
        0,
        -6.563820568401701020,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.656382056840170102,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8.302649259524165115,
        0,
        0,
        0,
        0,
        0,
        0,
        -8.302649259524165110,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1.467714898305751160,
        0,
        0,
        0,
        0,
        -0.978476598870500779,
        0,
        11.741719186446009300,
        0,
        0,
        0,
        0,
        0,
        0,
        0.489238299435250387,
        0,
        -3.913906395482003100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -4.793536784973323750,
        0,
        0,
        0,
        0,
        0,
        0,
        -4.793536784973323750,
        0,
        9.587073569946647510,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.452946651195696921,
        0,
        0,
        0,
        0,
        0.905893302391393842,
        0,
        -5.435359814348363050,
        0,
        0,
        0,
        0,
        0,
        0,
        0.452946651195696921,
        0,
        -5.435359814348363050,
        0,
        3.623573209565575370,
        0,
        0,
        0,
        1.754254836801353946,
        0,
        0,
        0,
        0,
        3.508509673602707893,
        0,
        -4.678012898136943850,
        0,
        0,
        0,
        0,
        0,
        0,
        1.754254836801353946,
        0,
        -4.678012898136943850,
        0,
        0.935602579627388771,
        0.452946651195696921,
        0,
        0,
        0.905893302391393842,
        0,
        -5.435359814348363050,
        0,
        0,
        0,
        0,
        0.452946651195696921,
        0,
        -5.435359814348363050,
        0,
        3.623573209565575370,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -2.396768392486661870,
        0,
        0,
        0,
        0,
        0,
        0,
        4.793536784973323755,
        0,
        0,
        0,
        0,
        0,
        0,
        2.396768392486661877,
        0,
        -4.793536784973323750,
        0,
        0,
        -0.489238299435250389,
        0,
        0,
        0.978476598870500775,
        0,
        3.913906395482003101,
        0,
        0,
        0,
        0,
        1.467714898305751163,
        0,
        -11.741719186446009300,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2.075662314881041278,
        0,
        0,
        0,
        0,
        -12.453973889286247600,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2.075662314881041278,
        0,
        0,
        0,
        0,
        0.656382056840170102,
        0,
        0,
        -6.563820568401701020,
        0,
        0,
        0,
        0,
        0,
        0,
        3.281910284200850514,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0, 4.0991046311514863, 0, 0, 0, 0, -13.6636821038382887, 0, 0, 0, 0, 0, 0, 0, 0, 4.0991046311514863, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 11.8330958111587634, 0, 0, 0, 0, 0, 0, -23.6661916223175268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.3666191622317525, 0, 0, 0, 0, 0,
        0, -2.0182596029148963, 0, 0, 0, 0, 0, 0, 20.1825960291489679, 0, 0, 0, 0, 0, 0, 2.0182596029148963, 0, -20.1825960291489679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -8.2908473356343109, 0, 0, 0, 0, 0, 0, -5.5272315570895412, 0, 22.1089262283581647, 0, 0, 0, 0, 0, 0, 0, 0, 2.7636157785447706, 0, -7.3696420761193888, 0, 0, 0,
        0, 0.9212052595149236, 0, 0, 0, 0, 1.8424105190298472, 0, -14.7392841522387776, 0, 0, 0, 0, 0, 0, 0.9212052595149236, 0, -14.7392841522387776, 0, 14.7392841522387776, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 2.9131068125936568, 0, 0, 0, 0, 0, 0, 5.8262136251873136, 0, -11.6524272503746271, 0, 0, 0, 0, 0, 0, 0, 0, 2.9131068125936568, 0, -11.6524272503746271, 0, 4.6609709001498505, 0,
        -0.3178460113381421, 0, 0, -0.9535380340144264, 0, 5.7212282040865583, 0, 0, 0, 0, -0.9535380340144264, 0, 11.4424564081731166, 0, -7.6283042721154111, 0, 0, 0, 0, 0, 0, -0.3178460113381421, 0, 5.7212282040865583, 0, -7.6283042721154111, 0, 1.0171072362820548,
        0, 0, 2.9131068125936568, 0, 0, 0, 0, 5.8262136251873136, 0, -11.6524272503746271, 0, 0, 0, 0, 0, 0, 2.9131068125936568, 0, -11.6524272503746271, 0, 4.6609709001498505, 0, 0, 0, 0, 0, 0, 0,
        0.4606026297574618, 0, 0, 0.4606026297574618, 0, -7.3696420761193888, 0, 0, 0, 0, -0.4606026297574618, 0, 0, 0, 7.3696420761193888, 0, 0, 0, 0, 0, 0, -0.4606026297574618, 0, 7.3696420761193888, 0, -7.3696420761193888, 0, 0,
        0, 0, -2.7636157785447706, 0, 0, 0, 0, 5.5272315570895412, 0, 7.3696420761193888, 0, 0, 0, 0, 0, 0, 8.2908473356343109, 0, -22.1089262283581647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5045649007287241, 0, 0, 2.5228245036436201, 0, 5.0456490072872420, 0, 0, 0, 0, 2.5228245036436201, 0, -30.2738940437234518, 0, 0, 0, 0, 0, 0, 0, 0, -0.5045649007287241, 0, 5.0456490072872420, 0, 0, 0, 0,
        0, 0, 2.3666191622317525, 0, 0, 0, 0, -23.6661916223175268, 0, 0, 0, 0, 0, 0, 0, 0, 11.8330958111587634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.6831841051919144, 0, 0, -10.2477615778787161, 0, 0, 0, 0, 0, 0, 10.2477615778787161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.6831841051919144, 0, 0, 0, 0, 0, 0,
        0, 4.9501391276721742, 0, 0, 0, 0, -24.7506956383608703, 0, 0, 0, 0, 0, 0, 0, 0, 14.8504173830165218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.7071627325245963, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 15.8757639708114002, 0, 0, 0, 0, 0, 0, -52.9192132360380043, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15.8757639708114002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -2.5945778936013020, 0, 0, 0, 0, 2.5945778936013020, 0, 31.1349347232156219, 0, 0, 0, 0, 0, 0, 4.6702402084823440, 0, -62.2698694464312439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5189155787202604, 0, 6.2269869446431247, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -12.4539738892862495, 0, 0, 0, 0, 0, 0, 0, 0, 41.5132462976208316, 0, 0, 0, 0, 0, 0, 0, 0, 12.4539738892862495, 0, -41.5132462976208316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1.4081304047606462, 0, 0, 0, 0, 2.3468840079344107, 0, -28.1626080952129243, 0, 0, 0, 0, 0, 0, 0.4693768015868821, 0, -18.7750720634752817, 0, 37.5501441269505705, 0, 0, 0, 0, 0, 0, 0, 0, -0.4693768015868821, 0, 9.3875360317376408, 0, -12.5167147089835229, 0, 0, 0,
        0, 0, 0, 0, 6.6379903866747414, 0, 0, 0, 0, 0, 0, 13.2759807733494828, 0, -35.4026153955986160, 0, 0, 0, 0, 0, 0, 0, 0, 6.6379903866747414, 0, -35.4026153955986160, 0, 21.2415692373591725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -0.4516580379125866, 0, 0, 0, 0, -1.3549741137377600, 0, 10.8397929099020782, 0, 0, 0, 0, 0, 0, -1.3549741137377600, 0, 21.6795858198041564, 0, -21.6795858198041564, 0, 0, 0, 0, 0, 0, 0, 0, -0.4516580379125866, 0, 10.8397929099020782, 0, -21.6795858198041564, 0, 5.7812228852811094, 0,
        0, 0, -2.3899496919201728, 0, 0, 0, 0, -7.1698490757605189, 0, 14.3396981515210360, 0, 0, 0, 0, 0, 0, -7.1698490757605189, 0, 28.6793963030420720, 0, -11.4717585212168292, 0, 0, 0, 0, 0, 0, 0, 0, -2.3899496919201728, 0, 14.3396981515210360, 0, -11.4717585212168292, 0, 1.0925484305920790,
        -0.4516580379125866, 0, 0, -1.3549741137377600, 0, 10.8397929099020782, 0, 0, 0, 0, -1.3549741137377600, 0, 21.6795858198041564, 0, -21.6795858198041564, 0, 0, 0, 0, 0, 0, -0.4516580379125866, 0, 10.8397929099020782, 0, -21.6795858198041564, 0, 5.7812228852811094, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3.3189951933373707, 0, 0, 0, 0, 3.3189951933373707, 0, -17.7013076977993080, 0, 0, 0, 0, 0, 0, -3.3189951933373707, 0, 0, 0, 10.6207846186795862, 0, 0, 0, 0, 0, 0, 0, 0, -3.3189951933373707, 0, 17.7013076977993080, 0, -10.6207846186795862, 0, 0,
        0.4693768015868821, 0, 0, -0.4693768015868821, 0, -9.3875360317376408, 0, 0, 0, 0, -2.3468840079344107, 0, 18.7750720634752817, 0, 12.5167147089835229, 0, 0, 0, 0, 0, 0, -1.4081304047606462, 0, 28.1626080952129243, 0, -37.5501441269505705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -3.1134934723215624, 0, 0, 0, 0, 15.5674673616078110, 0, 10.3783115744052079, 0, 0, 0, 0, 0, 0, 15.5674673616078110, 0, -62.2698694464312439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.1134934723215624, 0, 10.3783115744052079, 0, 0, 0, 0,
        -0.5189155787202604, 0, 0, 4.6702402084823440, 0, 6.2269869446431247, 0, 0, 0, 0, 2.5945778936013020, 0, -62.2698694464312439, 0, 0, 0, 0, 0, 0, 0, 0, -2.5945778936013020, 0, 31.1349347232156219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2.6459606618019000, 0, 0, 0, 0, -39.6894099270284997, 0, 0, 0, 0, 0, 0, 0, 0, 39.6894099270284997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.6459606618019000, 0, 0, 0, 0, 0, 0,
        0.7071627325245963, 0, 0, -14.8504173830165218, 0, 0, 0, 0, 0, 0, 24.7506956383608703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.9501391276721742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 5.83141328139864, 0, 0, 0, 0, -40.81989296979048, 0, 0, 0, 0, 0, 0, 0, 0, 40.81989296979048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.83141328139864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 20.40994648489524, 0, 0, 0, 0, 0, 0, -102.0497324244762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61.22983945468572, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.91570664069932, 0, 0, 0, 0, 0, 0, 0,
        0, -3.193996596357255, 0, 0, 0, 0, 7.452658724833595, 0, 44.71595234900157, 0, 0, 0, 0, 0, 0, 7.452658724833595, 0, -149.0531744966719, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.193996596357255, 0, 44.71595234900157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -17.24955311049054, 0, 0, 0, 0, 0, 0, 17.24955311049054, 0, 68.99821244196217, 0, 0, 0, 0, 0, 0, 0, 0, 31.04919559888297, 0, -137.9964248839243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.449910622098108, 0, 13.79964248839243, 0, 0, 0, 0, 0,
        0, 1.913666099037323, 0, 0, 0, 0, 1.913666099037323, 0, -45.92798637689575, 0, 0, 0, 0, 0, 0, -1.913666099037323, 0, 0, 0, 76.54664396149292, 0, 0, 0, 0, 0, 0, 0, 0, -1.913666099037323, 0, 45.92798637689575, 0, -76.54664396149292, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 11.1173953976599, 0, 0, 0, 0, 0, 0, 18.52899232943316, 0, -74.11596931773265, 0, 0, 0, 0, 0, 0, 0, 0, 3.705798465886632, 0, -49.41064621182176, 0, 59.29277545418611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.705798465886632, 0, 24.70532310591088, 0, -19.7642584847287, 0, 0, 0,
        0, -0.9123045168698189, 0, 0, 0, 0, -2.736913550609457, 0, 27.36913550609457, 0, 0, 0, 0, 0, 0, -2.736913550609457, 0, 54.73827101218914, 0, -72.98436134958553, 0, 0, 0, 0, 0, 0, 0, 0, -0.9123045168698189, 0, 27.36913550609457, 0, -72.98436134958553, 0, 29.19374453983421, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -3.8164436064573, 0, 0, 0, 0, 0, 0, -11.4493308193719, 0, 30.5315488516584, 0, 0, 0, 0, 0, 0, 0, 0, -11.4493308193719, 0, 61.06309770331679, 0, -36.63785862199007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.8164436064573, 0, 30.5315488516584, 0, -36.63785862199007, 0, 6.978639737521918, 0,
        0.3180369672047749, 0, 0, 1.272147868819099, 0, -10.1771829505528, 0, 0, 0, 0, 1.908221803228649, 0, -30.53154885165839, 0, 30.53154885165839, 0, 0, 0, 0, 0, 0, 1.272147868819099, 0, -30.53154885165839, 0, 61.06309770331677, 0, -16.28349272088447, 0, 0, 0, 0, 0, 0, 0, 0, 0.3180369672047749, 0, -10.1771829505528, 0, 30.53154885165839, 0, -16.28349272088447, 0, 1.16310662292032,
        0, 0, -3.8164436064573, 0, 0, 0, 0, -11.4493308193719, 0, 30.5315488516584, 0, 0, 0, 0, 0, 0, -11.4493308193719, 0, 61.06309770331679, 0, -36.63785862199007, 0, 0, 0, 0, 0, 0, 0, 0, -3.8164436064573, 0, 30.5315488516584, 0, -36.63785862199007, 0, 6.978639737521918, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.4561522584349095, 0, 0, -0.9123045168698189, 0, 13.68456775304729, 0, 0, 0, 0, 0, 0, 13.68456775304729, 0, -36.49218067479276, 0, 0, 0, 0, 0, 0, 0.9123045168698189, 0, -13.68456775304729, 0, 0, 0, 14.5968722699171, 0, 0, 0, 0, 0, 0, 0, 0, 0.4561522584349095, 0, -13.68456775304729, 0, 36.49218067479276, 0, -14.5968722699171, 0, 0,
        0, 0, 3.705798465886632, 0, 0, 0, 0, -3.705798465886632, 0, -24.70532310591088, 0, 0, 0, 0, 0, 0, -18.52899232943316, 0, 49.41064621182176, 0, 19.7642584847287, 0, 0, 0, 0, 0, 0, 0, 0, -11.1173953976599, 0, 74.11596931773265, 0, -59.29277545418611, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.4784165247593308, 0, 0, -1.913666099037323, 0, -11.48199659422394, 0, 0, 0, 0, -4.784165247593307, 0, 57.40998297111968, 0, 19.13666099037323, 0, 0, 0, 0, 0, 0, -1.913666099037323, 0, 57.40998297111968, 0, -114.8199659422394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4784165247593308, 0, -11.48199659422394, 0, 19.13666099037323, 0, 0, 0, 0,
        0, 0, -3.449910622098108, 0, 0, 0, 0, 31.04919559888297, 0, 13.79964248839243, 0, 0, 0, 0, 0, 0, 17.24955311049054, 0, -137.9964248839243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17.24955311049054, 0, 68.99821244196217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5323327660595425, 0, 0, 7.452658724833595, 0, 7.452658724833595, 0, 0, 0, 0, 0, 0, -111.7898808725039, 0, 0, 0, 0, 0, 0, 0, 0, -7.452658724833595, 0, 111.7898808725039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5323327660595425, 0, -7.452658724833595, 0, 0, 0, 0, 0, 0,
        0, 0, 2.91570664069932, 0, 0, 0, 0, -61.22983945468572, 0, 0, 0, 0, 0, 0, 0, 0, 102.0497324244762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20.40994648489524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.72892666017483, 0, 0, -20.40994648489524, 0, 0, 0, 0, 0, 0, 51.0248662122381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20.40994648489524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.72892666017483, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 9 ;; don't ever have angular momentum > 5 ;; decreased from 80KB to 8kb on every tile.
        /*0, 6.740108566678694, 0, 0, 0, 0, -62.9076799556678, 0, 0, 0, 0, 0, 0, 0, 0, 94.36151993350171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26.96043426671477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7489009518531882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 25.41854119163758, 0, 0, 0, 0, 0, 0, -177.9297883414631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177.9297883414631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25.41854119163758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -3.814338369408373, 0, 0, 0, 0, 15.25735347763349, 0, 61.02941391053396, 0, 0, 0, 0, 0, 0, 7.628676738816745, 0, -305.1470695526698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.89810962688107, 0, 183.0882417316019, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5449054813440533, 0, -8.718487701504852, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -22.65129549625621, 0, 0, 0, 0, 0, 0, 52.85302282459782, 0, 105.7060456491956, 0, 0, 0, 0, 0, 0, 0, 0, 52.85302282459782, 0, -352.3534854973187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22.65129549625621, 0, 105.7060456491956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 2.436891395195093, 0, 0, 0, 0, 0, 0, -68.23295906546261, 0, 0, 0, 0, 0, 0, -6.82329590654626, 0, 68.23295906546261, 0, 136.4659181309252, 0, 0, 0, 0, 0, 0, 0, 0, -3.899026232312149, 0, 122.8193263178327, 0, -272.9318362618504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4873782790390186, 0, -13.64659181309252, 0, 27.29318362618504, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 16.31079695491669, 0, 0, 0, 0, 0, 0, 16.31079695491669, 0, -130.4863756393335, 0, 0, 0, 0, 0, 0, 0, 0, -16.31079695491669, 0, 0, 0, 130.4863756393335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16.31079695491669, 0, 130.4863756393335, 0, -130.4863756393335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -1.385125560048583, 0, 0, 0, 0, -3.693668160129556, 0, 49.864520161749, 0, 0, 0, 0, 0, 0, -2.770251120097167, 0, 83.107533602915, 0, -166.21506720583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.621506720583, 0, -110.8100448038867, 0, 88.64803584310934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4617085200161945, 0, -16.621506720583, 0, 55.40502240194333, 0, -29.54934528103645, 0, 0, 0,
        0, 0, 0, 0, -8.46325696792098, 0, 0, 0, 0, 0, 0, -25.38977090376294, 0, 84.63256967920979, 0, 0, 0, 0, 0, 0, 0, 0, -25.38977090376294, 0, 169.2651393584196, 0, -135.4121114867357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.46325696792098, 0, 84.63256967920979, 0, -135.4121114867357, 0, 38.68917471049591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0.451093112065591, 0, 0, 0, 0, 1.804372448262364, 0, -18.04372448262364, 0, 0, 0, 0, 0, 0, 2.706558672393546, 0, -54.13117344787092, 0, 72.17489793049457, 0, 0, 0, 0, 0, 0, 0, 0, 1.804372448262364, 0, -54.13117344787092, 0, 144.3497958609891, 0, -57.73991834439565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.451093112065591, 0, -18.04372448262364, 0, 72.17489793049457, 0, -57.73991834439565, 0, 8.248559763485094, 0,
        0, 0, 3.026024588281776, 0, 0, 0, 0, 12.1040983531271, 0, -32.27759560833895, 0, 0, 0, 0, 0, 0, 18.15614752969066, 0, -96.83278682501685, 0, 58.0996720950101, 0, 0, 0, 0, 0, 0, 0, 0, 12.1040983531271, 0, -96.83278682501685, 0, 116.1993441900202, 0, -22.1332084171467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.026024588281776, 0, -32.27759560833895, 0, 58.0996720950101, 0, -22.1332084171467, 0, 1.229622689841484,
        0.451093112065591, 0, 0, 1.804372448262364, 0, -18.04372448262364, 0, 0, 0, 0, 2.706558672393546, 0, -54.13117344787092, 0, 72.17489793049457, 0, 0, 0, 0, 0, 0, 1.804372448262364, 0, -54.13117344787092, 0, 144.3497958609891, 0, -57.73991834439565, 0, 0, 0, 0, 0, 0, 0, 0, 0.451093112065591, 0, -18.04372448262364, 0, 72.17489793049457, 0, -57.73991834439565, 0, 8.248559763485094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -4.23162848396049, 0, 0, 0, 0, -8.46325696792098, 0, 42.3162848396049, 0, 0, 0, 0, 0, 0, 0, 0, 42.3162848396049, 0, -67.70605574336784, 0, 0, 0, 0, 0, 0, 0, 0, 8.46325696792098, 0, -42.3162848396049, 0, 0, 0, 19.34458735524795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.23162848396049, 0, -42.3162848396049, 0, 67.70605574336784, 0, -19.34458735524795, 0, 0,
        -0.4617085200161945, 0, 0, 0, 0, 16.621506720583, 0, 0, 0, 0, 2.770251120097167, 0, -16.621506720583, 0, -55.40502240194333, 0, 0, 0, 0, 0, 0, 3.693668160129556, 0, -83.107533602915, 0, 110.8100448038867, 0, 29.54934528103645, 0, 0, 0, 0, 0, 0, 0, 0, 1.385125560048583, 0, -49.864520161749, 0, 166.21506720583, 0, -88.64803584310934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 4.077699238729173, 0, 0, 0, 0, -16.31079695491669, 0, -32.62159390983339, 0, 0, 0, 0, 0, 0, -40.77699238729173, 0, 163.1079695491669, 0, 32.62159390983339, 0, 0, 0, 0, 0, 0, 0, 0, -16.31079695491669, 0, 163.1079695491669, 0, -195.7295634590003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.077699238729173, 0, -32.62159390983339, 0, 32.62159390983339, 0, 0, 0, 0,
        0.4873782790390186, 0, 0, -3.899026232312149, 0, -13.64659181309252, 0, 0, 0, 0, -6.82329590654626, 0, 122.8193263178327, 0, 27.29318362618504, 0, 0, 0, 0, 0, 0, 0, 0, 68.23295906546261, 0, -272.9318362618504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.436891395195093, 0, -68.23295906546261, 0, 136.4659181309252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -3.775215916042701, 0, 0, 0, 0, 52.85302282459782, 0, 17.61767427486594, 0, 0, 0, 0, 0, 0, 0, 0, -264.2651141229891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52.85302282459782, 0, 264.2651141229891, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.775215916042701, 0, -17.61767427486594, 0, 0, 0, 0, 0, 0,
        -0.5449054813440533, 0, 0, 10.89810962688107, 0, 8.718487701504852, 0, 0, 0, 0, -7.628676738816745, 0, -183.0882417316019, 0, 0, 0, 0, 0, 0, 0, 0, -15.25735347763349, 0, 305.1470695526698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.814338369408373, 0, -61.02941391053396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3.177317648954698, 0, 0, 0, 0, -88.96489417073154, 0, 0, 0, 0, 0, 0, 0, 0, 222.4122354268289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88.96489417073154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.177317648954698, 0, 0, 0, 0, 0, 0, 0, 0,
        0.7489009518531882, 0, 0, -26.96043426671477, 0, 0, 0, 0, 0, 0, 94.36151993350171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62.9076799556678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.740108566678694, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 10
        0, 7.673951182219901, 0, 0, 0, 0, -92.08741418663881, 0, 0, 0, 0, 0, 0, 0, 0, 193.3835697919415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92.08741418663881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.673951182219901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 30.88705769902543, 0, 0, 0, 0, 0, 0, -288.2792051909041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 432.4188077863561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123.5482307961017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.431895299891715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -4.453815461763347, 0, 0, 0, 0, 26.72289277058008, 0, 80.16867831174027, 0, 0, 0, 0, 0, 0, 0, 0, -561.1807481821819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26.72289277058008, 0, 561.1807481821819, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.453815461763347, 0, -80.16867831174027, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -28.63763513582592, 0, 0, 0, 0, 0, 0, 114.5505405433037, 0, 152.7340540577382, 0, 0, 0, 0, 0, 0, 0, 0, 57.27527027165184, 0, -763.6702702886912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81.82181467378834, 0, 458.2021621732147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.091090733689417, 0, -21.81915057967689, 0, 0, 0, 0, 0, 0, 0,
        0, 2.976705744527138, 0, 0, 0, 0, -3.968940992702851, 0, -95.25458382486842, 0, 0, 0, 0, 0, 0, -13.89129347445998, 0, 222.2606955913596, 0, 222.2606955913597, 0, 0, 0, 0, 0, 0, 0, 0, -3.968940992702851, 0, 222.2606955913596, 0, -740.8689853045323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.976705744527138, 0, -95.25458382486842, 0, 222.2606955913597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 22.18705464592268, 0, 0, 0, 0, 0, 0, 0, 0, -207.0791766952783, 0, 0, 0, 0, 0, 0, 0, 0, -62.12375300858349, 0, 207.0791766952783, 0, 248.495012034334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35.49928743347628, 0, 372.742518051501, 0, -496.990024068668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.437410929184535, 0, -41.41583533905566, 0, 49.6990024068668, 0, 0, 0, 0, 0,
        0, -1.870976726712969, 0, 0, 0, 0, -3.741953453425937, 0, 78.58102252194469, 0, 0, 0, 0, 0, 0, 0, 0, 78.58102252194469, 0, -314.3240900877788, 0, 0, 0, 0, 0, 0, 0, 0, 3.741953453425937, 0, -78.58102252194469, 0, 0, 0, 209.5493933918525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.870976726712969, 0, -78.58102252194469, 0, 314.3240900877788, 0, -209.5493933918525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -13.89129347445998, 0, 0, 0, 0, 0, 0, -37.04344926522661, 0, 166.6955216935197, 0, 0, 0, 0, 0, 0, 0, 0, -27.78258694891996, 0, 277.8258694891996, 0, -333.3910433870395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55.56517389783991, 0, -222.2606955913596, 0, 127.0061117664912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.630431158153326, 0, -55.56517389783991, 0, 111.1303477956798, 0, -42.33537058883041, 0, 0, 0,
        0, 0.9081022627604556, 0, 0, 0, 0, 3.632409051041822, 0, -43.58890861250187, 0, 0, 0, 0, 0, 0, 5.448613576562733, 0, -130.7667258375056, 0, 217.9445430625093, 0, 0, 0, 0, 0, 0, 0, 0, 3.632409051041822, 0, -130.7667258375056, 0, 435.8890861250187, 0, -232.4741792666766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9081022627604556, 0, -43.58890861250187, 0, 217.9445430625093, 0, -232.4741792666766, 0, 49.815895557145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 4.718637772708116, 0, 0, 0, 0, 0, 0, 18.87455109083247, 0, -62.91517030277488, 0, 0, 0, 0, 0, 0, 0, 0, 28.3118266362487, 0, -188.7455109083247, 0, 150.9964087266597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.87455109083247, 0, -188.7455109083247, 0, 301.9928174533194, 0, -86.28366212951984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.718637772708116, 0, -62.91517030277488, 0, 150.9964087266597, 0, -86.28366212951984, 0, 9.587073569946648, 0,
        -0.3181304937373671, 0, 0, -1.590652468686835, 0, 15.90652468686835, 0, 0, 0, 0, -3.181304937373671, 0, 63.62609874747341, 0, -84.83479832996456, 0, 0, 0, 0, 0, 0, -3.181304937373671, 0, 95.43914812121012, 0, -254.5043949898937, 0, 101.8017579959575, 0, 0, 0, 0, 0, 0, 0, 0, -1.590652468686835, 0, 63.62609874747341, 0, -254.5043949898937, 0, 203.6035159919149, 0, -29.08621657027356, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.3181304937373671, 0, 15.90652468686835, 0, -84.83479832996456, 0, 101.8017579959575, 0, -29.08621657027356, 0, 1.292720736456603,
        0, 0, 4.718637772708116, 0, 0, 0, 0, 18.87455109083247, 0, -62.91517030277488, 0, 0, 0, 0, 0, 0, 28.3118266362487, 0, -188.7455109083247, 0, 150.9964087266597, 0, 0, 0, 0, 0, 0, 0, 0, 18.87455109083247, 0, -188.7455109083247, 0, 301.9928174533194, 0, -86.28366212951984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.718637772708116, 0, -62.91517030277488, 0, 150.9964087266597, 0, -86.28366212951984, 0, 9.587073569946648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.4540511313802278, 0, 0, 1.362153394140683, 0, -21.79445430625093, 0, 0, 0, 0, 0.9081022627604556, 0, -43.58890861250187, 0, 108.9722715312547, 0, 0, 0, 0, 0, 0, -0.9081022627604556, 0, 0, 0, 108.9722715312547, 0, -116.2370896333383, 0, 0, 0, 0, 0, 0, 0, 0, -1.362153394140683, 0, 43.58890861250187, 0, -108.9722715312547, 0, 0, 0, 24.9079477785725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4540511313802278, 0, 21.79445430625093, 0, -108.9722715312547, 0, 116.2370896333383, 0, -24.9079477785725, 0, 0,
        0, 0, -4.630431158153326, 0, 0, 0, 0, 0, 0, 55.56517389783991, 0, 0, 0, 0, 0, 0, 27.78258694891996, 0, -55.56517389783991, 0, -111.1303477956798, 0, 0, 0, 0, 0, 0, 0, 0, 37.04344926522661, 0, -277.8258694891996, 0, 222.2606955913596, 0, 42.33537058883041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.89129347445998, 0, -166.6955216935197, 0, 333.3910433870395, 0, -127.0061117664912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.4677441816782422, 0, 0, 1.403232545034726, 0, 19.64525563048617, 0, 0, 0, 0, 6.548418543495391, 0, -78.58102252194469, 0, -78.58102252194469, 0, 0, 0, 0, 0, 0, 6.548418543495391, 0, -196.4525563048617, 0, 392.9051126097235, 0, 52.38734834796313, 0, 0, 0, 0, 0, 0, 0, 0, 1.403232545034726, 0, -78.58102252194469, 0, 392.9051126097235, 0, -314.3240900877788, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4677441816782422, 0, 19.64525563048617, 0, -78.58102252194469, 0, 52.38734834796313, 0, 0, 0, 0,
        0, 0, 4.437410929184535, 0, 0, 0, 0, -35.49928743347628, 0, -41.41583533905566, 0, 0, 0, 0, 0, 0, -62.12375300858349, 0, 372.742518051501, 0, 49.6990024068668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207.0791766952783, 0, -496.990024068668, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22.18705464592268, 0, -207.0791766952783, 0, 248.495012034334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.4961176240878564, 0, 0, -6.449529113142133, 0, -15.8757639708114, 0, 0, 0, 0, -6.945646737229989, 0, 222.2606955913596, 0, 37.04344926522661, 0, 0, 0, 0, 0, 0, 6.945646737229989, 0, 0, 0, -555.6517389783992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.449529113142133, 0, -222.2606955913596, 0, 555.6517389783992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4961176240878564, 0, 15.8757639708114, 0, -37.04344926522661, 0, 0, 0, 0, 0, 0,
        0, 0, -4.091090733689417, 0, 0, 0, 0, 81.82181467378834, 0, 21.81915057967689, 0, 0, 0, 0, 0, 0, -57.27527027165184, 0, -458.2021621732147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114.5505405433037, 0, 763.6702702886912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28.63763513582592, 0, -152.7340540577382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5567269327204184, 0, 0, 15.0316271834513, 0, 10.02108478896753, 0, 0, 0, 0, -23.38253117425757, 0, -280.590374091091, 0, 0, 0, 0, 0, 0, 0, 0, -23.38253117425757, 0, 701.4759352277273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15.0316271834513, 0, -280.590374091091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5567269327204184, 0, 10.02108478896753, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3.431895299891715, 0, 0, 0, 0, -123.5482307961017, 0, 0, 0, 0, 0, 0, 0, 0, 432.4188077863561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -288.2792051909041, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30.88705769902543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.7673951182219901, 0, 0, -34.53278031998956, 0, 0, 0, 0, 0, 0, 161.1529748266179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -161.1529748266179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34.53278031998956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.7673951182219901, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 11
        0, 8.631063163659167, 0, 0, 0, 0, -129.4659474548875, 0, 0, 0, 0, 0, 0, 0, 0, 362.504652873685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -258.9318949097751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43.15531581829584, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.7846421057871971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 36.80297698805311, 0, 0, 0, 0, 0, 0, -441.6357238566373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 927.4350200989384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -441.6357238566373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36.80297698805311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -5.110940374050938, 0, 0, 0, 0, 42.59116978375781, 0, 102.2188074810188, 0, 0, 0, 0, 0, 0, -23.85105507890438, 0, -954.0422031561751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51.10940374050938, 0, 1431.063304734263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.87587923242031, 0, -408.875229924075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5678822637834375, 0, 11.35764527566875, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -35.19037680383713, 0, 0, 0, 0, 0, 0, 211.1422608230228, 0, 211.1422608230228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1477.995825761159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -211.1422608230228, 0, 1477.995825761159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35.19037680383713, 0, -211.1422608230228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3.532036427339827, 0, 0, 0, 0, -10.59610928201948, 0, -127.1533113842337, 0, 0, 0, 0, 0, 0, -21.19221856403896, 0, 508.613245536935, 0, 339.0754970246234, 0, 0, 0, 0, 0, 0, 0, 0, 3.027459794862709, 0, 254.3066227684675, 0, -1695.377485123117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.586956017065244, 0, -363.295175383525, 0, 1017.22649107387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5045766324771181, 0, 18.16475876917625, 0, -48.43935671780334, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 28.72100542905686, 0, 0, 0, 0, 0, 0, -38.29467390540915, 0, -306.3573912432732, 0, 0, 0, 0, 0, 0, 0, 0, -134.031358668932, 0, 714.8339129009709, 0, 428.9003477405824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38.29467390540915, 0, 714.8339129009709, 0, -1429.667825801941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28.72100542905686, 0, -306.3573912432732, 0, 428.9003477405824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -2.369836079783365, 0, 0, 0, 0, -2.369836079783365, 0, 113.7521318296015, 0, 0, 0, 0, 0, 0, 6.63554102339342, 0, 0, 0, -530.8432818714737, 0, 0, 0, 0, 0, 0, 0, 0, 10.4272787510468, 0, -318.5059691228842, 0, 530.8432818714737, 0, 424.674625497179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.31777051169671, 0, -182.0034109273624, 0, 955.5179073686526, 0, -849.349250994358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4739672159566729, 0, 22.7504263659203, 0, -106.1686563742947, 0, 84.9349250994358, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -20.06399012830402, 0, 0, 0, 0, 0, 0, -40.12798025660804, 0, 280.8958617962563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280.8958617962563, 0, -674.150068311015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40.12798025660804, 0, -280.8958617962563, 0, 0, 0, 321.0238420528643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.06399012830402, 0, -280.8958617962563, 0, 674.150068311015, 0, -321.0238420528643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1.373687498354136, 0, 0, 0, 0, 5.036854160631831, 0, -76.92649990783158, 0, 0, 0, 0, 0, 0, 6.410541658985967, 0, -205.1373330875509, 0, 461.5589994469895, 0, 0, 0, 0, 0, 0, 0, 0, 2.747374996708271, 0, -153.8529998156632, 0, 769.2649990783159, 0, -615.4119992626527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4578958327847119, 0, 0, 0, 153.8529998156632, 0, -410.2746661751018, 0, 175.8319997893294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4578958327847119, 0, 25.64216663594386, 0, -153.8529998156632, 0, 205.1373330875509, 0, -58.61066659644312, 0, 0, 0,
        0, 0, 0, 0, 10.27973595067153, 0, 0, 0, 0, 0, 0, 41.11894380268614, 0, -164.4757752107446, 0, 0, 0, 0, 0, 0, 0, 0, 61.67841570402921, 0, -493.4273256322336, 0, 493.4273256322337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41.11894380268614, 0, -493.4273256322336, 0, 986.8546512644674, 0, -375.9446290531304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.27973595067153, 0, -164.4757752107446, 0, 493.4273256322337, 0, -375.9446290531304, 0, 62.65743817552173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -0.4507962425947618, 0, 0, 0, 0, -2.253981212973809, 0, 27.04777455568571, 0, 0, 0, 0, 0, 0, -4.507962425947618, 0, 108.1910982227429, 0, -180.3184970379047, 0, 0, 0, 0, 0, 0, 0, 0, -4.507962425947618, 0, 162.2866473341143, 0, -540.9554911137142, 0, 288.5095952606476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.253981212973809, 0, 108.1910982227429, 0, -540.9554911137142, 0, 577.0191905212952, 0, -123.6469693974204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4507962425947618, 0, 27.04777455568571, 0, -180.3184970379047, 0, 288.5095952606476, 0, -123.6469693974204, 0, 10.99084172421515, 0,
        0, 0, -3.662285987505434, 0, 0, 0, 0, -18.31142993752717, 0, 61.03809979175723, 0, 0, 0, 0, 0, 0, -36.62285987505434, 0, 244.1523991670289, 0, -195.3219193336232, 0, 0, 0, 0, 0, 0, 0, 0, -36.62285987505434, 0, 366.2285987505434, 0, -585.9657580008695, 0, 167.4187880002484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18.31142993752717, 0, 244.1523991670289, 0, -585.9657580008695, 0, 334.8375760004968, 0, -37.20417511116631, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.662285987505434, 0, 61.03809979175723, 0, -195.3219193336232, 0, 167.4187880002484, 0, -37.20417511116631, 0, 1.352879094951502,
        -0.4507962425947618, 0, 0, -2.253981212973809, 0, 27.04777455568571, 0, 0, 0, 0, -4.507962425947618, 0, 108.1910982227429, 0, -180.3184970379047, 0, 0, 0, 0, 0, 0, -4.507962425947618, 0, 162.2866473341143, 0, -540.9554911137142, 0, 288.5095952606476, 0, 0, 0, 0, 0, 0, 0, 0, -2.253981212973809, 0, 108.1910982227429, 0, -540.9554911137142, 0, 577.0191905212952, 0, -123.6469693974204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4507962425947618, 0, 27.04777455568571, 0, -180.3184970379047, 0, 288.5095952606476, 0, -123.6469693974204, 0, 10.99084172421515, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 5.139867975335767, 0, 0, 0, 0, 15.4196039260073, 0, -82.23788760537228, 0, 0, 0, 0, 0, 0, 10.27973595067153, 0, -164.4757752107446, 0, 246.7136628161169, 0, 0, 0, 0, 0, 0, 0, 0, -10.27973595067153, 0, 0, 0, 246.7136628161169, 0, -187.9723145265652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15.4196039260073, 0, 164.4757752107446, 0, -246.7136628161169, 0, 0, 0, 31.32871908776087, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.139867975335767, 0, 82.23788760537228, 0, -246.7136628161169, 0, 187.9723145265652, 0, -31.32871908776087, 0, 0,
        0.4578958327847119, 0, 0, 0.4578958327847119, 0, -25.64216663594386, 0, 0, 0, 0, -2.747374996708271, 0, 0, 0, 153.8529998156632, 0, 0, 0, 0, 0, 0, -6.410541658985967, 0, 153.8529998156632, 0, -153.8529998156632, 0, -205.1373330875509, 0, 0, 0, 0, 0, 0, 0, 0, -5.036854160631831, 0, 205.1373330875509, 0, -769.2649990783159, 0, 410.2746661751018, 0, 58.61066659644312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.373687498354136, 0, 76.92649990783158, 0, -461.5589994469895, 0, 615.4119992626527, 0, -175.8319997893294, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -5.015997532076005, 0, 0, 0, 0, 15.04799259622802, 0, 70.22396544906408, 0, 0, 0, 0, 0, 0, 70.22396544906407, 0, -280.8958617962563, 0, -168.5375170777538, 0, 0, 0, 0, 0, 0, 0, 0, 70.22396544906407, 0, -702.2396544906408, 0, 842.6875853887689, 0, 80.25596051321608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15.04799259622802, 0, -280.8958617962563, 0, 842.6875853887689, 0, -481.5357630792965, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.015997532076005, 0, 70.22396544906408, 0, -168.5375170777538, 0, 80.25596051321608, 0, 0, 0, 0,
        -0.4739672159566729, 0, 0, 3.31777051169671, 0, 22.7504263659203, 0, 0, 0, 0, 10.4272787510468, 0, -182.0034109273624, 0, -106.1686563742947, 0, 0, 0, 0, 0, 0, 6.63554102339342, 0, -318.5059691228842, 0, 955.5179073686526, 0, 84.9349250994358, 0, 0, 0, 0, 0, 0, 0, 0, -2.369836079783365, 0, 0, 0, 530.8432818714737, 0, -849.349250994358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.369836079783365, 0, 113.7521318296015, 0, -530.8432818714737, 0, 424.674625497179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 4.786834238176144, 0, 0, 0, 0, -62.22884509628987, 0, -51.0595652072122, 0, 0, 0, 0, 0, 0, -67.01567933446601, 0, 714.8339129009709, 0, 71.48339129009707, 0, 0, 0, 0, 0, 0, 0, 0, 67.01567933446601, 0, 0, 0, -1072.250869351456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62.22884509628987, 0, -714.8339129009709, 0, 1072.250869351456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.786834238176144, 0, 51.0595652072122, 0, -71.48339129009707, 0, 0, 0, 0, 0, 0,
        0.5045766324771181, 0, 0, -9.586956017065244, 0, -18.16475876917625, 0, 0, 0, 0, -3.027459794862709, 0, 363.295175383525, 0, 48.43935671780334, 0, 0, 0, 0, 0, 0, 21.19221856403896, 0, -254.3066227684675, 0, -1017.22649107387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.59610928201948, 0, -508.613245536935, 0, 1695.377485123117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.532036427339827, 0, 127.1533113842337, 0, -339.0754970246234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -4.398797100479641, 0, 0, 0, 0, 118.7675217129503, 0, 26.39278260287784, 0, 0, 0, 0, 0, 0, -184.7494782201449, 0, -738.9979128805796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184.7494782201449, 0, 1847.494782201449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118.7675217129503, 0, -738.9979128805796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.398797100479641, 0, 26.39278260287784, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5678822637834375, 0, 0, 19.87587923242031, 0, 11.35764527566875, 0, 0, 0, 0, -51.10940374050938, 0, -408.875229924075, 0, 0, 0, 0, 0, 0, 0, 0, -23.85105507890438, 0, 1431.063304734263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42.59116978375781, 0, -954.0422031561751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.110940374050938, 0, 102.2188074810188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3.680297698805311, 0, 0, 0, 0, -165.613396446239, 0, 0, 0, 0, 0, 0, 0, 0, 772.8625167491152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -772.8625167491152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165.613396446239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.680297698805311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.7846421057871971, 0, 0, -43.15531581829584, 0, 0, 0, 0, 0, 0, 258.9318949097751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -362.504652873685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129.4659474548875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.631063163659167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 12
        0, 9.609863949407661, 0, 0, 0, 0, -176.1808390724738, 0, 0, 0, 0, 0, 0, 0, 0, 634.2510206609056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -634.2510206609056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176.1808390724738, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.609863949407661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 43.15531581829583, 0, 0, 0, 0, 0, 0, -647.3297372744373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1812.523264368425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1294.659474548875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 215.7765790914791, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.923210528935984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -5.784458347938102, 0, 0, 0, 0, 63.62904182731912, 0, 127.2580836546383, 0, 0, 0, 0, 0, 0, -76.35485019278295, 0, -1527.097003855659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76.35485019278295, 0, 3206.903708096884, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63.62904182731912, 0, -1527.097003855659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.784458347938102, 0, 127.2580836546383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -42.2938455917996, 0, 0, 0, 0, 0, 0, 352.4487132649967, 0, 281.9589706119974, 0, 0, 0, 0, 0, 0, 0, 0, -197.3712794283981, 0, -2631.617059045309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -422.938455917996, 0, 3947.425588567963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164.4760661903318, 0, -1127.835882447989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.699316176866622, 0, 31.32877451244415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4.101899446670816, 0, 0, 0, 0, -20.50949723335408, 0, -164.0759778668327, 0, 0, 0, 0, 0, 0, -24.6113966800249, 0, 984.455867200996, 0, 492.2279336004979, 0, 0, 0, 0, 0, 0, 0, 0, 24.6113966800249, 0, 0, 0, -3445.595535203485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.50949723335408, 0, -984.455867200996, 0, 3445.595535203485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.101899446670816, 0, 164.0759778668327, 0, -492.2279336004979, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 35.89162015836965, 0, 0, 0, 0, 0, 0, -107.6748604751089, 0, -430.6994419004357, 0, 0, 0, 0, 0, 0, 0, 0, -215.3497209502179, 0, 1722.797767601743, 0, 689.1191070406971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30.76424585003112, 0, 861.3988838008713, 0, -3445.595535203485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97.42011185843189, 0, -1230.569834001245, 0, 2067.357321122091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.127374308338521, 0, 61.52849170006224, 0, -98.44558672009958, 0, 0, 0, 0, 0, 0, 0,
        0, -2.881335616715016, 0, 0, 0, 0, 0.9604452055716719, 0, 155.5921233026108, 0, 0, 0, 0, 0, 0, 17.28801370029009, 0, -207.4561644034811, 0, -829.8246576139245, 0, 0, 0, 0, 0, 0, 0, 0, 17.28801370029009, 0, -726.0965754121839, 0, 1936.257534432491, 0, 774.5030137729962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9604452055716719, 0, -207.4561644034811, 0, 1936.257534432491, 0, -2581.676712576654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.881335616715016, 0, 155.5921233026108, 0, -829.8246576139245, 0, 774.5030137729962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -26.95242673514147, 0, 0, 0, 0, 0, 0, -26.95242673514147, 0, 431.2388277622634, 0, 0, 0, 0, 0, 0, 0, 0, 75.4667948583961, 0, 0, 0, -1207.468717734338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118.5906776346225, 0, -1207.468717734338, 0, 1207.468717734338, 0, 689.9821244196215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37.73339742919805, 0, -689.9821244196215, 0, 2173.443691921808, 0, -1379.964248839243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.390485347028293, 0, 86.24776555245269, 0, -241.4937435468676, 0, 137.9964248839243, 0, 0, 0, 0, 0,
        0, 1.848921220493557, 0, 0, 0, 0, 5.54676366148067, 0, -118.3309581115876, 0, 0, 0, 0, 0, 0, 3.697842440987113, 0, -236.6619162231752, 0, 828.3167067811135, 0, 0, 0, 0, 0, 0, 0, 0, -3.697842440987113, 0, 0, 0, 828.3167067811135, 0, -1325.306730849781, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.54676366148067, 0, 236.6619162231752, 0, -828.3167067811135, 0, 0, 0, 473.3238324463505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.848921220493557, 0, 118.3309581115876, 0, -828.3167067811135, 0, 1325.306730849781, 0, -473.3238324463505, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 16.64029098444201, 0, 0, 0, 0, 0, 0, 61.01440027628737, 0, -310.6187650429175, 0, 0, 0, 0, 0, 0, 0, 0, 77.65469126072938, 0, -828.3167067811133, 0, 1118.227554154503, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33.28058196888402, 0, -621.237530085835, 0, 1863.712590257505, 0, -1064.978623004289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.54676366148067, 0, 0, 0, 372.742518051501, 0, -709.9857486695257, 0, 236.6619162231752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.54676366148067, 0, 103.5395883476392, 0, -372.742518051501, 0, 354.9928743347629, 0, -78.88730540772508, 0, 0, 0,
        0, -0.9057827129626244, 0, 0, 0, 0, -4.528913564813122, 0, 63.4047899073837, 0, 0, 0, 0, 0, 0, -9.057827129626244, 0, 253.6191596295348, 0, -507.2383192590696, 0, 0, 0, 0, 0, 0, 0, 0, -9.057827129626244, 0, 380.4287394443022, 0, -1521.714957777209, 0, 1014.476638518139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.528913564813122, 0, 253.6191596295348, 0, -1521.714957777209, 0, 2028.953277036278, 0, -579.7009362960796, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.9057827129626244, 0, 63.4047899073837, 0, -507.2383192590696, 0, 1014.476638518139, 0, -579.7009362960796, 0, 77.2934581728106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -5.620233931023189, 0, 0, 0, 0, 0, 0, -28.10116965511595, 0, 112.4046786204638, 0, 0, 0, 0, 0, 0, 0, 0, -56.20233931023189, 0, 449.6187144818551, 0, -449.6187144818551, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56.20233931023189, 0, 674.4280717227828, 0, -1348.856143445566, 0, 513.8499594078344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28.10116965511595, 0, 449.6187144818551, 0, -1348.856143445566, 0, 1027.699918815669, 0, -171.2833198026115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.620233931023189, 0, 112.4046786204638, 0, -449.6187144818551, 0, 513.8499594078344, 0, -171.2833198026115, 0, 12.4569687129172, 0,
        0.318183090330888, 0, 0, 1.909098541985328, 0, -22.90918250382393, 0, 0, 0, 0, 4.77274635496332, 0, -114.5459125191197, 0, 190.9098541985328, 0, 0, 0, 0, 0, 0, 6.36366180661776, 0, -229.0918250382393, 0, 763.6394167941311, 0, -407.2743556235366, 0, 0, 0, 0, 0, 0, 0, 0, 4.77274635496332, 0, -229.0918250382393, 0, 1145.459125191197, 0, -1221.82306687061, 0, 261.8192286151307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.909098541985328, 0, -114.5459125191197, 0, 763.6394167941311, 0, -1221.82306687061, 0, 523.6384572302613, 0, -46.5456406426899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.318183090330888, 0, -22.90918250382393, 0, 190.9098541985328, 0, -407.2743556235366, 0, 261.8192286151307, 0, -46.5456406426899, 0, 1.410473958869391,
        0, 0, -5.620233931023189, 0, 0, 0, 0, -28.10116965511595, 0, 112.4046786204638, 0, 0, 0, 0, 0, 0, -56.20233931023189, 0, 449.6187144818551, 0, -449.6187144818551, 0, 0, 0, 0, 0, 0, 0, 0, -56.20233931023189, 0, 674.4280717227828, 0, -1348.856143445566, 0, 513.8499594078344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28.10116965511595, 0, 449.6187144818551, 0, -1348.856143445566, 0, 1027.699918815669, 0, -171.2833198026115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.620233931023189, 0, 112.4046786204638, 0, -449.6187144818551, 0, 513.8499594078344, 0, -171.2833198026115, 0, 12.4569687129172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.4528913564813122, 0, 0, -1.811565425925249, 0, 31.70239495369185, 0, 0, 0, 0, -2.264456782406561, 0, 95.10718486107555, 0, -253.6191596295348, 0, 0, 0, 0, 0, 0, 0, 0, 63.4047899073837, 0, -507.2383192590696, 0, 507.2383192590696, 0, 0, 0, 0, 0, 0, 0, 0, 2.264456782406561, 0, -63.4047899073837, 0, 0, 0, 507.2383192590696, 0, -289.8504681480398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.811565425925249, 0, -95.10718486107555, 0, 507.2383192590696, 0, -507.2383192590696, 0, 0, 0, 38.6467290864053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4528913564813122, 0, -31.70239495369185, 0, 253.6191596295348, 0, -507.2383192590696, 0, 289.8504681480398, 0, -38.6467290864053, 0, 0,
        0, 0, 5.54676366148067, 0, 0, 0, 0, 5.54676366148067, 0, -103.5395883476392, 0, 0, 0, 0, 0, 0, -33.28058196888402, 0, 0, 0, 372.742518051501, 0, 0, 0, 0, 0, 0, 0, 0, -77.65469126072938, 0, 621.237530085835, 0, -372.742518051501, 0, -354.9928743347629, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61.01440027628737, 0, 828.3167067811133, 0, -1863.712590257505, 0, 709.9857486695257, 0, 78.88730540772508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16.64029098444201, 0, 310.6187650429175, 0, -1118.227554154503, 0, 1064.978623004289, 0, -236.6619162231752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.4622303051233891, 0, 0, -0.9244606102467783, 0, -29.5827395278969, 0, 0, 0, 0, -7.857915187097616, 0, 88.74821858369071, 0, 207.0791766952784, 0, 0, 0, 0, 0, 0, -12.9424485434549, 0, 414.1583533905567, 0, -828.3167067811135, 0, -331.3266827124453, 0, 0, 0, 0, 0, 0, 0, 0, -7.857915187097616, 0, 414.1583533905567, 0, -2070.791766952784, 0, 1656.633413562227, 0, 118.3309581115876, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.9244606102467783, 0, 88.74821858369071, 0, -828.3167067811135, 0, 1656.633413562227, 0, -709.9857486695257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4622303051233891, 0, -29.5827395278969, 0, 207.0791766952784, 0, -331.3266827124453, 0, 118.3309581115876, 0, 0, 0, 0,
        0, 0, -5.390485347028293, 0, 0, 0, 0, 37.73339742919805, 0, 86.24776555245269, 0, 0, 0, 0, 0, 0, 118.5906776346225, 0, -689.9821244196215, 0, -241.4937435468676, 0, 0, 0, 0, 0, 0, 0, 0, 75.4667948583961, 0, -1207.468717734338, 0, 2173.443691921808, 0, 137.9964248839243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26.95242673514147, 0, 0, 0, 1207.468717734338, 0, -1379.964248839243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26.95242673514147, 0, 431.2388277622634, 0, -1207.468717734338, 0, 689.9821244196215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.480222602785836, 0, 0, 5.762671233430032, 0, 25.93202055043514, 0, 0, 0, 0, 12.96601027521757, 0, -337.1162671556568, 0, -138.3041096023208, 0, 0, 0, 0, 0, 0, 0, 0, -363.048287706092, 0, 1936.257534432491, 0, 129.0838356288327, 0, 0, 0, 0, 0, 0, 0, 0, -12.96601027521757, 0, 363.048287706092, 0, 0, 0, -1936.257534432491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.762671233430032, 0, 337.1162671556568, 0, -1936.257534432491, 0, 1936.257534432491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.480222602785836, 0, -25.93202055043514, 0, 138.3041096023208, 0, -129.0838356288327, 0, 0, 0, 0, 0, 0,
        0, 0, 5.127374308338521, 0, 0, 0, 0, -97.42011185843189, 0, -61.52849170006224, 0, 0, 0, 0, 0, 0, -30.76424585003112, 0, 1230.569834001245, 0, 98.44558672009958, 0, 0, 0, 0, 0, 0, 0, 0, 215.3497209502179, 0, -861.3988838008713, 0, -2067.357321122091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107.6748604751089, 0, -1722.797767601743, 0, 3445.595535203485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -35.89162015836965, 0, 430.6994419004357, 0, -689.1191070406971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.512737430833852, 0, 0, -13.33117320168015, 0, -20.50949723335408, 0, 0, 0, 0, 7.691061462507781, 0, 553.7564253005602, 0, 61.52849170006224, 0, 0, 0, 0, 0, 0, 43.06994419004357, 0, -861.3988838008714, 0, -1722.797767601743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.691061462507781, 0, -861.3988838008714, 0, 4306.994419004357, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13.33117320168015, 0, 553.7564253005602, 0, -1722.797767601743, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.512737430833852, 0, -20.50949723335408, 0, 61.52849170006224, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -4.699316176866622, 0, 0, 0, 0, 164.4760661903318, 0, 31.32877451244415, 0, 0, 0, 0, 0, 0, -422.938455917996, 0, -1127.835882447989, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197.3712794283981, 0, 3947.425588567963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 352.4487132649967, 0, -2631.617059045309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42.2938455917996, 0, 281.9589706119974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5784458347938102, 0, 0, 25.45161673092765, 0, 12.72580836546383, 0, 0, 0, 0, -95.44356274097868, 0, -572.6613764458722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2672.419756747403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95.44356274097868, 0, -2672.419756747403, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25.45161673092765, 0, 572.6613764458722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5784458347938102, 0, -12.72580836546383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 3.923210528935984, 0, 0, 0, 0, -215.7765790914791, 0, 0, 0, 0, 0, 0, 0, 0, 1294.659474548875, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1812.523264368425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 647.3297372744373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43.15531581829583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.8008219957839717, 0, 0, -52.85425172174213, 0, 0, 0, 0, 0, 0, 396.406887913066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -739.9595241043899, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 396.406887913066, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52.85425172174213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8008219957839717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 13
        0, 10.60900254488917, 0, 0, 0, 0, -233.3980559875617, 0, 0, 0, 0, 0, 0, 0, 0, 1050.291251944028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1400.38833592537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 583.4951399689042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63.65401526933501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.8160771188376283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 49.93431784259574, 0, 0, 0, 0, 0, 0, -915.4624937809218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3295.664977611319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3295.664977611319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 915.4624937809218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49.93431784259574, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -6.473297372744374, 0, 0, 0, 0, 90.62616321842124, 0, 155.359136945865, 0, 0, 0, 0, 0, 0, -174.7790290640981, 0, -2330.387054187975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77.67956847293249, 0, 6525.083751726329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161.8324343186094, 0, -4660.774108375949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31.77800528438147, 0, 776.7956847293249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5884815793403977, 0, -14.12355790416954, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -49.93431784259574, 0, 0, 0, 0, 0, 0, 549.2774962685531, 0, 366.1849975123687, 0, 0, 0, 0, 0, 0, 0, 0, -659.1329955222637, 0, -4394.219970148425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -659.1329955222637, 0, 9227.861937311692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549.2774962685531, 0, -4394.219970148425, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49.93431784259574, 0, 366.1849975123687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4.685411261829863, 0, 0, 0, 0, -34.35968258675233, 0, -206.158095520514, 0, 0, 0, 0, 0, 0, -17.17984129337616, 0, 1717.984129337616, 0, 687.1936517350465, 0, 0, 0, 0, 0, 0, 0, 0, 68.71936517350465, 0, -962.0711124290651, 0, -6413.807416193768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28.63306882229361, 0, -2061.58095520514, 0, 9620.711124290651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17.70044254469059, 0, 801.7259270242209, 0, -2748.774606940186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.5206012513144292, 0, -22.90645505783488, 0, 76.35485019278295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 43.68089589976209, 0, 0, 0, 0, 0, 0, -218.4044794988104, 0, -582.4119453301611, 0, 0, 0, 0, 0, 0, 0, 0, -262.0853753985725, 0, 3494.471671980967, 0, 1048.34150159429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262.0853753985725, 0, 0, 0, -7338.39051116003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218.4044794988104, 0, -3494.471671980967, 0, 7338.39051116003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43.68089589976209, 0, 582.4119453301611, 0, -1048.34150159429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -3.404978058421841, 0, 0, 0, 0, 6.809956116843682, 0, 204.2986835053105, 0, 0, 0, 0, 0, 0, 30.64480252579657, 0, -612.8960505159314, 0, -1225.792101031863, 0, 0, 0, 0, 0, 0, 0, 0, 17.51131572902661, 0, -1225.792101031863, 0, 4903.168404127451, 0, 1307.511574433987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12.16063592293515, 0, 175.1131572902661, 0, 2451.584202063726, 0, -6537.557872169935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8.755657864513306, 0, 554.5249980858427, 0, -3502.263145805322, 0, 3922.534723301961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4864254369174059, 0, -29.18552621504435, 0, 175.1131572902661, 0, -186.7873677762839, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -34.53278031998955, 0, 0, 0, 0, 0, 0, 11.51092677332985, 0, 621.5900457598119, 0, 0, 0, 0, 0, 0, 0, 0, 207.1966819199373, 0, -828.7867276797492, 0, -1989.088146431398, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207.1966819199373, 0, -2900.753546879122, 0, 4641.205675006596, 0, 1326.058764287599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.51092677332985, 0, -828.7867276797492, 0, 4641.205675006596, 0, -4420.195880958662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34.53278031998955, 0, 621.5900457598119, 0, -1989.088146431398, 0, 1326.058764287599, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 2.334148624627139, 0, 0, 0, 0, 4.668297249254278, 0, -168.058700973154, 0, 0, 0, 0, 0, 0, -4.20146752432885, 0, -168.058700973154, 0, 1344.469607785232, 0, 0, 0, 0, 0, 0, 0, 0, -16.8058700973154, 0, 470.5643627248312, 0, 0, 0, -2509.6766011991, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13.53806202283741, 0, 739.4582842818776, 0, -3764.51490179865, 0, 2509.6766011991, 0, 1075.575686228186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.800978349552567, 0, 235.2821813624156, 0, -2151.151372456371, 0, 4517.41788215838, 0, -2151.151372456371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4668297249254278, 0, -33.6117401946308, 0, 268.8939215570464, 0, -501.93532023982, 0, 215.1151372456371, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 23.76708941910389, 0, 0, 0, 0, 0, 0, 71.30126825731166, 0, -507.0312409408829, 0, 0, 0, 0, 0, 0, 0, 0, 47.53417883820777, 0, -1014.062481881766, 0, 2129.531211951708, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47.53417883820777, 0, 0, 0, 2129.531211951708, 0, -2433.749956516238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -71.30126825731166, 0, 1014.062481881766, 0, -2129.531211951708, 0, 0, 0, 676.0416545878439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23.76708941910389, 0, 507.0312409408829, 0, -2129.531211951708, 0, 2433.749956516238, 0, -676.0416545878439, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -1.36713941034431, 0, 0, 0, 0, -6.379983914940114, 0, 109.3711528275448, 0, 0, 0, 0, 0, 0, -11.39282841953592, 0, 401.0275603676643, 0, -1020.797426390418, 0, 0, 0, 0, 0, 0, 0, 0, -9.114262735628734, 0, 510.3987131952091, 0, -2722.126470374449, 0, 2449.913823337004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.278565683907184, 0, 218.7423056550896, 0, -2041.594852780836, 0, 4083.189705561673, 0, -1749.938445240717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9114262735628734, 0, -36.45705094251494, 0, 0, 0, 816.6379411123346, 0, -1166.625630160478, 0, 311.1001680427941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4557131367814367, 0, -36.45705094251494, 0, 340.2658087968061, 0, -816.6379411123346, 0, 583.312815080239, 0, -103.7000560142647, 0, 0, 0,
        0, 0, 0, 0, -12.09143589391947, 0, 0, 0, 0, 0, 0, -60.45717946959737, 0, 282.1335041914544, 0, 0, 0, 0, 0, 0, 0, 0, -120.9143589391947, 0, 1128.534016765818, 0, -1354.240820118981, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120.9143589391947, 0, 1692.801025148726, 0, -4062.722460356943, 0, 1934.629743027116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60.45717946959737, 0, 1128.534016765818, 0, -4062.722460356943, 0, 3869.259486054231, 0, -859.8354413453848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12.09143589391947, 0, 282.1335041914544, 0, -1354.240820118981, 0, 1934.629743027116, 0, -859.8354413453848, 0, 93.80022996495107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0.4506212100730813, 0, 0, 0, 0, 2.703727260438488, 0, -37.85218164613883, 0, 0, 0, 0, 0, 0, 6.75931815109622, 0, -189.2609082306941, 0, 378.5218164613883, 0, 0, 0, 0, 0, 0, 0, 0, 9.012424201461626, 0, -378.5218164613883, 0, 1514.087265845553, 0, -1009.391510563702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.75931815109622, 0, -378.5218164613883, 0, 2271.13089876833, 0, -3028.174531691106, 0, 865.1927233403161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.703727260438488, 0, -189.2609082306941, 0, 1514.087265845553, 0, -3028.174531691106, 0, 1730.385446680632, 0, -230.7180595574176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4506212100730813, 0, -37.85218164613883, 0, 378.5218164613883, 0, -1009.391510563702, 0, 865.1927233403161, 0, -230.7180595574176, 0, 13.98291270044955, 0,
        0, 0, 4.298652372786529, 0, 0, 0, 0, 25.79191423671917, 0, -103.1676569468767, 0, 0, 0, 0, 0, 0, 64.47978559179793, 0, -515.8382847343835, 0, 515.8382847343835, 0, 0, 0, 0, 0, 0, 0, 0, 85.97304745573058, 0, -1031.676569468767, 0, 2063.353138937534, 0, -786.0392910238224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64.47978559179793, 0, -1031.676569468767, 0, 3095.029708406301, 0, -2358.117873071467, 0, 393.0196455119112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25.79191423671917, 0, -515.8382847343835, 0, 2063.353138937534, 0, -2358.117873071467, 0, 786.0392910238224, 0, -57.16649389264163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.298652372786529, 0, -103.1676569468767, 0, 515.8382847343835, 0, -786.0392910238224, 0, 393.0196455119112, 0, -57.16649389264163, 0, 1.46580753570876,
        0.4506212100730813, 0, 0, 2.703727260438488, 0, -37.85218164613883, 0, 0, 0, 0, 6.75931815109622, 0, -189.2609082306941, 0, 378.5218164613883, 0, 0, 0, 0, 0, 0, 9.012424201461626, 0, -378.5218164613883, 0, 1514.087265845553, 0, -1009.391510563702, 0, 0, 0, 0, 0, 0, 0, 0, 6.75931815109622, 0, -378.5218164613883, 0, 2271.13089876833, 0, -3028.174531691106, 0, 865.1927233403161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.703727260438488, 0, -189.2609082306941, 0, 1514.087265845553, 0, -3028.174531691106, 0, 1730.385446680632, 0, -230.7180595574176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4506212100730813, 0, -37.85218164613883, 0, 378.5218164613883, 0, -1009.391510563702, 0, 865.1927233403161, 0, -230.7180595574176, 0, 13.98291270044955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -6.045717946959737, 0, 0, 0, 0, -24.18287178783895, 0, 141.0667520957272, 0, 0, 0, 0, 0, 0, -30.22858973479868, 0, 423.2002562871816, 0, -677.1204100594905, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282.1335041914544, 0, -1354.240820118981, 0, 967.3148715135579, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30.22858973479868, 0, -282.1335041914544, 0, 0, 0, 967.3148715135579, 0, -429.9177206726924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24.18287178783895, 0, -423.2002562871816, 0, 1354.240820118981, 0, -967.3148715135579, 0, 0, 0, 46.90011498247553, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.045717946959737, 0, -141.0667520957272, 0, 677.1204100594905, 0, -967.3148715135579, 0, 429.9177206726924, 0, -46.90011498247553, 0, 0,
        -0.4557131367814367, 0, 0, -0.9114262735628734, 0, 36.45705094251494, 0, 0, 0, 0, 2.278565683907184, 0, 36.45705094251494, 0, -340.2658087968061, 0, 0, 0, 0, 0, 0, 9.114262735628734, 0, -218.7423056550896, 0, 0, 0, 816.6379411123346, 0, 0, 0, 0, 0, 0, 0, 0, 11.39282841953592, 0, -510.3987131952091, 0, 2041.594852780836, 0, -816.6379411123346, 0, -583.312815080239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.379983914940114, 0, -401.0275603676643, 0, 2722.126470374449, 0, -4083.189705561673, 0, 1166.625630160478, 0, 103.7000560142647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.36713941034431, 0, -109.3711528275448, 0, 1020.797426390418, 0, -2449.913823337004, 0, 1749.938445240717, 0, -311.1001680427941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 5.941772354775972, 0, 0, 0, 0, -11.88354470955194, 0, -126.7578102352207, 0, 0, 0, 0, 0, 0, -101.0101300311915, 0, 380.2734307056622, 0, 532.3828029879271, 0, 0, 0, 0, 0, 0, 0, 0, -166.3696259337272, 0, 1774.60934329309, 0, -2129.531211951708, 0, -608.4374891290595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101.0101300311915, 0, 1774.60934329309, 0, -5323.828029879271, 0, 3042.187445645297, 0, 169.010413646961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11.88354470955194, 0, 380.2734307056622, 0, -2129.531211951708, 0, 3042.187445645297, 0, -1014.062481881766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.941772354775972, 0, -126.7578102352207, 0, 532.3828029879271, 0, -608.4374891290595, 0, 169.010413646961, 0, 0, 0, 0,
        0.4668297249254278, 0, 0, -2.800978349552567, 0, -33.6117401946308, 0, 0, 0, 0, -13.53806202283741, 0, 235.2821813624156, 0, 268.8939215570464, 0, 0, 0, 0, 0, 0, -16.8058700973154, 0, 739.4582842818776, 0, -2151.151372456371, 0, -501.93532023982, 0, 0, 0, 0, 0, 0, 0, 0, -4.20146752432885, 0, 470.5643627248312, 0, -3764.51490179865, 0, 4517.41788215838, 0, 215.1151372456371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.668297249254278, 0, -168.058700973154, 0, 0, 0, 2509.6766011991, 0, -2151.151372456371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.334148624627139, 0, -168.058700973154, 0, 1344.469607785232, 0, -2509.6766011991, 0, 1075.575686228186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -5.755463386664925, 0, 0, 0, 0, 69.0655606399791, 0, 103.5983409599687, 0, 0, 0, 0, 0, 0, 155.397511439953, 0, -1346.778432479592, 0, -331.5146910718997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1450.376773439561, 0, 4641.205675006596, 0, 221.0097940479331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155.397511439953, 0, 1450.376773439561, 0, 0, 0, -3315.146910718997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69.0655606399791, 0, 1346.778432479592, 0, -4641.205675006596, 0, 3315.146910718997, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.755463386664925, 0, -103.5983409599687, 0, 331.5146910718997, 0, -221.0097940479331, 0, 0, 0, 0, 0, 0,
        -0.4864254369174059, 0, 0, 8.755657864513306, 0, 29.18552621504435, 0, 0, 0, 0, 12.16063592293515, 0, -554.5249980858427, 0, -175.1131572902661, 0, 0, 0, 0, 0, 0, -17.51131572902661, 0, -175.1131572902661, 0, 3502.263145805322, 0, 186.7873677762839, 0, 0, 0, 0, 0, 0, 0, 0, -30.64480252579657, 0, 1225.792101031863, 0, -2451.584202063726, 0, -3922.534723301961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.809956116843682, 0, 612.8960505159314, 0, -4903.168404127451, 0, 6537.557872169935, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.404978058421841, 0, -204.2986835053105, 0, 1225.792101031863, 0, -1307.511574433987, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 5.460111987470261, 0, 0, 0, 0, -141.9629116742268, 0, -72.80149316627014, 0, 0, 0, 0, 0, 0, 81.90167981205391, 0, 1965.640315489294, 0, 131.0426876992863, 0, 0, 0, 0, 0, 0, 0, 0, 458.6494069475019, 0, -3057.662712983346, 0, -3669.195255580015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81.90167981205391, 0, -3057.662712983346, 0, 9172.988138950038, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141.9629116742268, 0, 1965.640315489294, 0, -3669.195255580015, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.460111987470261, 0, -72.80149316627014, 0, 131.0426876992863, 0, 0, 0, 0, 0, 0, 0, 0,
        0.5206012513144292, 0, 0, -17.70044254469059, 0, -22.90645505783488, 0, 0, 0, 0, 28.63306882229361, 0, 801.7259270242209, 0, 76.35485019278295, 0, 0, 0, 0, 0, 0, 68.71936517350465, 0, -2061.58095520514, 0, -2748.774606940186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17.17984129337616, 0, -962.0711124290651, 0, 9620.711124290651, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34.35968258675233, 0, 1717.984129337616, 0, -6413.807416193768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.685411261829863, 0, -206.158095520514, 0, 687.1936517350465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -4.993431784259574, 0, 0, 0, 0, 219.7109985074212, 0, 36.61849975123687, 0, 0, 0, 0, 0, 0, -823.9162444028297, 0, -1647.832488805659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7689.884947759744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 823.9162444028297, 0, -7689.884947759744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219.7109985074212, 0, 1647.832488805659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.993431784259574, 0, -36.61849975123687, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5884815793403977, 0, 0, 31.77800528438147, 0, 14.12355790416954, 0, 0, 0, 0, -161.8324343186094, 0, -776.7956847293249, 0, 0, 0, 0, 0, 0, 0, 0, 77.67956847293249, 0, 4660.774108375949, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174.7790290640981, 0, -6525.083751726329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90.62616321842124, 0, 2330.387054187975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.473297372744374, 0, -155.359136945865, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 4.161193153549645, 0, 0, 0, 0, -274.6387481342766, 0, 0, 0, 0, 0, 0, 0, 0, 2059.790611007074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3844.942473879872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2059.790611007074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -274.6387481342766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.161193153549645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.8160771188376283, 0, 0, -63.65401526933501, 0, 0, 0, 0, 0, 0, 583.4951399689042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1400.38833592537, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050.291251944028, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233.3980559875617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10.60900254488917, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 14
        0, 11.62730916290334, 0, 0, 0, 0, -302.3100382354867, 0, 0, 0, 0, 0, 0, 0, 0, 1662.705210295177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2850.351789077446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1662.705210295177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -302.3100382354867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.62730916290334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 57.13122714353754, 0, 0, 0, 0, 0, 0, -1256.886997157826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5655.991487210216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7541.321982946955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3142.217492894565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -342.7873628612252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.394709780272118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -7.176531019523646, 0, 0, 0, 0, 124.3932043384099, 0, 186.5898065076148, 0, 0, 0, 0, 0, 0, -342.0813119306271, 0, -3420.813119306271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12314.92722950258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 342.0813119306271, 0, -12314.92722950258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124.3932043384099, 0, 3420.813119306271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.176531019523646, 0, -186.5898065076148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -58.09962199636542, 0, 0, 0, 0, 0, 0, 813.3947079491158, 0, 464.7969759709233, 0, 0, 0, 0, 0, 0, 0, 0, -1568.689793901866, 0, -6971.95463956385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -697.195463956385, 0, 19521.47299077878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1452.490549909135, 0, -13943.9092791277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -285.2163261639757, 0, 2323.984879854617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.281783817851402, 0, -42.25427054281121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 5.281783817851402, 0, 0, 0, 0, -52.81783817851402, 0, -253.5256232568673, 0, 0, 0, 0, 0, 0, 11.61992439927308, 0, 2788.78185582554, 0, 929.5939519418467, 0, 0, 0, 0, 0, 0, 0, 0, 139.439092791277, 0, -3346.538226990648, 0, -11155.12742330216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.61992439927308, 0, -3346.538226990648, 0, 23425.76758893454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52.81783817851402, 0, 2788.78185582554, 0, -11155.12742330216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.281783817851402, 0, -253.5256232568673, 0, 929.5939519418467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 52.07313853625346, 0, 0, 0, 0, 0, 0, -381.8696825991921, 0, -763.7393651983841, 0, 0, 0, 0, 0, 0, 0, 0, -190.934841299596, 0, 6364.494709986534, 0, 1527.478730396768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 763.7393651983841, 0, -3564.117037592459, 0, -14256.46815036984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318.2247354993267, 0, -7637.393651983841, 0, 21384.70222555475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196.720745581402, 0, 2970.097531327049, 0, -6109.914921587073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.78590428180594, 0, -84.85992946648712, 0, 169.7198589329742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -3.940231044985851, 0, 0, 0, 0, 15.7609241799434, 0, 260.0552489690662, 0, 0, 0, 0, 0, 0, 43.34254149484436, 0, -1300.276244845331, 0, -1733.701659793774, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1560.331493814397, 0, 10402.20995876265, 0, 2080.441991752529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43.34254149484436, 0, 1560.331493814397, 0, 0, 0, -14563.0939422677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15.7609241799434, 0, 1300.276244845331, 0, -10402.20995876265, 0, 14563.0939422677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.940231044985851, 0, -260.0552489690662, 0, 1733.701659793774, 0, -2080.441991752529, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -42.78485868831644, 0, 0, 0, 0, 0, 0, 85.56971737663287, 0, 855.6971737663287, 0, 0, 0, 0, 0, 0, 0, 0, 385.0637281948479, 0, -2567.091521298986, 0, -3080.509825558783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220.0364161113417, 0, -5134.183042597972, 0, 12322.03930223513, 0, 2347.055105187644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152.8030667439873, 0, 733.4547203711389, 0, 6161.019651117567, 0, -11735.27552593822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110.0182080556708, 0, 2322.606614508606, 0, -8801.456644453667, 0, 7041.165315562933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.112122669759491, 0, -122.2424533951898, 0, 440.0728322226833, 0, -335.2935864553778, 0, 0, 0, 0, 0, 0, 0,
        0, 2.829363009969403, 0, 0, 0, 0, 1.886242006646268, 0, -226.3490407975522, 0, 0, 0, 0, 0, 0, -17.91929906313955, 0, 75.44968026585074, 0, 2037.14136717797, 0, 0, 0, 0, 0, 0, 0, 0, -33.95235611963283, 0, 1358.094244785313, 0, -2716.188489570627, 0, -4345.901583313003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17.91929906313955, 0, 1358.094244785313, 0, -9506.659713497193, 0, 10140.43702773034, 0, 2172.950791656501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.886242006646268, 0, 75.44968026585074, 0, -2716.188489570627, 0, 10140.43702773034, 0, -7243.169305521671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.829363009969403, 0, -226.3490407975522, 0, 2037.14136717797, 0, -4345.901583313003, 0, 2172.950791656501, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 31.633240116575, 0, 0, 0, 0, 0, 0, 63.26648023315, 0, -759.1977627977999, 0, 0, 0, 0, 0, 0, 0, 0, -56.939832209835, 0, -759.1977627977999, 0, 3644.14926142944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227.75932883934, 0, 2125.75373583384, 0, 0, 0, -4858.86568190592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -183.472792676135, 0, 3340.47015631032, 0, -10203.61793200243, 0, 4858.86568190592, 0, 1619.62189396864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37.95988813989, 0, 1062.87686791692, 0, -5830.638818287104, 0, 8745.958227430655, 0, -3239.24378793728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.326648023315, 0, -151.83955255956, 0, 728.8298522858879, 0, -971.7731363811839, 0, 323.924378793728, 0, 0, 0, 0, 0,
        0, -1.835933153488193, 0, 0, 0, 0, -7.343732613952774, 0, 165.2339838139374, 0, 0, 0, 0, 0, 0, -9.179665767440967, 0, 495.7019514418122, 0, -1762.495827348666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330.4679676278748, 0, -3524.991654697331, 0, 4934.988316576264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.179665767440967, 0, -330.4679676278748, 0, 0, 0, 4934.988316576264, 0, -4229.989985636798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.343732613952774, 0, -495.7019514418122, 0, 3524.991654697331, 0, -4934.988316576264, 0, 0, 0, 939.997774585955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.835933153488193, 0, -165.2339838139374, 0, 1762.495827348666, 0, -4934.988316576264, 0, 4229.989985636798, 0, -939.997774585955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -19.37540204348254, 0, 0, 0, 0, 0, 0, -90.41854286958517, 0, 516.677387826201, 0, 0, 0, 0, 0, 0, 0, 0, -161.4616836956878, 0, 1894.483755362737, 0, -2893.393371826726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129.1693469565502, 0, 2411.161143188938, 0, -7715.715658204601, 0, 4960.10292313153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32.29233673913756, 0, 1033.354775652402, 0, -5786.786743653451, 0, 8266.838205219216, 0, -2755.612735073072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12.91693469565502, 0, -172.225795942067, 0, 0, 0, 1653.367641043843, 0, -1837.075156715381, 0, 400.8163978288105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.458467347827512, 0, -172.225795942067, 0, 964.4644572755752, 0, -1653.367641043843, 0, 918.5375783576907, 0, -133.6054659429368, 0, 0, 0,
        0, 0.9043663200508067, 0, 0, 0, 0, 5.42619792030484, 0, -86.81916672487744, 0, 0, 0, 0, 0, 0, 13.5654948007621, 0, -434.0958336243872, 0, 1012.890278456903, 0, 0, 0, 0, 0, 0, 0, 0, 18.08732640101613, 0, -868.1916672487744, 0, 4051.561113827614, 0, -3241.248891062091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.5654948007621, 0, -868.1916672487744, 0, 6077.341670741421, 0, -9723.746673186273, 0, 3472.766668995098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.42619792030484, 0, -434.0958336243872, 0, 4051.561113827614, 0, -9723.746673186273, 0, 6945.533337990195, 0, -1234.761482309368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9043663200508067, 0, -86.81916672487744, 0, 1012.890278456903, 0, -3241.248891062091, 0, 3472.766668995098, 0, -1234.761482309368, 0, 112.2510438463062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 6.521478277491721, 0, 0, 0, 0, 0, 0, 39.12886966495032, 0, -182.6013917697682, 0, 0, 0, 0, 0, 0, 0, 0, 97.82217416237581, 0, -913.0069588488409, 0, 1095.608350618609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130.4295655498344, 0, -1826.013917697682, 0, 4382.433402474436, 0, -2086.873048797351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97.82217416237581, 0, -1826.013917697682, 0, 6573.650103711654, 0, -6260.619146392052, 0, 1391.248699198234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39.12886966495032, 0, -913.0069588488409, 0, 4382.433402474436, 0, -6260.619146392052, 0, 2782.497398396467, 0, -303.5451707341601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.521478277491721, 0, -182.6013917697682, 0, 1095.608350618609, 0, -2086.873048797351, 0, 1391.248699198234, 0, -303.5451707341601, 0, 15.56641901200821, 0,
        -0.3182155563368222, 0, 0, -2.227508894357756, 0, 31.18512452100858, 0, 0, 0, 0, -6.682526683073267, 0, 187.1107471260515, 0, -374.2214942521029, 0, 0, 0, 0, 0, 0, -11.13754447178878, 0, 467.7768678151287, 0, -1871.107471260515, 0, 1247.404980840343, 0, 0, 0, 0, 0, 0, 0, 0, -11.13754447178878, 0, 623.7024904201716, 0, -3742.214942521029, 0, 4989.619923361373, 0, -1425.605692388964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.682526683073267, 0, 467.7768678151287, 0, -3742.214942521029, 0, 7484.429885042059, 0, -4276.817077166891, 0, 570.2422769555854, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.227508894357756, 0, 187.1107471260515, 0, -1871.107471260515, 0, 4989.619923361373, 0, -4276.817077166891, 0, 1140.484553911171, 0, -69.12027599461642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.3182155563368222, 0, 31.18512452100858, 0, -374.2214942521029, 0, 1247.404980840343, 0, -1425.605692388964, 0, 570.2422769555854, 0, -69.12027599461642, 0, 1.519126944936625,
        0, 0, 6.521478277491721, 0, 0, 0, 0, 39.12886966495032, 0, -182.6013917697682, 0, 0, 0, 0, 0, 0, 97.82217416237581, 0, -913.0069588488409, 0, 1095.608350618609, 0, 0, 0, 0, 0, 0, 0, 0, 130.4295655498344, 0, -1826.013917697682, 0, 4382.433402474436, 0, -2086.873048797351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97.82217416237581, 0, -1826.013917697682, 0, 6573.650103711654, 0, -6260.619146392052, 0, 1391.248699198234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39.12886966495032, 0, -913.0069588488409, 0, 4382.433402474436, 0, -6260.619146392052, 0, 2782.497398396467, 0, -303.5451707341601, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.521478277491721, 0, -182.6013917697682, 0, 1095.608350618609, 0, -2086.873048797351, 0, 1391.248699198234, 0, -303.5451707341601, 0, 15.56641901200821, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.4521831600254033, 0, 0, 2.260915800127017, 0, -43.40958336243872, 0, 0, 0, 0, 4.06964844022863, 0, -173.6383334497549, 0, 506.4451392284517, 0, 0, 0, 0, 0, 0, 2.260915800127017, 0, -217.0479168121936, 0, 1519.335417685355, 0, -1620.624445531046, 0, 0, 0, 0, 0, 0, 0, 0, -2.260915800127017, 0, 0, 0, 1012.890278456903, 0, -3241.248891062091, 0, 1736.383334497549, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.06964844022863, 0, 217.0479168121936, 0, -1012.890278456903, 0, 0, 0, 1736.383334497549, 0, -617.380741154684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.260915800127017, 0, 173.6383334497549, 0, -1519.335417685355, 0, 3241.248891062091, 0, -1736.383334497549, 0, 0, 0, 56.12552192315309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4521831600254033, 0, 43.40958336243872, 0, -506.4451392284517, 0, 1620.624445531046, 0, -1736.383334497549, 0, 617.380741154684, 0, -56.12552192315309, 0, 0,
        0, 0, -6.458467347827512, 0, 0, 0, 0, -12.91693469565502, 0, 172.225795942067, 0, 0, 0, 0, 0, 0, 32.29233673913756, 0, 172.225795942067, 0, -964.4644572755752, 0, 0, 0, 0, 0, 0, 0, 0, 129.1693469565502, 0, -1033.354775652402, 0, 0, 0, 1653.367641043843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161.4616836956878, 0, -2411.161143188938, 0, 5786.786743653451, 0, -1653.367641043843, 0, -918.5375783576907, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90.41854286958517, 0, -1894.483755362737, 0, 7715.715658204601, 0, -8266.838205219216, 0, 1837.075156715381, 0, 133.6054659429368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19.37540204348254, 0, -516.677387826201, 0, 2893.393371826726, 0, -4960.10292313153, 0, 2755.612735073072, 0, -400.8163978288105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.4589832883720484, 0, 0, 0.4589832883720484, 0, 41.30849595348435, 0, 0, 0, 0, 8.720682479068919, 0, -82.6169919069687, 0, -440.6239568371664, 0, 0, 0, 0, 0, 0, 20.65424797674218, 0, -702.244431209234, 0, 1321.871870511499, 0, 1233.747079144066, 0, 0, 0, 0, 0, 0, 0, 0, 20.65424797674218, 0, -1156.637886697562, 0, 6168.73539572033, 0, -4934.988316576264, 0, -1057.497496409199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.720682479068919, 0, -702.244431209234, 0, 6168.73539572033, 0, -12337.47079144066, 0, 5287.487482045997, 0, 234.9994436464888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4589832883720484, 0, -82.6169919069687, 0, 1321.871870511499, 0, -4934.988316576264, 0, 5287.487482045997, 0, -1409.996661878933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4589832883720484, 0, 41.30849595348435, 0, -440.6239568371664, 0, 1233.747079144066, 0, -1057.497496409199, 0, 234.9994436464888, 0, 0, 0, 0,
        0, 0, 6.326648023315, 0, 0, 0, 0, -37.95988813989, 0, -151.83955255956, 0, 0, 0, 0, 0, 0, -183.472792676135, 0, 1062.87686791692, 0, 728.8298522858879, 0, 0, 0, 0, 0, 0, 0, 0, -227.75932883934, 0, 3340.47015631032, 0, -5830.638818287104, 0, -971.7731363811839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56.939832209835, 0, 2125.75373583384, 0, -10203.61793200243, 0, 8745.958227430655, 0, 323.924378793728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63.26648023315, 0, -759.1977627977999, 0, 0, 0, 4858.86568190592, 0, -3239.24378793728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31.633240116575, 0, -759.1977627977999, 0, 3644.14926142944, 0, -4858.86568190592, 0, 1619.62189396864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.4715605016615671, 0, 0, -5.187165518277238, 0, -37.72484013292537, 0, 0, 0, 0, -18.39085956480112, 0, 452.6980815951044, 0, 339.5235611963283, 0, 0, 0, 0, 0, 0, -12.73213354486231, 0, 1018.570683588985, 0, -4413.806295552268, 0, -724.3169305521671, 0, 0, 0, 0, 0, 0, 0, 0, 12.73213354486231, 0, 0, 0, -4753.329856748596, 0, 10140.43702773034, 0, 362.1584652760835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18.39085956480112, 0, -1018.570683588985, 0, 4753.329856748596, 0, 0, 0, -5432.376979141253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.187165518277238, 0, -452.6980815951044, 0, 4413.806295552268, 0, -10140.43702773034, 0, 5432.376979141253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4715605016615671, 0, 37.72484013292537, 0, -339.5235611963283, 0, 724.3169305521671, 0, -362.1584652760835, 0, 0, 0, 0, 0, 0,
        0, 0, -6.112122669759491, 0, 0, 0, 0, 110.0182080556708, 0, 122.2424533951898, 0, 0, 0, 0, 0, 0, 152.8030667439873, 0, -2322.606614508606, 0, -440.0728322226833, 0, 0, 0, 0, 0, 0, 0, 0, -220.0364161113417, 0, -733.4547203711389, 0, 8801.456644453667, 0, 335.2935864553778, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -385.0637281948479, 0, 5134.183042597972, 0, -6161.019651117567, 0, -7041.165315562933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85.56971737663287, 0, 2567.091521298986, 0, -12322.03930223513, 0, 11735.27552593822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42.78485868831644, 0, -855.6971737663287, 0, 3080.509825558783, 0, -2347.055105187644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.4925288806232314, 0, 0, 12.31322201558078, 0, 32.50690612113327, 0, 0, 0, 0, 5.417817686855545, 0, -845.179559149465, 0, -216.7127074742218, 0, 0, 0, 0, 0, 0, -48.7603591816999, 0, 487.603591816999, 0, 5851.243101803988, 0, 260.0552489690662, 0, 0, 0, 0, 0, 0, 0, 0, -48.7603591816999, 0, 2730.580114175195, 0, -9101.933713917315, 0, -7281.546971133852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.417817686855545, 0, 487.603591816999, 0, -9101.933713917315, 0, 18203.86742783463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12.31322201558078, 0, -845.179559149465, 0, 5851.243101803988, 0, -7281.546971133852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4925288806232314, 0, 32.50690612113327, 0, -216.7127074742218, 0, 260.0552489690662, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 5.78590428180594, 0, 0, 0, 0, -196.720745581402, 0, -84.85992946648712, 0, 0, 0, 0, 0, 0, 318.2247354993267, 0, 2970.097531327049, 0, 169.7198589329742, 0, 0, 0, 0, 0, 0, 0, 0, 763.7393651983841, 0, -7637.393651983841, 0, -6109.914921587073, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190.934841299596, 0, -3564.117037592459, 0, 21384.70222555475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -381.8696825991921, 0, 6364.494709986534, 0, -14256.46815036984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52.07313853625346, 0, -763.7393651983841, 0, 1527.478730396768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.5281783817851402, 0, 0, -22.71167041676103, 0, -25.35256232568673, 0, 0, 0, 0, 63.90958419600196, 0, 1115.512742330216, 0, 92.95939519418467, 0, 0, 0, 0, 0, 0, 87.14943299454813, 0, -4183.17278373831, 0, -4183.17278373831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87.14943299454813, 0, 0, 0, 19521.47299077878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63.90958419600196, 0, 4183.17278373831, 0, -19521.47299077878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22.71167041676103, 0, -1115.512742330216, 0, 4183.17278373831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5281783817851402, 0, 25.35256232568673, 0, -92.95939519418467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -5.281783817851402, 0, 0, 0, 0, 285.2163261639757, 0, 42.25427054281121, 0, 0, 0, 0, 0, 0, -1452.490549909135, 0, -2323.984879854617, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697.195463956385, 0, 13943.9092791277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1568.689793901866, 0, -19521.47299077878, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -813.3947079491158, 0, 6971.95463956385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58.09962199636542, 0, -464.7969759709233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.5980442516269705, 0, 0, 38.87287635575308, 0, 15.54915054230123, 0, 0, 0, 0, -256.5609839479703, 0, -1026.243935791881, 0, 0, 0, 0, 0, 0, 0, 0, 256.5609839479703, 0, 7696.82951843911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256.5609839479703, 0, -14367.41510108634, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256.5609839479703, 0, 7696.82951843911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38.87287635575308, 0, -1026.243935791881, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5980442516269705, 0, 15.54915054230123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 4.394709780272118, 0, 0, 0, 0, -342.7873628612252, 0, 0, 0, 0, 0, 0, 0, 0, 3142.217492894565, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7541.321982946955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5655.991487210216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1256.886997157826, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57.13122714353754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.830522083064524, 0, 0, -75.57750955887168, 0, 0, 0, 0, 0, 0, 831.3526051475885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2494.057815442766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2494.057815442766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -831.3526051475885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75.57750955887168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.830522083064524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // l = 15
        0, 12.66375976286059, 0, 0, 0, 0, -384.1340461401045, 0, 0, 0, 0, 0, 0, 0, 0, 2535.28470452469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5432.752938267193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4225.47450754115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1152.402138420314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88.64631834002413, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.8442506508573726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 64.73811759282017, 0, 0, 0, 0, 0, 0, -1683.191057413324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9257.550815773284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15870.0871127542, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9257.550815773284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1683.191057413324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64.73811759282017, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -7.893350484654575, 0, 0, 0, 0, 165.7603601777461, 0, 221.0138135703281, 0, 0, 0, 0, 0, 0, -607.7879873184023, 0, -4862.303898547218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260.480565993601, 0, 21880.36754346248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 607.7879873184023, 0, -29173.82339128331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -386.7741737480742, 0, 12155.75974636805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46.75292210141556, 0, -1326.082881421969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.6071808065118904, 0, 17.00106258233293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -66.77884815276176, 0, 0, 0, 0, 0, 0, 1157.500034647871, 0, 578.7500173239353, 0, 0, 0, 0, 0, 0, 0, 0, -3183.125095281644, 0, -10610.41698427215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38197.50114337973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3183.125095281644, 0, -38197.50114337973, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1157.500034647871, 0, 10610.41698427215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66.77884815276176, 0, -578.7500173239353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 5.890314521234328, 0, 0, 0, 0, -76.57408877604626, 0, -306.2963551041851, 0, 0, 0, 0, 0, 0, 76.57408877604626, 0, 4288.148971458591, 0, 1225.18542041674, 0, 0, 0, 0, 0, 0, 0, 0, 229.7222663281388, 0, -8270.001587812996, 0, -18377.7813062511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76.57408877604626, 0, -3675.556261250221, 0, 51457.78765750309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118.3417735629806, 0, 7657.408877604626, 0, -36755.56261250221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28.38060632958358, 0, -1503.636652329636, 0, 6125.927102083701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.5354831382940298, 0, 27.84512319128955, 0, -111.3804927651582, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 61.05447148378159, 0, 0, 0, 0, 0, 0, -610.5447148378159, 0, -976.8715437405055, 0, 0, 0, 0, 0, 0, 0, 0, 134.3198372643195, 0, 10745.58698114556, 0, 2149.117396229112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1611.838047171834, 0, -12894.70437737467, 0, -25789.40875474934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134.3198372643195, 0, -12894.70437737467, 0, 54157.75838497362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -610.5447148378159, 0, 10745.58698114556, 0, -25789.40875474934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61.05447148378159, 0, -976.8715437405055, 0, 2149.117396229112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -4.486569049517132, 0, 0, 0, 0, 28.4149373136085, 0, 323.0329715652335, 0, 0, 0, 0, 0, 0, 49.35225954468845, 0, -2368.908458145046, 0, -2368.908458145046, 0, 0, 0, 0, 0, 0, 0, 0, -49.35225954468845, 0, -1184.454229072523, 0, 19740.90381787538, 0, 3158.544610860061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93.22093469552263, 0, 4737.816916290091, 0, -11054.90613801021, 0, -29479.74970136057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10.46866111553997, 0, 1974.090381787538, 0, -23689.08458145046, 0, 44219.62455204085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.45075318156282, 0, -1220.34678146866, 0, 9212.421781675177, 0, -12634.17844344024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4985076721685702, 0, 35.89255239613705, 0, -263.2120509050051, 0, 350.9494012066734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -51.69118335186266, 0, 0, 0, 0, 0, 0, 206.7647334074506, 0, 1137.206033740979, 0, 0, 0, 0, 0, 0, 0, 0, 568.6030168704893, 0, -5686.030168704893, 0, -4548.824134963914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6823.236202445871, 0, 27292.94480978348, 0, 3898.992115683355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -568.6030168704893, 0, 6823.236202445871, 0, 0, 0, -27292.94480978348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206.7647334074506, 0, 5686.030168704893, 0, -27292.94480978348, 0, 27292.94480978348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51.69118335186266, 0, -1137.206033740979, 0, 4548.824134963914, 0, -3898.992115683355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3.334384020345036, 0, 0, 0, 0, -3.334384020345036, 0, -293.4257937903632, 0, 0, 0, 0, 0, 0, -36.6782242237954, 0, 586.8515875807264, 0, 2934.257937903632, 0, 0, 0, 0, 0, 0, 0, 0, -47.15771685916551, 0, 2640.832144113269, 0, -8802.773813710896, 0, -7042.219050968717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.239746317685057, 0, 1509.046939493296, 0, -17605.54762742179, 0, 28168.87620387487, 0, 4024.125171982124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20.48264469640522, 0, -1047.949263537011, 0, 2515.078232488827, 0, 14084.43810193743, 0, -20120.62585991062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.097789763695088, 0, -754.5234697466482, 0, 7964.414402881287, 0, -20120.62585991062, 0, 12072.37551594637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4763405743350052, 0, 41.91797054148046, 0, -419.1797054148046, 0, 1006.031292995531, 0, -574.8750245688748, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 40.21623606427654, 0, 0, 0, 0, 0, 0, 26.81082404285103, 0, -1072.432961714041, 0, 0, 0, 0, 0, 0, 0, 0, -254.7028284070847, 0, 357.4776539046803, 0, 5791.137993255822, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -482.5948327713185, 0, 6434.597770284246, 0, -7721.517324341095, 0, -8824.591227818395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254.7028284070847, 0, 6434.597770284246, 0, -27025.31063519383, 0, 20590.71286490959, 0, 3431.785477484931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26.81082404285103, 0, 357.4776539046803, 0, -7721.517324341095, 0, 20590.71286490959, 0, -11439.28492494977, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40.21623606427654, 0, -1072.432961714041, 0, 5791.137993255822, 0, -8824.591227818395, 0, 3431.785477484931, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -2.312653286194929, 0, 0, 0, 0, -6.937959858584787, 0, 231.2653286194929, 0, 0, 0, 0, 0, 0, -0.4625306572389858, 0, 462.5306572389858, 0, -2775.183943433915, 0, 0, 0, 0, 0, 0, 0, 0, 20.81387957575436, 0, -416.2775915150872, 0, -2775.183943433915, 0, 8880.588618988527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30.06449272053408, 0, -1665.110366060349, 0, 7770.515041614961, 0, 0, 0, -8880.588618988527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16.1885730033645, 0, -1341.338905993059, 0, 12210.80935110922, 0, -24865.64813316788, 0, 8880.588618988527, 0, 2368.156965063607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.312653286194929, 0, -277.5183943433915, 0, 3885.257520807481, 0, -14208.94179038164, 0, 15985.05951417935, 0, -4736.313930127214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4625306572389858, 0, 46.25306572389858, 0, -555.0367886867829, 0, 1776.117723797705, 0, -1776.117723797705, 0, 473.6313930127214, 0, 0, 0, 0, 0,
        0, 0, 0, 0, -27.44175328360903, 0, 0, 0, 0, 0, 0, -109.7670131344361, 0, 823.252598508271, 0, 0, 0, 0, 0, 0, 0, 0, -137.2087664180452, 0, 2469.757795524813, 0, -5268.816630452934, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1646.505197016542, 0, -10537.63326090587, 0, 10537.63326090587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137.2087664180452, 0, -1646.505197016542, 0, 0, 0, 10537.63326090587, 0, -7025.088840603912, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109.7670131344361, 0, -2469.757795524813, 0, 10537.63326090587, 0, -10537.63326090587, 0, 0, 0, 1277.288880109802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27.44175328360903, 0, -823.252598508271, 0, 5268.816630452934, 0, -10537.63326090587, 0, 7025.088840603912, 0, -1277.288880109802, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1.363030880952603, 0, 0, 0, 0, 7.723841658731416, 0, -147.2073351428811, 0, 0, 0, 0, 0, 0, 17.71940145238384, 0, -686.9675640001119, 0, 1962.764468571748, 0, 0, 0, 0, 0, 0, 0, 0, 20.44546321428904, 0, -1226.727792857343, 0, 7196.803051429743, 0, -7327.654016001193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.35859067460502, 0, -981.3822342858741, 0, 9159.567520001492, 0, -19540.41070933652, 0, 9421.269449144391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.363030880952603, 0, -245.3455585714685, 0, 3925.528937143496, 0, -14655.30803200239, 0, 15702.11574857399, 0, -4187.230866286396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.363030880952603, 0, 98.13822342858741, 0, -654.2548228572494, 0, 0, 0, 3140.423149714797, 0, -2791.487244190931, 0, 507.543135307442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.454343626984201, 0, 49.0691117142937, 0, -654.2548228572494, 0, 2442.551338667064, 0, -3140.423149714797, 0, 1395.743622095465, 0, -169.1810451024807, 0, 0, 0,
        0, 0, 0, 0, 13.90024211921377, 0, 0, 0, 0, 0, 0, 83.40145271528264, 0, -444.8077478148407, 0, 0, 0, 0, 0, 0, 0, 0, 208.5036317882066, 0, -2224.038739074204, 0, 3113.654234703885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278.0048423842755, 0, -4448.077478148407, 0, 12454.61693881554, 0, -7116.923965037452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208.5036317882066, 0, -4448.077478148407, 0, 18681.92540822331, 0, -21350.77189511235, 0, 5930.769970864543, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83.40145271528264, 0, -2224.038739074204, 0, 12454.61693881554, 0, -21350.77189511235, 0, 11861.53994172909, 0, -1725.31490061514, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13.90024211921377, 0, -444.8077478148407, 0, 3113.654234703885, 0, -7116.923965037452, 0, 5930.769970864543, 0, -1725.31490061514, 0, 132.7165308165492, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, -0.4505094349975498, 0, 0, 0, 0, -3.153566044982849, 0, 50.45705671972558, 0, 0, 0, 0, 0, 0, -9.460698134948546, 0, 302.7423403183535, 0, -706.3987940761581, 0, 0, 0, 0, 0, 0, 0, 0, -15.76783022491424, 0, 756.8558507958837, 0, -3531.99397038079, 0, 2825.595176304632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15.76783022491424, 0, 1009.141134394512, 0, -7063.987940761581, 0, 11302.38070521853, 0, -4036.564537578046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.460698134948546, 0, 756.8558507958837, 0, -7063.987940761581, 0, 16953.57105782779, 0, -12109.69361273414, 0, 2152.834420041625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.153566044982849, 0, 302.7423403183535, 0, -3531.99397038079, 0, 11302.38070521853, 0, -12109.69361273414, 0, 4305.668840083249, 0, -391.4244400075681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4505094349975498, 0, 50.45705671972558, 0, -706.3987940761581, 0, 2825.595176304632, 0, -4036.564537578046, 0, 2152.834420041625, 0, -391.4244400075681, 0, 17.20546989044255, 0,
        0, 0, -4.935083598341307, 0, 0, 0, 0, -34.54558518838915, 0, 161.2127308791494, 0, 0, 0, 0, 0, 0, -103.6367555651675, 0, 967.2763852748962, 0, -1160.731662329875, 0, 0, 0, 0, 0, 0, 0, 0, -172.7279259419458, 0, 2418.190963187241, 0, -5803.658311649377, 0, 2763.646815071132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172.7279259419458, 0, 3224.254617582987, 0, -11607.31662329875, 0, 11054.58726028453, 0, -2456.574946729895, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103.6367555651675, 0, 2418.190963187241, 0, -11607.31662329875, 0, 16581.88089042679, 0, -7369.724840189685, 0, 803.9699825661475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34.54558518838915, 0, 967.2763852748962, 0, -5803.658311649377, 0, 11054.58726028453, 0, -7369.724840189685, 0, 1607.939965132295, 0, -82.4584597503741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.935083598341307, 0, 161.2127308791494, 0, -1160.731662329875, 0, 2763.646815071132, 0, -2456.574946729895, 0, 803.9699825661475, 0, -82.4584597503741, 0, 1.570637328578554,
        -0.4505094349975498, 0, 0, -3.153566044982849, 0, 50.45705671972558, 0, 0, 0, 0, -9.460698134948546, 0, 302.7423403183535, 0, -706.3987940761581, 0, 0, 0, 0, 0, 0, -15.76783022491424, 0, 756.8558507958837, 0, -3531.99397038079, 0, 2825.595176304632, 0, 0, 0, 0, 0, 0, 0, 0, -15.76783022491424, 0, 1009.141134394512, 0, -7063.987940761581, 0, 11302.38070521853, 0, -4036.564537578046, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9.460698134948546, 0, 756.8558507958837, 0, -7063.987940761581, 0, 16953.57105782779, 0, -12109.69361273414, 0, 2152.834420041625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.153566044982849, 0, 302.7423403183535, 0, -3531.99397038079, 0, 11302.38070521853, 0, -12109.69361273414, 0, 4305.668840083249, 0, -391.4244400075681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4505094349975498, 0, 50.45705671972558, 0, -706.3987940761581, 0, 2825.595176304632, 0, -4036.564537578046, 0, 2152.834420041625, 0, -391.4244400075681, 0, 17.20546989044255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 6.950121059606886, 0, 0, 0, 0, 34.75060529803443, 0, -222.4038739074204, 0, 0, 0, 0, 0, 0, 62.55108953646198, 0, -889.6154956296814, 0, 1556.827117351943, 0, 0, 0, 0, 0, 0, 0, 0, 34.75060529803443, 0, -1112.019369537102, 0, 4670.481352055828, 0, -3558.461982518726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34.75060529803443, 0, 0, 0, 3113.654234703885, 0, -7116.923965037452, 0, 2965.384985432271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62.55108953646198, 0, 1112.019369537102, 0, -3113.654234703885, 0, 0, 0, 2965.384985432271, 0, -862.6574503075699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34.75060529803443, 0, 889.6154956296814, 0, -4670.481352055828, 0, 7116.923965037452, 0, -2965.384985432271, 0, 0, 0, 66.35826540827461, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.950121059606886, 0, 222.4038739074204, 0, -1556.827117351943, 0, 3558.461982518726, 0, -2965.384985432271, 0, 862.6574503075699, 0, -66.35826540827461, 0, 0,
        0.454343626984201, 0, 0, 1.363030880952603, 0, -49.0691117142937, 0, 0, 0, 0, -1.363030880952603, 0, -98.13822342858741, 0, 654.2548228572494, 0, 0, 0, 0, 0, 0, -11.35859067460502, 0, 245.3455585714685, 0, 654.2548228572494, 0, -2442.551338667064, 0, 0, 0, 0, 0, 0, 0, 0, -20.44546321428904, 0, 981.3822342858741, 0, -3925.528937143496, 0, 0, 0, 3140.423149714797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17.71940145238384, 0, 1226.727792857343, 0, -9159.567520001492, 0, 14655.30803200239, 0, -3140.423149714797, 0, -1395.743622095465, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7.723841658731416, 0, 686.9675640001119, 0, -7196.803051429743, 0, 19540.41070933652, 0, -15702.11574857399, 0, 2791.487244190931, 0, 169.1810451024807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1.363030880952603, 0, 147.2073351428811, 0, -1962.764468571748, 0, 7327.654016001193, 0, -9421.269449144391, 0, 4187.230866286396, 0, -507.543135307442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -6.860438320902258, 0, 0, 0, 0, 6.860438320902258, 0, 205.8131496270677, 0, 0, 0, 0, 0, 0, 130.3483280971429, 0, -411.6262992541355, 0, -1317.204157613234, 0, 0, 0, 0, 0, 0, 0, 0, 308.7197244406016, 0, -3498.823543660152, 0, 3951.612472839701, 0, 2634.408315226467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 308.7197244406016, 0, -5762.768189557897, 0, 18440.85820658527, 0, -10537.63326090587, 0, -1756.272210150978, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130.3483280971429, 0, -3498.823543660152, 0, 18440.85820658527, 0, -26344.08315226467, 0, 8781.36105075489, 0, 319.3222200274506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.860438320902258, 0, -411.6262992541355, 0, 3951.612472839701, 0, -10537.63326090587, 0, 8781.36105075489, 0, -1915.933320164703, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.860438320902258, 0, 205.8131496270677, 0, -1317.204157613234, 0, 2634.408315226467, 0, -1756.272210150978, 0, 319.3222200274506, 0, 0, 0, 0,
        -0.4625306572389858, 0, 0, 2.312653286194929, 0, 46.25306572389858, 0, 0, 0, 0, 16.1885730033645, 0, -277.5183943433915, 0, -555.0367886867829, 0, 0, 0, 0, 0, 0, 30.06449272053408, 0, -1341.338905993059, 0, 3885.257520807481, 0, 1776.117723797705, 0, 0, 0, 0, 0, 0, 0, 0, 20.81387957575436, 0, -1665.110366060349, 0, 12210.80935110922, 0, -14208.94179038164, 0, -1776.117723797705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.4625306572389858, 0, -416.2775915150872, 0, 7770.515041614961, 0, -24865.64813316788, 0, 15985.05951417935, 0, 473.6313930127214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.937959858584787, 0, 462.5306572389858, 0, -2775.183943433915, 0, 0, 0, 8880.588618988527, 0, -4736.313930127214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2.312653286194929, 0, 231.2653286194929, 0, -2775.183943433915, 0, 8880.588618988527, 0, -8880.588618988527, 0, 2368.156965063607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 6.702706010712756, 0, 0, 0, 0, -73.72976611784032, 0, -178.7388269523402, 0, 0, 0, 0, 0, 0, -261.4055344177975, 0, 2144.865923428082, 0, 965.1896655426369, 0, 0, 0, 0, 0, 0, 0, 0, -180.9730622892444, 0, 4825.948327713185, 0, -12547.46565205428, 0, -1470.765204636399, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180.9730622892444, 0, 0, 0, -13512.65531759692, 0, 20590.71286490959, 0, 571.9642462474885, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261.4055344177975, 0, -4825.948327713185, 0, 13512.65531759692, 0, 0, 0, -8579.463693712328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73.72976611784032, 0, -2144.865923428082, 0, 12547.46565205428, 0, -20590.71286490959, 0, 8579.463693712328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.702706010712756, 0, 178.7388269523402, 0, -965.1896655426369, 0, 1470.765204636399, 0, -571.9642462474885, 0, 0, 0, 0, 0, 0,
        0.4763405743350052, 0, 0, -8.097789763695088, 0, -41.91797054148046, 0, 0, 0, 0, -20.48264469640522, 0, 754.5234697466482, 0, 419.1797054148046, 0, 0, 0, 0, 0, 0, 5.239746317685057, 0, 1047.949263537011, 0, -7964.414402881287, 0, -1006.031292995531, 0, 0, 0, 0, 0, 0, 0, 0, 47.15771685916551, 0, -1509.046939493296, 0, -2515.078232488827, 0, 20120.62585991062, 0, 574.8750245688748, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36.6782242237954, 0, -2640.832144113269, 0, 17605.54762742179, 0, -14084.43810193743, 0, -12072.37551594637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.334384020345036, 0, -586.8515875807264, 0, 8802.773813710896, 0, -28168.87620387487, 0, 20120.62585991062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3.334384020345036, 0, 293.4257937903632, 0, -2934.257937903632, 0, 7042.219050968717, 0, -4024.125171982124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -6.461397918982832, 0, 0, 0, 0, 161.5349479745708, 0, 142.1507542176223, 0, 0, 0, 0, 0, 0, 71.07537710881116, 0, -3695.91960965818, 0, -568.6030168704893, 0, 0, 0, 0, 0, 0, 0, 0, -639.6783939793004, 0, 2132.261313264335, 0, 15352.28145550321, 0, 487.3740144604194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -639.6783939793004, 0, 11940.66335428027, 0, -23881.32670856055, 0, -13646.47240489174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71.07537710881116, 0, 2132.261313264335, 0, -23881.32670856055, 0, 34116.18101222936, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161.5349479745708, 0, -3695.91960965818, 0, 15352.28145550321, 0, -13646.47240489174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.461397918982832, 0, 142.1507542176223, 0, -568.6030168704893, 0, 487.3740144604194, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.4985076721685702, 0, 0, 16.45075318156282, 0, 35.89255239613705, 0, 0, 0, 0, -10.46866111553997, 0, -1220.34678146866, 0, -263.2120509050051, 0, 0, 0, 0, 0, 0, -93.22093469552263, 0, 1974.090381787538, 0, 9212.421781675177, 0, 350.9494012066734, 0, 0, 0, 0, 0, 0, 0, 0, -49.35225954468845, 0, 4737.816916290091, 0, -23689.08458145046, 0, -12634.17844344024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49.35225954468845, 0, -1184.454229072523, 0, -11054.90613801021, 0, 44219.62455204085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28.4149373136085, 0, -2368.908458145046, 0, 19740.90381787538, 0, -29479.74970136057, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.486569049517132, 0, 323.0329715652335, 0, -2368.908458145046, 0, 3158.544610860061, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 6.105447148378159, 0, 0, 0, 0, -262.5342273802609, 0, -97.68715437405055, 0, 0, 0, 0, 0, 0, 738.7591049537573, 0, 4298.234792458224, 0, 214.9117396229112, 0, 0, 0, 0, 0, 0, 0, 0, 1007.398779482396, 0, -16118.38047171834, 0, -9671.028283031004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1007.398779482396, 0, 0, 0, 45131.46532081135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -738.7591049537573, 0, 16118.38047171834, 0, -45131.46532081135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262.5342273802609, 0, -4298.234792458224, 0, 9671.028283031004, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6.105447148378159, 0, 97.68715437405055, 0, -214.9117396229112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.5354831382940298, 0, 0, -28.38060632958358, 0, -27.84512319128955, 0, 0, 0, 0, 118.3417735629806, 0, 1503.636652329636, 0, 111.3804927651582, 0, 0, 0, 0, 0, 0, 76.57408877604626, 0, -7657.408877604626, 0, -6125.927102083701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229.7222663281388, 0, 3675.556261250221, 0, 36755.56261250221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76.57408877604626, 0, 8270.001587812996, 0, -51457.78765750309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76.57408877604626, 0, -4288.148971458591, 0, 18377.7813062511, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.890314521234328, 0, 306.2963551041851, 0, -1225.18542041674, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, -5.564904012730147, 0, 0, 0, 0, 361.7187608274595, 0, 48.22916811032794, 0, 0, 0, 0, 0, 0, -2387.343821461233, 0, -3183.125095281644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2387.343821461233, 0, 23873.43821461233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2387.343821461233, 0, -44563.75133394302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2387.343821461233, 0, 23873.43821461233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 361.7187608274595, 0, -3183.125095281644, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5.564904012730147, 0, 48.22916811032794, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -0.6071808065118904, 0, 0, 46.75292210141556, 0, 17.00106258233293, 0, 0, 0, 0, -386.7741737480742, 0, -1326.082881421969, 0, 0, 0, 0, 0, 0, 0, 0, 607.7879873184023, 0, 12155.75974636805, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260.480565993601, 0, -29173.82339128331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -607.7879873184023, 0, 21880.36754346248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165.7603601777461, 0, -4862.303898547218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7.893350484654575, 0, 221.0138135703281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 4.624151256630012, 0, 0, 0, 0, -420.7977643533311, 0, 0, 0, 0, 0, 0, 0, 0, 4628.775407886642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13886.32622365993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13886.32622365993, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4628.775407886642, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 420.7977643533311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4.624151256630012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.8442506508573726, 0, 0, -88.64631834002413, 0, 0, 0, 0, 0, 0, 1152.402138420314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4225.47450754115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5432.752938267193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2535.28470452469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384.1340461401045, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12.66375976286059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        */
};



static int _len_cart[] = {
        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136
};

struct cart2sp_t {
        dtype *cart2sph;
        //dtype *cart2j_lt_lR; // j < kappa, l > 0
        //dtype *cart2j_lt_lI; // j < kappa, l > 0
        //dtype *cart2j_gt_lR; // j > kappa, l < 0
        //dtype *cart2j_gt_lI; // j > kappa, l < 0
};


static struct cart2sp_t g_c2s[] = {
        {g_trans_cart2sph     }, // 1
        {g_trans_cart2sph+1   }, // 2
        {g_trans_cart2sph+10  }, //3
        {g_trans_cart2sph+40  }, // 4
        {g_trans_cart2sph+110 }, //5
        {g_trans_cart2sph+245 },
        {g_trans_cart2sph+476 },
        {g_trans_cart2sph+840 },
        {g_trans_cart2sph+1380},
        {g_trans_cart2sph+2145},
        {g_trans_cart2sph+3190},
        {g_trans_cart2sph+4576},
        {g_trans_cart2sph+6370},
        {g_trans_cart2sph+8645},
        {g_trans_cart2sph+11480},
        {g_trans_cart2sph+14960},
};


void CINTdgemm_NN1(int m, int n, int k,
                   dtype *a, dtype *b, dtype *c, int ldc) {
        int i, j, kp;
        dtype bi;
        for (j = 0; j < n; j++) {
                for (i = 0; i < m; i++) {
                        c[i+ldc*j] = 0;
                }
                for (kp = 0; kp < k; kp++) {
                        bi = b[kp+k*j];
#pragma GCC ivdep
                        for (i = 0; i < m; i++) {
                                c[i+ldc*j] += a[i+m*kp] * bi;
                        }
                }
        }
}

void CINTdgemm_NN(int m, int n, int k, dtype *a, dtype *b, dtype *c) {
        CINTdgemm_NN1(m, n, k, a, b, c, m);
}

void CINTdgemm_TN(int m, int n, int k,
                  dtype *a, dtype *b, dtype *c)
{
        int i, j, kp;
        dtype ci;
        for (j = 0; j < n; j++) {
                for (i = 0; i < m; i++) {
                        ci = 0;
#pragma GCC ivdep
                        for (kp = 0; kp < k; kp++) {
                                ci += a[kp+k*i] * b[kp+k*j];
                        }
                        c[i+m*j] = ci;
                }
        }
}

// transform integrals from cartesian to spheric
static dtype *a_bra_cart2spheric(dtype *gsph, int nket, dtype *gcart, int l)
{
        int nf = _len_cart[l];
        int nd = l * 2 + 1;
        CINTdgemm_TN(nd, nket, nf, g_c2s[l].cart2sph, gcart, gsph);
        return gsph;
}

static dtype *a_ket_cart2spheric(dtype *gsph, dtype *gcart,
                                  int lds, int nbra, int l)
{
        int nf = _len_cart[l];
        int nd = l * 2 + 1;
        CINTdgemm_NN1(nbra, nd, nf, gcart, g_c2s[l].cart2sph, gsph, lds);
        return gsph;
}

// transform s function from cartesian to spheric
static dtype *s_bra_cart2spheric(dtype *gsph, int nket, dtype *gcart, int l)
{
        /*
        int i;
        for (i = 0; i < nket; i++) {
                *gsph = gcart[i];
        }*/
        return gcart;
}
static dtype *s_ket_cart2spheric(dtype *gsph, dtype *gcart,
                                  int lds, int nbra, int l)
{
        /*
        int i;
        for (i = 0; i < nbra; i++) {
                gsph[i] = gcart[i];
        }*/
        return gcart;
}

// transform p function from cartesian to spheric
static dtype *p_bra_cart2spheric(dtype *gsph, int nket, dtype *gcart, int l)
{
        return gcart;
}
static dtype *p_ket_cart2spheric(dtype *gsph, dtype *gcart,
                                  int lds, int nbra, int l)
{
        return gcart;
}
// transform d function from cartesian to spheric
static dtype *d_bra_cart2spheric(dtype *gsph, int nket, dtype *gcart, int l)
{
        dtype *coeff_c2s = g_c2s[2].cart2sph;
        dtype *pgsph = gsph;
        int i;
        for (i = 0; i < nket; i++) {
                gsph[0] = coeff_c2s[ 1] * gcart[1];
                gsph[1] = coeff_c2s[10] * gcart[4];
                gsph[2] = coeff_c2s[12] * gcart[0]
                        + coeff_c2s[15] * gcart[3]
                        + coeff_c2s[17] * gcart[5];
                gsph[3] = coeff_c2s[20] * gcart[2];
                gsph[4] = coeff_c2s[24] * gcart[0]
                        + coeff_c2s[27] * gcart[3];
                gsph += 5;
                gcart += 6;
        }
        return pgsph;
}
static dtype *d_ket_cart2spheric(dtype *gsph, dtype *gcart,
                                  int lds, int nbra, int l)
{
        dtype *coeff_c2s = g_c2s[2].cart2sph;
        dtype *pgsph = gsph;
        int i;
        for (i = 0; i < nbra; i++) {
                gsph[0*lds+i] = coeff_c2s[ 1] * gcart[1*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[1*lds+i] = coeff_c2s[10] * gcart[4*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[2*lds+i] = coeff_c2s[12] * gcart[0*nbra+i]
                              + coeff_c2s[15] * gcart[3*nbra+i]
                              + coeff_c2s[17] * gcart[5*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[3*lds+i] = coeff_c2s[20] * gcart[2*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[4*lds+i] = coeff_c2s[24] * gcart[0*nbra+i]
                              + coeff_c2s[27] * gcart[3*nbra+i];
        }
        return pgsph;
}

// transform f function from cartesian to spheric
static dtype *f_bra_cart2spheric(dtype *gsph, int nket, dtype *gcart, int l)
{
        dtype *coeff_c2s = g_c2s[3].cart2sph;
        dtype *pgsph = gsph;
        int i;
        for (i = 0; i < nket; i++) {
                gsph[0] = coeff_c2s[ 1] * gcart[1]
                        + coeff_c2s[ 6] * gcart[6];
                gsph[1] = coeff_c2s[14] * gcart[4];
                gsph[2] = coeff_c2s[21] * gcart[1]
                        + coeff_c2s[26] * gcart[6]
                        + coeff_c2s[28] * gcart[8];
                gsph[3] = coeff_c2s[32] * gcart[2]
                        + coeff_c2s[37] * gcart[7]
                        + coeff_c2s[39] * gcart[9];
                gsph[4] = coeff_c2s[40] * gcart[0]
                        + coeff_c2s[43] * gcart[3]
                        + coeff_c2s[45] * gcart[5];
                gsph[5] = coeff_c2s[52] * gcart[2]
                        + coeff_c2s[57] * gcart[7];
                gsph[6] = coeff_c2s[60] * gcart[0]
                        + coeff_c2s[63] * gcart[3];
                gsph += 7;
                gcart += 10;
        }
        return pgsph;
}
static dtype *f_ket_cart2spheric(dtype *gsph, dtype *gcart,
                                  int lds, int nbra, int l)
{
        dtype *coeff_c2s = g_c2s[3].cart2sph;
        dtype *pgsph = gsph;
        int i;
        for (i = 0; i < nbra; i++) {
                gsph[0*lds+i] = coeff_c2s[ 1] * gcart[1*nbra+i]
                              + coeff_c2s[ 6] * gcart[6*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[1*lds+i] = coeff_c2s[14] * gcart[4*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[2*lds+i] = coeff_c2s[21] * gcart[1*nbra+i]
                              + coeff_c2s[26] * gcart[6*nbra+i]
                              + coeff_c2s[28] * gcart[8*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[3*lds+i] = coeff_c2s[32] * gcart[2*nbra+i]
                              + coeff_c2s[37] * gcart[7*nbra+i]
                              + coeff_c2s[39] * gcart[9*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[4*lds+i] = coeff_c2s[40] * gcart[0*nbra+i]
                              + coeff_c2s[43] * gcart[3*nbra+i]
                              + coeff_c2s[45] * gcart[5*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[5*lds+i] = coeff_c2s[52] * gcart[2*nbra+i]
                              + coeff_c2s[57] * gcart[7*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[6*lds+i] = coeff_c2s[60] * gcart[0*nbra+i]
                              + coeff_c2s[63] * gcart[3*nbra+i];
        }
        return pgsph;
}

// transform g function from cartesian to spheric
static dtype *g_bra_cart2spheric(dtype *gsph, int nket, dtype *gcart, int l)
{
        dtype *coeff_c2s = g_c2s[4].cart2sph;
        dtype *pgsph = gsph;
        int i;
        for (i = 0; i < nket; i++) {
                gsph[0] = coeff_c2s[  1] * gcart[ 1]
                        + coeff_c2s[  6] * gcart[ 6];
                gsph[1] = coeff_c2s[ 19] * gcart[ 4]
                        + coeff_c2s[ 26] * gcart[11];
                gsph[2] = coeff_c2s[ 31] * gcart[ 1]
                        + coeff_c2s[ 36] * gcart[ 6]
                        + coeff_c2s[ 38] * gcart[ 8];
                gsph[3] = coeff_c2s[ 49] * gcart[ 4]
                        + coeff_c2s[ 56] * gcart[11]
                        + coeff_c2s[ 58] * gcart[13];
                gsph[4] = coeff_c2s[ 60] * gcart[ 0]
                        + coeff_c2s[ 63] * gcart[ 3]
                        + coeff_c2s[ 65] * gcart[ 5]
                        + coeff_c2s[ 70] * gcart[10]
                        + coeff_c2s[ 72] * gcart[12]
                        + coeff_c2s[ 74] * gcart[14];
                gsph[5] = coeff_c2s[ 77] * gcart[ 2]
                        + coeff_c2s[ 82] * gcart[ 7]
                        + coeff_c2s[ 84] * gcart[ 9];
                gsph[6] = coeff_c2s[ 90] * gcart[ 0]
                        + coeff_c2s[ 95] * gcart[ 5]
                        + coeff_c2s[100] * gcart[10]
                        + coeff_c2s[102] * gcart[12];
                gsph[7] = coeff_c2s[107] * gcart[ 2]
                        + coeff_c2s[112] * gcart[ 7];
                gsph[8] = coeff_c2s[120] * gcart[ 0]
                        + coeff_c2s[123] * gcart[ 3]
                        + coeff_c2s[130] * gcart[10];
                gsph += 9;
                gcart += 15;
        }
        return pgsph;
}
static dtype *g_ket_cart2spheric(dtype *gsph, dtype *gcart,
                                  int lds, int nbra, int l)
{
        dtype *coeff_c2s = g_c2s[4].cart2sph;
        dtype *pgsph = gsph;
        int i;
        for (i = 0; i < nbra; i++) {
                gsph[0*lds+i] = coeff_c2s[  1] * gcart[ 1*nbra+i]
                              + coeff_c2s[  6] * gcart[ 6*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[1*lds+i] = coeff_c2s[ 19] * gcart[ 4*nbra+i]
                              + coeff_c2s[ 26] * gcart[11*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[2*lds+i] = coeff_c2s[ 31] * gcart[ 1*nbra+i]
                              + coeff_c2s[ 36] * gcart[ 6*nbra+i]
                              + coeff_c2s[ 38] * gcart[ 8*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[3*lds+i] = coeff_c2s[ 49] * gcart[ 4*nbra+i]
                              + coeff_c2s[ 56] * gcart[11*nbra+i]
                              + coeff_c2s[ 58] * gcart[13*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[4*lds+i] = coeff_c2s[ 60] * gcart[ 0*nbra+i]
                              + coeff_c2s[ 63] * gcart[ 3*nbra+i]
                              + coeff_c2s[ 65] * gcart[ 5*nbra+i]
                              + coeff_c2s[ 70] * gcart[10*nbra+i]
                              + coeff_c2s[ 72] * gcart[12*nbra+i]
                              + coeff_c2s[ 74] * gcart[14*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[5*lds+i] = coeff_c2s[ 77] * gcart[ 2*nbra+i]
                              + coeff_c2s[ 82] * gcart[ 7*nbra+i]
                              + coeff_c2s[ 84] * gcart[ 9*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[6*lds+i] = coeff_c2s[ 90] * gcart[ 0*nbra+i]
                              + coeff_c2s[ 95] * gcart[ 5*nbra+i]
                              + coeff_c2s[100] * gcart[10*nbra+i]
                              + coeff_c2s[102] * gcart[12*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[7*lds+i] = coeff_c2s[107] * gcart[ 2*nbra+i]
                              + coeff_c2s[112] * gcart[ 7*nbra+i];
        }
        for (i = 0; i < nbra; i++) {
                gsph[8*lds+i] = coeff_c2s[120] * gcart[ 0*nbra+i]
                              + coeff_c2s[123] * gcart[ 3*nbra+i]
                              + coeff_c2s[130] * gcart[10*nbra+i];
        }
        return pgsph;
}


typedef dtype *(*Funcs) (dtype *gsph, int nket, dtype *gcart, int l);
Funcs c2s_bra_sph[16] = {

        s_bra_cart2spheric,
        p_bra_cart2spheric,
        d_bra_cart2spheric,
        f_bra_cart2spheric,
        g_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
        a_bra_cart2spheric,
};


dtype *(*c2s_ket_sph[])(dtype *gsph, dtype *gcart,
                         int lds, int nbra, int l) = {
        s_ket_cart2spheric,
        p_ket_cart2spheric,
        d_ket_cart2spheric,
        f_ket_cart2spheric,
        g_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
        a_ket_cart2spheric,
};



 /* use f_ket to transform k,l for gctr(i,j,k,l), where
 * sizsph = nbra * (2*l+1)
 * sizcart = nbra * (l*(l+1)/2)
 * and return the pointer to the buffer which holds the transformed gctr
 */
static dtype *sph2e_inner(dtype *gsph, dtype *gcart, int l, int nbra, int ncall, int sizsph, int sizcart)
{
        int n;

        if (l == 0 || l == 1) return gcart;
        else if (l == 2){
                        for (n = 0; n < ncall; n++) {
                                d_ket_cart2spheric(gsph+n*sizsph, gcart+n*sizcart, nbra, nbra, l);
                        }
        }
        else if (l == 3){
                        for (n = 0; n < ncall; n++) {
                                f_ket_cart2spheric(gsph+n*sizsph, gcart+n*sizcart, nbra, nbra, l);
                        }
        }
        else if (l == 4) {
                        for (n = 0; n < ncall; n++) {
                                g_ket_cart2spheric(gsph+n*sizsph, gcart+n*sizcart, nbra, nbra, l);
                        }
        }
        else {
                        for (n = 0; n < ncall; n++) {
                                a_ket_cart2spheric(gsph+n*sizsph, gcart+n*sizcart, nbra, nbra, l);
                        }
        }

        return gsph;
}


/*
 * gctr(i,k,l,j) -> fijkl(i,j,k,l)
 * fijkl(ic:ic-1+di,jc:jc-1+dj,kc:kc-1+dk,lc:lc-1+dl)
 * fijkl(ni,nj,nk,nl), gctr(mi,mk,ml,mj)
 */
static void dcopy_iklj(dtype *fijkl, const dtype *gctr, const int ni, const int nj, const int nk, const int nl, const int mi, const int mj, const int mk, const int ml)
{
        const size_t nij = ni * nj;
        const size_t nijk = nij * nk;
        const size_t mik = mi * mk;
        const size_t mikl = mik * ml;
        int i, j, k, l;
        dtype *pijkl;
        const dtype *pgctr;

        switch (mi) {
        case 1:
                for (l = 0; l < ml; l++) {
                        for (k = 0; k < mk; k++) {
                                pijkl = fijkl + k * nij;
                                pgctr = gctr + k * mi;
#pragma GCC ivdep
                                for (j = 0; j < mj; j++) {
                                        pijkl[ni*j] = pgctr[mikl*j];
                                }
                        }
                        fijkl += nijk;
                        gctr += mik;
                }
                break;
        case 3:
                for (l = 0; l < ml; l++) {
                        for (k = 0; k < mk; k++) {
                                pijkl = fijkl + k * nij;
                                pgctr = gctr + k * mi;
#pragma GCC ivdep
                                for (j = 0; j < mj; j++) {
                                        pijkl[ni*j+0] = pgctr[mikl*j+0];
                                        pijkl[ni*j+1] = pgctr[mikl*j+1];
                                        pijkl[ni*j+2] = pgctr[mikl*j+2];
                                }
                        }
                        fijkl += nijk;
                        gctr += mik;
                }
                break;
        case 5:
                for (l = 0; l < ml; l++) {
                        for (k = 0; k < mk; k++) {
                                pijkl = fijkl + k * nij;
                                pgctr = gctr + k * mi;
#pragma GCC ivdep
                                for (j = 0; j < mj; j++) {
                                        pijkl[ni*j+0] = pgctr[mikl*j+0];
                                        pijkl[ni*j+1] = pgctr[mikl*j+1];
                                        pijkl[ni*j+2] = pgctr[mikl*j+2];
                                        pijkl[ni*j+3] = pgctr[mikl*j+3];
                                        pijkl[ni*j+4] = pgctr[mikl*j+4];
                                }
                        }
                        fijkl += nijk;
                        gctr += mik;
                }
                break;
        case 6:
                for (l = 0; l < ml; l++) {
                        for (k = 0; k < mk; k++) {
                                pijkl = fijkl + k * nij;
                                pgctr = gctr + k * mi;
#pragma GCC ivdep
                                for (j = 0; j < mj; j++) {
                                        pijkl[ni*j+0] = pgctr[mikl*j+0];
                                        pijkl[ni*j+1] = pgctr[mikl*j+1];
                                        pijkl[ni*j+2] = pgctr[mikl*j+2];
                                        pijkl[ni*j+3] = pgctr[mikl*j+3];
                                        pijkl[ni*j+4] = pgctr[mikl*j+4];
                                        pijkl[ni*j+5] = pgctr[mikl*j+5];
                                }
                        }
                        fijkl += nijk;
                        gctr += mik;
                }
                break;
        case 7:
                for (l = 0; l < ml; l++) {
                        for (k = 0; k < mk; k++) {
                                pijkl = fijkl + k * nij;
                                pgctr = gctr + k * mi;
#pragma GCC ivdep
                                for (j = 0; j < mj; j++) {
                                        pijkl[ni*j+0] = pgctr[mikl*j+0];
                                        pijkl[ni*j+1] = pgctr[mikl*j+1];
                                        pijkl[ni*j+2] = pgctr[mikl*j+2];
                                        pijkl[ni*j+3] = pgctr[mikl*j+3];
                                        pijkl[ni*j+4] = pgctr[mikl*j+4];
                                        pijkl[ni*j+5] = pgctr[mikl*j+5];
                                        pijkl[ni*j+6] = pgctr[mikl*j+6];
                                }
                        }
                        fijkl += nijk;
                        gctr += mik;
                }
                break;
        default:
                for (l = 0; l < ml; l++) {
                        for (k = 0; k < mk; k++) {
                                pijkl = fijkl + k * nij;
                                pgctr = gctr + k * mi;
                                for (j = 0; j < mj; j++) {
#pragma GCC ivdep
                                        for (i = 0; i < mi; i++) {
                                                pijkl[ni*j+i] = pgctr[mikl*j+i];
                                        }
                                }
                        }
                        fijkl += nijk;
                        gctr += mik;
                }
        }
}


void c2s_dset0(dtype *out, int *dims, int *counts)
{
        int ni = dims[0];
        int nj = dims[1];
        int nk = dims[2];
        size_t nij = ni * nj;
        size_t nijk = nij * nk;
        int i, j, k, l;
        if (dims == counts) {
                for (i = 0; i < nijk * counts[3]; i++) {
                        out[i] = 0;
                }
                return;
        }
        int di = counts[0];
        int dj = counts[1];
        int dk = counts[2];
        int dl = counts[3];
        dtype *pout;
        for (l = 0; l < dl; l++) {
                for (k = 0; k < dk; k++) {
                        pout = out + k * nij;
                        for (j = 0; j < dj; j++) {
                        for (i = 0; i < di; i++) {
                                pout[j*ni+i] = 0;
                        } }
                }
                out += nijk;
        }
}


int int2e_sph(dtype *out, int n_out, int *dims, const int *shls, const int *atm, int natm, const int *bas, int nbas, const dtype *env, int n_env, dtype * eri, dtype * tile_g, int * tile_idx, dtype * tile_buf) {

  int ng[] = {0, 0, 0, 0, 0, 1, 1, 1};

  const int i_sh = shls[0];
  const int j_sh = shls[1];
  const int k_sh = shls[2];
  const int l_sh = shls[3];

  int i_l = bas[BAS_SLOTS * i_sh + ANG_OF];
  int j_l = bas[BAS_SLOTS * j_sh + ANG_OF];
  int k_l = bas[BAS_SLOTS * k_sh + ANG_OF];
  int l_l = bas[BAS_SLOTS * l_sh + ANG_OF];

  int _x_ctr[4];
  _x_ctr[0] = bas[BAS_SLOTS * i_sh + NCTR_OF];
  _x_ctr[1] = bas[BAS_SLOTS * j_sh + NCTR_OF];
  _x_ctr[2] = bas[BAS_SLOTS * k_sh + NCTR_OF];
  _x_ctr[3] = bas[BAS_SLOTS * l_sh + NCTR_OF];

  int nfi  = (i_l+1)*(i_l+2)/2;
  int nfj  = (j_l+1)*(j_l+2)/2;
  int nfk  = (k_l+1)*(k_l+2)/2;
  int nfl  = (l_l+1)*(l_l+2)/2;
  size_t nf = nfi * nfk * nfl * nfj;

  const dtype * ri = env + atm[ATM_SLOTS * bas[BAS_SLOTS*i_sh + ATOM_OF] + PTR_COORD];
  const dtype * rj = env + atm[ATM_SLOTS * bas[BAS_SLOTS*j_sh + ATOM_OF] + PTR_COORD];
  const dtype * rk = env + atm[ATM_SLOTS * bas[BAS_SLOTS*k_sh + ATOM_OF] + PTR_COORD];
  const dtype * rl = env + atm[ATM_SLOTS * bas[BAS_SLOTS*l_sh + ATOM_OF] + PTR_COORD];

  dtype expcutoff;

  dtype common_factor = (M_PI*M_PI*M_PI)*2/SQRTPI * CINTcommon_fac_sp(i_l) * CINTcommon_fac_sp(j_l) * CINTcommon_fac_sp(k_l) * CINTcommon_fac_sp(l_l);
  if (env[PTR_EXPCUTOFF] == 0) { expcutoff = EXPCUTOFF; }
  else { expcutoff = std::fmax(static_cast<dtype>(MIN_EXPCUTOFF), env[PTR_EXPCUTOFF]) + 1; } // +1 to ensure accuracy. See comments in function CINT2e_loop_nopt

  int gbits        = ng[GSHIFT];
  int ncomp_e1     = ng[POS_E1];
  int ncomp_e2     = ng[POS_E2];
  int ncomp_tensor = ng[TENSOR];

  int li_ceil = i_l + ng[IINC];
  int lj_ceil = j_l + ng[JINC];
  int lk_ceil = k_l + ng[KINC];
  int ll_ceil = l_l + ng[LINC];

  int nrys_roots = (li_ceil + lj_ceil + lk_ceil + ll_ceil)/2 + 1;

  int dli, dlj, dlk, dll;
  int ibase = li_ceil > lj_ceil;
  int kbase = lk_ceil > ll_ceil;
  if (nrys_roots <= 2) { // use the fully optimized lj_4d algorithm
          ibase = 0;
          kbase = 0;
  }
  if (kbase) {
          dlk = lk_ceil + ll_ceil + 1;
          dll = ll_ceil + 1;
  } else {
          dlk = lk_ceil + 1;
          dll = lk_ceil + ll_ceil + 1;
  }

  if (ibase) {
          dli = li_ceil + lj_ceil + 1;
          dlj = lj_ceil + 1;
  } else {
          dli = li_ceil + 1;
          dlj = li_ceil + lj_ceil + 1;
  }
  int g_stride_i = nrys_roots;
  int g_stride_k = nrys_roots * dli;
  int g_stride_l = nrys_roots * dli * dlk;
  int g_stride_j = nrys_roots * dli * dlk * dll;
  int g_size     = nrys_roots * dli * dlk * dll * dlj; // definition of g_size

  int g2d_klmax;
  int g2d_ijmax;

  const dtype * rx_in_rklrx;
  const dtype * rx_in_rijrx;
  dtype rkrl[3];
  dtype rirj[3];

  dtype ai[1];
  dtype aj[1];
  dtype ak[1];
  dtype al[1];
  dtype fac[1];
  dtype rij[3];
  dtype rkl[3];

  if (kbase) {
          g2d_klmax = g_stride_k;
          rx_in_rklrx = rk;
          rkrl[0] = rk[0] - rl[0];
          rkrl[1] = rk[1] - rl[1];
          rkrl[2] = rk[2] - rl[2];
  } else {
          g2d_klmax = g_stride_l;
          rx_in_rklrx = rl;
          rkrl[0] = rl[0] - rk[0];
          rkrl[1] = rl[1] - rk[1];
          rkrl[2] = rl[2] - rk[2];
  }

  if (ibase) {
          g2d_ijmax = g_stride_i;
          rx_in_rijrx = ri;
          rirj[0] = ri[0] - rj[0];
          rirj[1] = ri[1] - rj[1];
          rirj[2] = ri[2] - rj[2];
  } else {
          g2d_ijmax = g_stride_j;
          rx_in_rijrx = rj;
          rirj[0] = rj[0] - ri[0];
          rirj[1] = rj[1] - ri[1];
          rirj[2] = rj[2] - ri[2];
  }


  int i_ctr = _x_ctr[0];
  int j_ctr = _x_ctr[1];
  int k_ctr = _x_ctr[2];
  int l_ctr = _x_ctr[3];

  int *x_ctr = _x_ctr;
  int n_comp = ncomp_e1 * ncomp_e2 * ncomp_tensor;
  size_t leng = g_size*3*((1<<gbits)+1);

  int counts[4];
  counts[0] = (i_l*2+1) * x_ctr[0];
  counts[1] = (j_l*2+1) * x_ctr[1];
  counts[2] = (k_l*2+1) * x_ctr[2];
  counts[3] = (l_l*2+1) * x_ctr[3];

  size_t nc = nf * x_ctr[0] * x_ctr[1] * x_ctr[2] * x_ctr[3];

  // this is never called on ipu because we already have cache size!
  // it's used before all the main compute to figure out how big a cache to allocate.
  if (out == NULL) {
          int i_prim = bas(NPRIM_OF, shls[0]);
          int j_prim = bas(NPRIM_OF, shls[1]);
          int k_prim = bas(NPRIM_OF, shls[2]);
          int l_prim = bas(NPRIM_OF, shls[3]);
          size_t pdata_size = ((i_prim*j_prim + k_prim*l_prim) * 5 + i_prim * x_ctr[0]  + j_prim * x_ctr[1] + k_prim * x_ctr[2] + l_prim * x_ctr[3] +(i_prim+j_prim+k_prim+l_prim)*2 + nf*3);
          size_t len0       = nf*n_comp;
          size_t cache_size = (size_t)std::fmax((float)(leng+len0+nc*n_comp*3 + pdata_size), (float)(nc*n_comp+nf*4)); // @alex: using fmax which takes only float, so have to cast.
          return cache_size;
  }

  //dtype gctr[nc*n_comp];
  dtype gctr[1296+1];  // hardcoded, may not be big enough for some cases.

  int n;
  int empty = 1;

  CINT2e_loop_nopt(gctr, env, rk, ri, rj, rl, expcutoff, rkrl, rirj,
                         ai, aj, ak, al, fac, rij, rkl, rx_in_rijrx, rx_in_rklrx,
                         common_factor, (lk_ceil+ll_ceil+1), nc*n_comp, &empty, shls, bas, // ints after this
                n_env, _x_ctr[0], _x_ctr[1], _x_ctr[2], _x_ctr[3],
                ncomp_e1 * ncomp_e2 * ncomp_tensor,
                li_ceil, lj_ceil, lk_ceil, ll_ceil, i_l,
                j_l, k_l, l_l, nfi, nfj, nfk, nfl, nf, g_stride_i, g_stride_k,
                g_stride_l, g_stride_j, nrys_roots, ibase, kbase, g_size, g2d_klmax, g2d_ijmax,
                leng, eri, tile_g, tile_idx);





  if (dims == NULL) { dims = counts; }
  int nout = dims[0] * dims[1] * dims[2] * dims[3];


  if (!empty) {
          for (n = 0; n < n_comp; n++) {
                  int di = i_l * 2 + 1;
                  int dj = j_l * 2 + 1;
                  int dk = k_l * 2 + 1;
                  int dl = l_l * 2 + 1;
                  int ni = dims[0];
                  int nj = dims[1];
                  int nk = dims[2];
                  int nl = dims[3];
                  int nfik = nfi * nfk;
                  int nfikl = nfik * nfl;
                  int dlj = dl * dj;
                  int ofj = ni * dj;

                  int ofk = ni * nj * dk;
                  int ofl = ni * nj * nk * dl;
                  int ic, jc, kc, lc;
                  int buflen = nfikl*dj;

                  // This increase from 80 to 1200 in 631g to 6-31g*
                  /*dtype buf1[81];
                  dtype buf2[81];
                  dtype buf3[81];
                  dtype buf4[81];*/

                  dtype * buf1 = tile_buf;
                  dtype * buf2 = tile_buf+buflen;
                  dtype * buf3 = tile_buf+buflen*2;
                  //dtype * buf4 = tile_buf+buflen*3;

                  //tile_g[0] = buflen;
                  //tile_g[3] = 3*buflen;


                  /*dtype buf1[1080];
                  dtype buf2[1080];
                  dtype buf3[1080];
                  dtype buf4[1080];*/

                  dtype *pout;
                  dtype *tmp1;
                  dtype *_tmp;

                  for (lc = 0; lc < l_ctr; lc++) {
                          for (kc = 0; kc < k_ctr; kc++) {
                                  for (jc = 0; jc < j_ctr; jc++) {
                                          for (ic = 0; ic < i_ctr; ic++) {
                                                  //tmp1 = c2s_ket_sph[j_l](buf1, _gctr, nfikl, nfikl, j_l);
                                                  tmp1 = c2s_ket_sph[j_l](buf1, gctr, nfikl, nfikl, j_l);

                                                  tmp1 = sph2e_inner(     buf2, tmp1, l_l, nfik, dj, nfik*dl, nfikl);
                                                  tmp1 = sph2e_inner(     buf3, tmp1, k_l, nfi, dlj, nfi*dk, nfik);

                                                  //tmp1 = c2s_bra_sph[i_l](buf4, dk*dlj, tmp1, i_l);
                                                  for (int v = 0; v < nc*n_comp; v++) gctr[v] = tmp1[v];
                                                  _tmp = c2s_bra_sph[i_l](buf1, dk*dlj, gctr, i_l);

                                                  pout = out + ofl * lc + ofk * kc + ofj * jc + di * ic;
                                                  dcopy_iklj(pout, _tmp, ni, nj, nk, nl, di, dj, dk, dl);
                                                  //gctr += nf; // WARNING:
                                          }
                                  }
                          }
                  }

          }
  }
  else {
          for (n = 0; n < n_comp; n++) {
                  c2s_dset0(out+nout*n, dims, counts);
          }
  }

  return !empty;
}


class poplar_int2e_sph : public Vertex {
public:
    Input<Vector<float>>  ipu_floats;
    Input<Vector<int>>    ipu_ints;
    Input<Vector<int>>    ipu_ij;

    Output<Vector<float>> ipu_output;

    Output<Vector<float>>  tile_g;
    Output<Vector<int>>    tile_idx;
    Output<Vector<float>>  tile_buf;

    bool compute() {

        const float * floats = ipu_floats.data();
        const int   * ints   = ipu_ints  .data();

        int n_eri    = ipu_ints[0];
        int n_buf    = ipu_ints[1];
        int n_atm    = ipu_ints[2];
        int n_bas    = ipu_ints[3];
        int n_env    = ipu_ints[4];
        int n_ao_loc = ipu_ints[5];

        int offset = 6;
        const int *ao_loc     = ints + offset;
        offset += n_ao_loc;
        const int *atm        = ints + offset;
        offset += n_atm*6;
        const int *bas        = ints + offset;

        const float * env = floats;
        float * eri = ipu_output.data();


        for (int i = 0; i < ipu_output.size(); i++){ eri[i] = 0; }

        dtype *_eri = eri;

        int2e_sph(eri, n_buf, NULL, ipu_ij.data(), atm, n_atm, bas, n_bas, env, n_env, _eri, tile_g.data(), tile_idx.data(), tile_buf.data());

        return true;
    }
};

class poplar_int2e_sph_forloop : public Vertex {
public:
    Input<Vector<float>>  ipu_floats;
    Input<Vector<int>>    ipu_ints;
    Input<Vector<int>>    ipu_ij;

    Output<Vector<float>> ipu_output;

    Output<Vector<float>>  tile_g;
    Output<Vector<int>>    tile_idx;
    Output<Vector<float>>  tile_buf;

    Input<Vector<float>>  chunks;
    Input<Vector<float>>  integral_size;

    bool compute() {
        // the output size is rather small
        const float * floats = ipu_floats.data();
        const int   * ints   = ipu_ints  .data();

        int n_eri    = ipu_ints[0];
        int n_buf    = ipu_ints[1];
        int n_atm    = ipu_ints[2];
        int n_bas    = ipu_ints[3];
        int n_env    = ipu_ints[4];
        int n_ao_loc = ipu_ints[5];

        int offset = 6;
        const int *ao_loc     = ints + offset;
        offset += n_ao_loc;
        const int *atm        = ints + offset;
        offset += n_atm*6;
        const int *bas        = ints + offset;

        const float * env = floats;

        for (int i = 0; i < ipu_output.size(); i++) ipu_output[i] = 0;

        for (int j = 0; j < chunks.size(); j++ ){
            float array[625] = {0.};
            float * eri = array;

            int arr[] = {ipu_ij[0+j*4], ipu_ij[1+j*4], ipu_ij[2+j*4], ipu_ij[3+j*4]};
            const int* shls = arr;

            dtype *_eri = eri;

            int2e_sph(eri, n_buf, NULL, shls, atm, n_atm, bas, n_bas, env, n_env, _eri, tile_g.data(), tile_idx.data(), tile_buf.data()) ;

            for (int i = 0; i < integral_size.size(); i++){ ipu_output[j*integral_size.size()+i] = eri[i]; }
        }

        return true;
    }
};
